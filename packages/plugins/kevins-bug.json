{
  "networkConfigs": [
    {
      "safeAddress": "0xBc2122028eEcd61df4B2cB2b996c00Bd856E333b",
      "moduleAddress": "0xFc74D2b66E455a30D4bA2a77821BA994e50F4c41",
      "safeInitData": "0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e77610000000000000000000000000000000000000000000000000000000000000140000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001a00e1e311009e56e3b0b9ed6f86f5ce128a1c0100000000000000000000000000000000000000000000000000000000000001448d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000f2008f3301c9eada5642b5bb12fd047d3ebb2932e619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000248236d0b80000000000000000000000000000000000000000000000000000000000000000018f3301c9eada5642b5bb12fd047d3ebb2932e6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002411ea37fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "1",
      "chainId": "100",
      "blockGasLimit": "17000000",
      "blockNumber": "33029978",
      "newConfig": {
        "projectName": "Permit2Adapter_SwapProxy_v3",
        "orgId": "cloepk9wp0001l809rbsegymp",
        "owners": [
          "0x1a00e1E311009E56e3b0B9Ed6F86f5Ce128a1C01"
        ],
        "mainnets": [],
        "testnets": [],
        "threshold": "1",
        "saltNonce": "0"
      },
      "executionMode": 2,
      "initialState": {
        "isExecuting": false,
        "isModuleDeployed": true,
        "isSafeDeployed": true
      },
      "isSystemDeployed": true,
      "actionInputs": [
        {
          "actionType": 2,
          "contracts": [
            {
              "address": "0x8F3788590DFab5711e5aF364d270981eFddFF732",
              "initCodeWithArgs": "0x608060405234801561001057600080fd5b5061183e806100206000396000f3fe6080604052600436106100b15760003560e01c8063451fcf4c116100695780634f899c481161004e5780634f899c48146101ac578063a1e8b1d5146101cc578063e7147294146101ec57600080fd5b8063451fcf4c1461016c5780634e89a7111461017f57600080fd5b80632426c6821161009a5780632426c682146101185780632d5403001461012b5780633142085c1461015957600080fd5b806301ffc9a7146100b65780630a8355b6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004611486565b6101ff565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b6101063660046114ea565b610298565b6040516100e29190611516565b61010b6101263660046115c7565b6103b6565b34801561013757600080fd5b5061014b610146366004611642565b6105bd565b6040519081526020016100e2565b61010b6101673660046115c7565b610699565b61014b61017a366004611697565b6109b8565b34801561018b57600080fd5b5061019f61019a366004611711565b610bb0565b6040516100e2919061172e565b3480156101b857600080fd5b5061014b6101c7366004611642565b610c29565b3480156101d857600080fd5b5061010b6101e73660046114ea565b610c94565b61014b6101fa366004611697565b610d60565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3050af3c00000000000000000000000000000000000000000000000000000000148061029257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b9190611788565b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff86169063b3d7f6b9906024015b602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a191906117a5565b90506103ad8282610ed9565b95945050505050565b606081804211156103f3576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001841461042d576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008873ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190611788565b6040517fba087652000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff89811660248301523360448301529192506000918b169063ba087652906064016020604051808303816000875af115801561051f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054391906117a5565b90508087876000818110610559576105596117be565b9050604002016020013511156105a3576040517fe9a3651e000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b6105ad8282610ed9565b935050505b509695505050505050565b6000600182146105f9576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663ef8b30f784846000818110610628576106286117be565b905060400201602001356040518263ffffffff1660e01b815260040161065091815260200190565b602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069191906117a5565b949350505050565b606081804211156106d6576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018414610710576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810188905260009073ffffffffffffffffffffffffffffffffffffffff8a169063b3d7f6b990602401602060405180830381865afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a291906117a5565b905060008973ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190611788565b905061083973ffffffffffffffffffffffffffffffffffffffff8216333085610f68565b61085a73ffffffffffffffffffffffffffffffffffffffff82168b84610ff7565b6040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8981166024830152600091908c16906394bf804d906044016020604051808303816000875af11580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f791906117a5565b9050808888600081811061090d5761090d6117be565b905060400201602001351015610952576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810182905260240161059a565b8281101561099f5761097d73ffffffffffffffffffffffffffffffffffffffff8316338386036110cf565b61099f73ffffffffffffffffffffffffffffffffffffffff83168c6000610ff7565b6109a98282610ed9565b9b9a5050505050505050505050565b600081804211156109f5576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610a2f576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087876000818110610a4457610a446117be565b610a5a9260206040909202019081019150611711565b9050600088886000818110610a7157610a716117be565b905060400201602001359050610aaa3330838573ffffffffffffffffffffffffffffffffffffffff16610f68909392919063ffffffff16565b610acb73ffffffffffffffffffffffffffffffffffffffff83168b83610ff7565b6040517f6e553f650000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88811660248301528b1690636e553f65906044016020604051808303816000875af1158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906117a5565b935083861115610ba3576040517fe9a3651e0000000000000000000000000000000000000000000000000000000081526004810185905260240161059a565b5050509695505050505050565b60606102928273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611788565b611112565b600060018214610c65576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16630a28a47784846000818110610628576106286117be565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d079190611788565b6040517f4cdad5060000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff861690634cdad50690602401610360565b60008180421115610d9d576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610dd7576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff1663b460af9488886000818110610e0657610e066117be565b9050604002016020013587336040518463ffffffff1660e01b8152600401610e579392919092835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b6020604051808303816000875af1158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a91906117a5565b9150818410156105b2576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810183905260240161059a565b604080516001808252818301909252606091816020015b6040805180820190915260008082526020820152815260200190600190039081610ef057905050905060405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381525081600081518110610f5757610f576117be565b602002602001018190525092915050565b60405173ffffffffffffffffffffffffffffffffffffffff8481166024830152838116604483015260648201839052610ff19186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611187565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611083848261121d565b610ff15760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526110c591869182169063095ea7b390606401610faa565b610ff18482611187565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261110d91859182169063a9059cbb90606401610faa565b505050565b604080516001808252818301909252606091602080830190803683370190505090508181600081518110611148576111486117be565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050919050565b60006111a973ffffffffffffffffffffffffffffffffffffffff8416836112da565b905080516000141580156111ce5750808060200190518101906111cc91906117ed565b155b1561110d576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161059a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611247919061180f565b6000604051808303816000865af19150503d8060008114611284576040519150601f19603f3d011682016040523d82523d6000602084013e611289565b606091505b50915091508180156112b35750805115806112b35750808060200190518101906112b391906117ed565b80156103ad57505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606112e8838360006112ef565b9392505050565b60608147101561132d576040517fcd78605900000000000000000000000000000000000000000000000000000000815230600482015260240161059a565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051611356919061180f565b60006040518083038185875af1925050503d8060008114611393576040519150601f19603f3d011682016040523d82523d6000602084013e611398565b606091505b50915091506113a88683836113b2565b9695505050505050565b6060826113c7576113c282611441565b6112e8565b81511580156113eb575073ffffffffffffffffffffffffffffffffffffffff84163b155b1561143a576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161059a565b50806112e8565b8051156114515780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006020828403121561149857600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112e857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461148357600080fd5b600080604083850312156114fd57600080fd5b8235611508816114c8565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561156e578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611533565b5091979650505050505050565b60008083601f84011261158d57600080fd5b50813567ffffffffffffffff8111156115a557600080fd5b6020830191508360208260061b85010111156115c057600080fd5b9250929050565b60008060008060008060a087890312156115e057600080fd5b86356115eb816114c8565b9550602087013594506040870135611602816114c8565b9350606087013567ffffffffffffffff81111561161e57600080fd5b61162a89828a0161157b565b979a9699509497949695608090950135949350505050565b60008060006040848603121561165757600080fd5b8335611662816114c8565b9250602084013567ffffffffffffffff81111561167e57600080fd5b61168a8682870161157b565b9497909650939450505050565b60008060008060008060a087890312156116b057600080fd5b86356116bb816114c8565b9550602087013567ffffffffffffffff8111156116d757600080fd5b6116e389828a0161157b565b90965094505060408701356116f7816114c8565b959894975092956060810135946080909101359350915050565b60006020828403121561172357600080fd5b81356112e8816114c8565b6020808252825182820181905260009190848201906040850190845b8181101561177c57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161174a565b50909695505050505050565b60006020828403121561179a57600080fd5b81516112e8816114c8565b6000602082840312156117b757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156117ff57600080fd5b815180151581146112e857600080fd5b6000825160005b818110156118305760208186018101518583015201611816565b50600092019182525091905056",
              "fullyQualifiedName": "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ERC4626Transformer.sol:ERC4626Transformer"
            }
          ],
          "index": "1",
          "decodedAction": {
            "referenceName": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
            "functionName": "call",
            "variables": [
              "Calldata is too large to display."
            ],
            "address": ""
          },
          "gas": "1560799",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
          "txData": "0xc7aeef0f42616c6d792d455243343632365472616e73666f726d65722d5631000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000185e608060405234801561001057600080fd5b5061183e806100206000396000f3fe6080604052600436106100b15760003560e01c8063451fcf4c116100695780634f899c481161004e5780634f899c48146101ac578063a1e8b1d5146101cc578063e7147294146101ec57600080fd5b8063451fcf4c1461016c5780634e89a7111461017f57600080fd5b80632426c6821161009a5780632426c682146101185780632d5403001461012b5780633142085c1461015957600080fd5b806301ffc9a7146100b65780630a8355b6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004611486565b6101ff565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b6101063660046114ea565b610298565b6040516100e29190611516565b61010b6101263660046115c7565b6103b6565b34801561013757600080fd5b5061014b610146366004611642565b6105bd565b6040519081526020016100e2565b61010b6101673660046115c7565b610699565b61014b61017a366004611697565b6109b8565b34801561018b57600080fd5b5061019f61019a366004611711565b610bb0565b6040516100e2919061172e565b3480156101b857600080fd5b5061014b6101c7366004611642565b610c29565b3480156101d857600080fd5b5061010b6101e73660046114ea565b610c94565b61014b6101fa366004611697565b610d60565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3050af3c00000000000000000000000000000000000000000000000000000000148061029257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b9190611788565b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff86169063b3d7f6b9906024015b602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a191906117a5565b90506103ad8282610ed9565b95945050505050565b606081804211156103f3576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001841461042d576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008873ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190611788565b6040517fba087652000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff89811660248301523360448301529192506000918b169063ba087652906064016020604051808303816000875af115801561051f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054391906117a5565b90508087876000818110610559576105596117be565b9050604002016020013511156105a3576040517fe9a3651e000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b6105ad8282610ed9565b935050505b509695505050505050565b6000600182146105f9576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663ef8b30f784846000818110610628576106286117be565b905060400201602001356040518263ffffffff1660e01b815260040161065091815260200190565b602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069191906117a5565b949350505050565b606081804211156106d6576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018414610710576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810188905260009073ffffffffffffffffffffffffffffffffffffffff8a169063b3d7f6b990602401602060405180830381865afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a291906117a5565b905060008973ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190611788565b905061083973ffffffffffffffffffffffffffffffffffffffff8216333085610f68565b61085a73ffffffffffffffffffffffffffffffffffffffff82168b84610ff7565b6040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8981166024830152600091908c16906394bf804d906044016020604051808303816000875af11580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f791906117a5565b9050808888600081811061090d5761090d6117be565b905060400201602001351015610952576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810182905260240161059a565b8281101561099f5761097d73ffffffffffffffffffffffffffffffffffffffff8316338386036110cf565b61099f73ffffffffffffffffffffffffffffffffffffffff83168c6000610ff7565b6109a98282610ed9565b9b9a5050505050505050505050565b600081804211156109f5576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610a2f576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087876000818110610a4457610a446117be565b610a5a9260206040909202019081019150611711565b9050600088886000818110610a7157610a716117be565b905060400201602001359050610aaa3330838573ffffffffffffffffffffffffffffffffffffffff16610f68909392919063ffffffff16565b610acb73ffffffffffffffffffffffffffffffffffffffff83168b83610ff7565b6040517f6e553f650000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88811660248301528b1690636e553f65906044016020604051808303816000875af1158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906117a5565b935083861115610ba3576040517fe9a3651e0000000000000000000000000000000000000000000000000000000081526004810185905260240161059a565b5050509695505050505050565b60606102928273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611788565b611112565b600060018214610c65576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16630a28a47784846000818110610628576106286117be565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d079190611788565b6040517f4cdad5060000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff861690634cdad50690602401610360565b60008180421115610d9d576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610dd7576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff1663b460af9488886000818110610e0657610e066117be565b9050604002016020013587336040518463ffffffff1660e01b8152600401610e579392919092835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b6020604051808303816000875af1158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a91906117a5565b9150818410156105b2576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810183905260240161059a565b604080516001808252818301909252606091816020015b6040805180820190915260008082526020820152815260200190600190039081610ef057905050905060405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381525081600081518110610f5757610f576117be565b602002602001018190525092915050565b60405173ffffffffffffffffffffffffffffffffffffffff8481166024830152838116604483015260648201839052610ff19186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611187565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611083848261121d565b610ff15760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526110c591869182169063095ea7b390606401610faa565b610ff18482611187565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261110d91859182169063a9059cbb90606401610faa565b505050565b604080516001808252818301909252606091602080830190803683370190505090508181600081518110611148576111486117be565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050919050565b60006111a973ffffffffffffffffffffffffffffffffffffffff8416836112da565b905080516000141580156111ce5750808060200190518101906111cc91906117ed565b155b1561110d576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161059a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611247919061180f565b6000604051808303816000865af19150503d8060008114611284576040519150601f19603f3d011682016040523d82523d6000602084013e611289565b606091505b50915091508180156112b35750805115806112b35750808060200190518101906112b391906117ed565b80156103ad57505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606112e8838360006112ef565b9392505050565b60608147101561132d576040517fcd78605900000000000000000000000000000000000000000000000000000000815230600482015260240161059a565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051611356919061180f565b60006040518083038185875af1925050503d8060008114611393576040519150601f19603f3d011682016040523d82523d6000602084013e611398565b606091505b50915091506113a88683836113b2565b9695505050505050565b6060826113c7576113c282611441565b6112e8565b81511580156113eb575073ffffffffffffffffffffffffffffffffffffffff84163b155b1561143a576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161059a565b50806112e8565b8051156114515780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006020828403121561149857600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112e857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461148357600080fd5b600080604083850312156114fd57600080fd5b8235611508816114c8565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561156e578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611533565b5091979650505050505050565b60008083601f84011261158d57600080fd5b50813567ffffffffffffffff8111156115a557600080fd5b6020830191508360208260061b85010111156115c057600080fd5b9250929050565b60008060008060008060a087890312156115e057600080fd5b86356115eb816114c8565b9550602087013594506040870135611602816114c8565b9350606087013567ffffffffffffffff81111561161e57600080fd5b61162a89828a0161157b565b979a9699509497949695608090950135949350505050565b60008060006040848603121561165757600080fd5b8335611662816114c8565b9250602084013567ffffffffffffffff81111561167e57600080fd5b61168a8682870161157b565b9497909650939450505050565b60008060008060008060a087890312156116b057600080fd5b86356116bb816114c8565b9550602087013567ffffffffffffffff8111156116d757600080fd5b6116e389828a0161157b565b90965094505060408701356116f7816114c8565b959894975092956060810135946080909101359350915050565b60006020828403121561172357600080fd5b81356112e8816114c8565b6020808252825182820181905260009190848201906040850190845b8181101561177c57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161174a565b50909695505050505050565b60006020828403121561179a57600080fd5b81516112e8816114c8565b6000602082840312156117b757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156117ff57600080fd5b815180151581146112e857600080fd5b6000825160005b818110156118305760208186018101518583015201611816565b506000920191825250919050560000"
        },
        {
          "actionType": 2,
          "contracts": [
            {
              "address": "0x6C615481E96806edBd9987B6E522A4Ea85d13659",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol:DCAHubCompanion"
            }
          ],
          "index": "2",
          "decodedAction": {
            "referenceName": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
            "functionName": "call",
            "variables": [
              "Calldata is too large to display."
            ],
            "address": ""
          },
          "gas": "5077769",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
          "txData": ""
        },
        {
          "actionType": 2,
          "contracts": [
            {
              "address": "0x0f218847790b70da742b0bD701A86F09c5F73C63",
              "initCodeWithArgs": "0x608060405234801561001057600080fd5b50611ab5806100206000396000f3fe6080604052600436106100345760003560e01c80635817c99e14610039578063648573701461005b578063d6347c1b146100a1575b600080fd5b34801561004557600080fd5b50610059610054366004610e6e565b6100b4565b005b34801561006757600080fd5b5061008f7f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f481565b60405190815260200160405180910390f35b6100596100af366004610f91565b61015d565b60006100c282840184611470565b90508060200151421115610102576040517fa83116fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010f8160400151610322565b61011c81606001516103ac565b8051156101325761013287878360800151610417565b61014187878360a001516106ed565b61015381608001518260a00151610840565b5050505050505050565b6040517f91d148540000000000000000000000000000000000000000000000000000000081527f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f4600482015233602482015273ffffffffffffffffffffffffffffffffffffffff8c16906391d1485490604401602060405180830381865afa1580156101ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102119190611551565b610247576040517f1171cc3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb39461e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c169063b39461e5906102af908d908d908d908d90309081908f908f908f908f908f908f9060040161166a565b6000604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103149190810190611858565b505050505050505050505050565b60005b81518110156103a857600082828151811061034257610342611982565b6020026020010151905061039f81602001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836000015173ffffffffffffffffffffffffffffffffffffffff166109549092919063ffffffff16565b50600101610325565b5050565b60005b81518110156103a85760008282815181106103cc576103cc611982565b6020026020010151905061040d81604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16610a6f9092919063ffffffff16565b50506001016103af565b805160009061042690846119b1565b67ffffffffffffffff81111561043e5761043e611098565b60405190808252806020026020018201604052801561048357816020015b604080518082019091526000808252602082015281526020019060019003908161045c5790505b50905060005b838110156105865760008585838181106104a5576104a5611982565b6104bb92602060809092020190810191506119eb565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff831680825291517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152929350916020830191906370a0823190602401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611a08565b81525083838151811061057257610572611982565b602090810291909101015250600101610489565b5060005b82518110156106af5760405180604001604052808483815181106105b0576105b0611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018483815181106105e5576105e5611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190611a08565b90528261068c86846119b1565b8151811061069c5761069c611982565b602090810291909101015260010161058a565b50806040517fac2836d80000000000000000000000000000000000000000000000000000000081526004016106e49190611a21565b60405180910390fd5b60005b8281101561083a57600084848381811061070c5761070c611982565b61072292602060809092020190810191506119eb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611a08565b905080156108305760008686858181106107d2576107d2611982565b905060800201604001359050600081111561080d5761080873ffffffffffffffffffffffffffffffffffffffff84163384610b34565b61082e565b61082e73ffffffffffffffffffffffffffffffffffffffff84168684610b34565b505b50506001016106f0565b50505050565b60005b825181101561094f57600083828151811061086057610860611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190611a08565b9050801561094657610946838286858151811061091957610919611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610b349092919063ffffffff16565b50600101610843565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526109e08482610b72565b61083a5760405173ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152610a6591869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c36565b61083a8482610c36565b606081471015610aad576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016106e4565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051610ad69190611a86565b60006040518083038185875af1925050503d8060008114610b13576040519150601f19603f3d011682016040523d82523d6000602084013e610b18565b606091505b5091509150610b28868383610ccc565b925050505b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261094f91859182169063a9059cbb90606401610a1e565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051610b9c9190611a86565b6000604051808303816000865af19150503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5091509150818015610c08575080511580610c08575080806020019051810190610c089190611551565b8015610c2b575060008573ffffffffffffffffffffffffffffffffffffffff163b115b925050505b92915050565b6000610c5873ffffffffffffffffffffffffffffffffffffffff841683610d5b565b90508051600014158015610c7d575080806020019051810190610c7b9190611551565b155b1561094f576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106e4565b606082610ce157610cdc82610d69565b610b2d565b8151158015610d05575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610d54576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016106e4565b5080610b2d565b6060610b2d83836000610a6f565b805115610d795780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114610dab57600080fd5b8035610ddb81610dae565b919050565b60008083601f840112610df257600080fd5b50813567ffffffffffffffff811115610e0a57600080fd5b6020830191508360208260051b8501011115610e2557600080fd5b9250929050565b60008083601f840112610e3e57600080fd5b50813567ffffffffffffffff811115610e5657600080fd5b602083019150836020828501011115610e2557600080fd5b60008060008060008060006080888a031215610e8957600080fd5b8735610e9481610dae565b9650602088013567ffffffffffffffff80821115610eb157600080fd5b818a0191508a601f830112610ec557600080fd5b813581811115610ed457600080fd5b8b60208260071b8501011115610ee957600080fd5b6020830198508097505060408a0135915080821115610f0757600080fd5b610f138b838c01610de0565b909650945060608a0135915080821115610f2c57600080fd5b50610f398a828b01610e2c565b989b979a50959850939692959293505050565b60008083601f840112610f5e57600080fd5b50813567ffffffffffffffff811115610f7657600080fd5b6020830191508360208260061b8501011115610e2557600080fd5b600080600080600080600080600080600060c08c8e031215610fb257600080fd5b610fbb8c610dd0565b9a5067ffffffffffffffff8060208e01351115610fd757600080fd5b610fe78e60208f01358f01610de0565b909b50995060408d0135811015610ffd57600080fd5b61100d8e60408f01358f01610f4c565b909950975060608d013581101561102357600080fd5b6110338e60608f01358f01610de0565b909750955060808d013581101561104957600080fd5b6110598e60808f01358f01610e2c565b909550935060a08d013581101561106f57600080fd5b506110808d60a08e01358e01610e2c565b81935080925050509295989b509295989b9093969950565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156110ea576110ea611098565b60405290565b6040516060810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160c0810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160e0810167ffffffffffffffff811182821017156110ea576110ea611098565b6040516080810167ffffffffffffffff811182821017156110ea576110ea611098565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156111c3576111c3611098565b604052919050565b8015158114610dab57600080fd5b8035610ddb816111cb565b600067ffffffffffffffff8211156111fe576111fe611098565b5060051b60200190565b600082601f83011261121957600080fd5b8135602061122e611229836111e4565b61117c565b82815260069290921b8401810191818101908684111561124d57600080fd5b8286015b8481101561129e576040818903121561126a5760008081fd5b6112726110c7565b813561127d81610dae565b81528185013561128c81610dae565b81860152835291830191604001611251565b509695505050505050565b6000601f83601f8401126112bc57600080fd5b823560206112cc611229836111e4565b82815260059290921b850181019181810190878411156112eb57600080fd5b8287015b848110156113fc57803567ffffffffffffffff808211156113105760008081fd5b818a01915060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08181858f0301121561134a5760008081fd5b6113526110f0565b8885013561135f81610dae565b81526040858101358a83015292850135928484111561137e5760008081fd5b83860195508e603f87011261139557600093508384fd5b898601359350848411156113ab576113ab611098565b6113ba8a848e8701160161117c565b94508385528e818588010111156113d357600092508283fd5b838187018b87013760009385018a019390935291820192909252855250509183019183016112ef565b50979650505050505050565b600082601f83011261141957600080fd5b81356020611429611229836111e4565b8083825260208201915060208460051b87010193508684111561144b57600080fd5b602086015b8481101561129e57803561146381610dae565b8352918301918301611450565b60006020828403121561148257600080fd5b813567ffffffffffffffff8082111561149a57600080fd5b9083019060c082860312156114ae57600080fd5b6114b6611113565b6114bf836111d9565b8152602083013560208201526040830135828111156114dd57600080fd5b6114e987828601611208565b60408301525060608301358281111561150157600080fd5b61150d878286016112a9565b60608301525060808301358281111561152557600080fd5b61153187828601611408565b60808301525061154360a08401610dd0565b60a082015295945050505050565b60006020828403121561156357600080fd5b8151610b2d816111cb565b803560ff81168114610ddb57600080fd5b8183526000602080850194508260005b858110156115cb5760ff806115a38461156e565b168852806115b285850161156e565b168885015250604096870196919091019060010161158f565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561160857600080fd5b8260051b80836020870137939093016020019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60e080825281018c9052600061010082018e825b8f8110156116bc576116908235610dae565b813573ffffffffffffffffffffffffffffffffffffffff1683526020928301929091019060010161167e565b505082810360208401526116d1818d8f61157f565b73ffffffffffffffffffffffffffffffffffffffff8c166040850152905073ffffffffffffffffffffffffffffffffffffffff8a166060840152828103608084015261171e81898b6115d6565b905082810360a0840152611733818789611621565b905082810360c0840152611748818587611621565b9f9e505050505050505050505050505050565b600082601f83011261176c57600080fd5b8151602061177c611229836111e4565b82815260e0928302850182019282820191908785111561179b57600080fd5b8387015b8581101561184b5781818a0312156117b75760008081fd5b6117bf611136565b81516117ca81610dae565b8152818601516117d981610dae565b8187015260408281015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301517fff000000000000000000000000000000000000000000000000000000000000008116811461183a5760008081fd5b90820152845292840192810161179f565b5090979650505050505050565b6000602080838503121561186b57600080fd5b825167ffffffffffffffff8082111561188357600080fd5b8185019150604080838803121561189957600080fd5b6118a16110c7565b8351838111156118b057600080fd5b8401601f810189136118c157600080fd5b80516118cf611229826111e4565b81815260079190911b8201870190878101908b8311156118ee57600080fd5b928801925b8284101561194c576080848d03121561190c5760008081fd5b611914611159565b845161191f81610dae565b8152848a01518a8201528685015187820152606080860151908201528252608090930192908801906118f3565b84525050508385015191508282111561196457600080fd5b6119708883860161175b565b85820152809550505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610c30577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000602082840312156119fd57600080fd5b8135610b2d81610dae565b600060208284031215611a1a57600080fd5b5051919050565b602080825282518282018190526000919060409081850190868401855b82811015611a79578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611a3e565b5091979650505050505050565b6000825160005b81811015611aa75760208186018101518583015201611a8d565b50600092019182525091905056",
              "fullyQualifiedName": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/ThirdPartyDCAHubSwapper.sol:ThirdPartyDCAHubSwapper"
            }
          ],
          "index": "3",
          "decodedAction": {
            "referenceName": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
            "functionName": "call",
            "variables": [
              "Calldata is too large to display."
            ],
            "address": ""
          },
          "gas": "1683999",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
          "txData": "0xc7aeef0f42616c6d792d335061727479537761707065722d563100000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ad5608060405234801561001057600080fd5b50611ab5806100206000396000f3fe6080604052600436106100345760003560e01c80635817c99e14610039578063648573701461005b578063d6347c1b146100a1575b600080fd5b34801561004557600080fd5b50610059610054366004610e6e565b6100b4565b005b34801561006757600080fd5b5061008f7f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f481565b60405190815260200160405180910390f35b6100596100af366004610f91565b61015d565b60006100c282840184611470565b90508060200151421115610102576040517fa83116fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010f8160400151610322565b61011c81606001516103ac565b8051156101325761013287878360800151610417565b61014187878360a001516106ed565b61015381608001518260a00151610840565b5050505050505050565b6040517f91d148540000000000000000000000000000000000000000000000000000000081527f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f4600482015233602482015273ffffffffffffffffffffffffffffffffffffffff8c16906391d1485490604401602060405180830381865afa1580156101ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102119190611551565b610247576040517f1171cc3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb39461e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c169063b39461e5906102af908d908d908d908d90309081908f908f908f908f908f908f9060040161166a565b6000604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103149190810190611858565b505050505050505050505050565b60005b81518110156103a857600082828151811061034257610342611982565b6020026020010151905061039f81602001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836000015173ffffffffffffffffffffffffffffffffffffffff166109549092919063ffffffff16565b50600101610325565b5050565b60005b81518110156103a85760008282815181106103cc576103cc611982565b6020026020010151905061040d81604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16610a6f9092919063ffffffff16565b50506001016103af565b805160009061042690846119b1565b67ffffffffffffffff81111561043e5761043e611098565b60405190808252806020026020018201604052801561048357816020015b604080518082019091526000808252602082015281526020019060019003908161045c5790505b50905060005b838110156105865760008585838181106104a5576104a5611982565b6104bb92602060809092020190810191506119eb565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff831680825291517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152929350916020830191906370a0823190602401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611a08565b81525083838151811061057257610572611982565b602090810291909101015250600101610489565b5060005b82518110156106af5760405180604001604052808483815181106105b0576105b0611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018483815181106105e5576105e5611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190611a08565b90528261068c86846119b1565b8151811061069c5761069c611982565b602090810291909101015260010161058a565b50806040517fac2836d80000000000000000000000000000000000000000000000000000000081526004016106e49190611a21565b60405180910390fd5b60005b8281101561083a57600084848381811061070c5761070c611982565b61072292602060809092020190810191506119eb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611a08565b905080156108305760008686858181106107d2576107d2611982565b905060800201604001359050600081111561080d5761080873ffffffffffffffffffffffffffffffffffffffff84163384610b34565b61082e565b61082e73ffffffffffffffffffffffffffffffffffffffff84168684610b34565b505b50506001016106f0565b50505050565b60005b825181101561094f57600083828151811061086057610860611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190611a08565b9050801561094657610946838286858151811061091957610919611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610b349092919063ffffffff16565b50600101610843565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526109e08482610b72565b61083a5760405173ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152610a6591869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c36565b61083a8482610c36565b606081471015610aad576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016106e4565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051610ad69190611a86565b60006040518083038185875af1925050503d8060008114610b13576040519150601f19603f3d011682016040523d82523d6000602084013e610b18565b606091505b5091509150610b28868383610ccc565b925050505b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261094f91859182169063a9059cbb90606401610a1e565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051610b9c9190611a86565b6000604051808303816000865af19150503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5091509150818015610c08575080511580610c08575080806020019051810190610c089190611551565b8015610c2b575060008573ffffffffffffffffffffffffffffffffffffffff163b115b925050505b92915050565b6000610c5873ffffffffffffffffffffffffffffffffffffffff841683610d5b565b90508051600014158015610c7d575080806020019051810190610c7b9190611551565b155b1561094f576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106e4565b606082610ce157610cdc82610d69565b610b2d565b8151158015610d05575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610d54576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016106e4565b5080610b2d565b6060610b2d83836000610a6f565b805115610d795780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114610dab57600080fd5b8035610ddb81610dae565b919050565b60008083601f840112610df257600080fd5b50813567ffffffffffffffff811115610e0a57600080fd5b6020830191508360208260051b8501011115610e2557600080fd5b9250929050565b60008083601f840112610e3e57600080fd5b50813567ffffffffffffffff811115610e5657600080fd5b602083019150836020828501011115610e2557600080fd5b60008060008060008060006080888a031215610e8957600080fd5b8735610e9481610dae565b9650602088013567ffffffffffffffff80821115610eb157600080fd5b818a0191508a601f830112610ec557600080fd5b813581811115610ed457600080fd5b8b60208260071b8501011115610ee957600080fd5b6020830198508097505060408a0135915080821115610f0757600080fd5b610f138b838c01610de0565b909650945060608a0135915080821115610f2c57600080fd5b50610f398a828b01610e2c565b989b979a50959850939692959293505050565b60008083601f840112610f5e57600080fd5b50813567ffffffffffffffff811115610f7657600080fd5b6020830191508360208260061b8501011115610e2557600080fd5b600080600080600080600080600080600060c08c8e031215610fb257600080fd5b610fbb8c610dd0565b9a5067ffffffffffffffff8060208e01351115610fd757600080fd5b610fe78e60208f01358f01610de0565b909b50995060408d0135811015610ffd57600080fd5b61100d8e60408f01358f01610f4c565b909950975060608d013581101561102357600080fd5b6110338e60608f01358f01610de0565b909750955060808d013581101561104957600080fd5b6110598e60808f01358f01610e2c565b909550935060a08d013581101561106f57600080fd5b506110808d60a08e01358e01610e2c565b81935080925050509295989b509295989b9093969950565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156110ea576110ea611098565b60405290565b6040516060810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160c0810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160e0810167ffffffffffffffff811182821017156110ea576110ea611098565b6040516080810167ffffffffffffffff811182821017156110ea576110ea611098565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156111c3576111c3611098565b604052919050565b8015158114610dab57600080fd5b8035610ddb816111cb565b600067ffffffffffffffff8211156111fe576111fe611098565b5060051b60200190565b600082601f83011261121957600080fd5b8135602061122e611229836111e4565b61117c565b82815260069290921b8401810191818101908684111561124d57600080fd5b8286015b8481101561129e576040818903121561126a5760008081fd5b6112726110c7565b813561127d81610dae565b81528185013561128c81610dae565b81860152835291830191604001611251565b509695505050505050565b6000601f83601f8401126112bc57600080fd5b823560206112cc611229836111e4565b82815260059290921b850181019181810190878411156112eb57600080fd5b8287015b848110156113fc57803567ffffffffffffffff808211156113105760008081fd5b818a01915060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08181858f0301121561134a5760008081fd5b6113526110f0565b8885013561135f81610dae565b81526040858101358a83015292850135928484111561137e5760008081fd5b83860195508e603f87011261139557600093508384fd5b898601359350848411156113ab576113ab611098565b6113ba8a848e8701160161117c565b94508385528e818588010111156113d357600092508283fd5b838187018b87013760009385018a019390935291820192909252855250509183019183016112ef565b50979650505050505050565b600082601f83011261141957600080fd5b81356020611429611229836111e4565b8083825260208201915060208460051b87010193508684111561144b57600080fd5b602086015b8481101561129e57803561146381610dae565b8352918301918301611450565b60006020828403121561148257600080fd5b813567ffffffffffffffff8082111561149a57600080fd5b9083019060c082860312156114ae57600080fd5b6114b6611113565b6114bf836111d9565b8152602083013560208201526040830135828111156114dd57600080fd5b6114e987828601611208565b60408301525060608301358281111561150157600080fd5b61150d878286016112a9565b60608301525060808301358281111561152557600080fd5b61153187828601611408565b60808301525061154360a08401610dd0565b60a082015295945050505050565b60006020828403121561156357600080fd5b8151610b2d816111cb565b803560ff81168114610ddb57600080fd5b8183526000602080850194508260005b858110156115cb5760ff806115a38461156e565b168852806115b285850161156e565b168885015250604096870196919091019060010161158f565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561160857600080fd5b8260051b80836020870137939093016020019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60e080825281018c9052600061010082018e825b8f8110156116bc576116908235610dae565b813573ffffffffffffffffffffffffffffffffffffffff1683526020928301929091019060010161167e565b505082810360208401526116d1818d8f61157f565b73ffffffffffffffffffffffffffffffffffffffff8c166040850152905073ffffffffffffffffffffffffffffffffffffffff8a166060840152828103608084015261171e81898b6115d6565b905082810360a0840152611733818789611621565b905082810360c0840152611748818587611621565b9f9e505050505050505050505050505050565b600082601f83011261176c57600080fd5b8151602061177c611229836111e4565b82815260e0928302850182019282820191908785111561179b57600080fd5b8387015b8581101561184b5781818a0312156117b75760008081fd5b6117bf611136565b81516117ca81610dae565b8152818601516117d981610dae565b8187015260408281015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301517fff000000000000000000000000000000000000000000000000000000000000008116811461183a5760008081fd5b90820152845292840192810161179f565b5090979650505050505050565b6000602080838503121561186b57600080fd5b825167ffffffffffffffff8082111561188357600080fd5b8185019150604080838803121561189957600080fd5b6118a16110c7565b8351838111156118b057600080fd5b8401601f810189136118c157600080fd5b80516118cf611229826111e4565b81815260079190911b8201870190878101908b8311156118ee57600080fd5b928801925b8284101561194c576080848d03121561190c5760008081fd5b611914611159565b845161191f81610dae565b8152848a01518a8201528685015187820152606080860151908201528252608090930192908801906118f3565b84525050508385015191508282111561196457600080fd5b6119708883860161175b565b85820152809550505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610c30577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000602082840312156119fd57600080fd5b8135610b2d81610dae565b600060208284031215611a1a57600080fd5b5051919050565b602080825282518282018190526000919060409081850190868401855b82811015611a79578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611a3e565b5091979650505050505050565b6000825160005b81811015611aa75760208186018101518583015201611a8d565b506000920191825250919050560000000000000000000000"
        },
        {
          "actionType": 2,
          "contracts": [
            {
              "address": "0xDB8EF5BDBaf2a3A22DBbBB5986Df524926bdB07e",
              "initCodeWithArgs": "0x60806040523480156200001157600080fd5b5060405162002a6938038062002a69833981016040819052620000349162000247565b6001600160a01b0382166200005c5760405163d92e233d60e01b815260040160405180910390fd5b6200007760008051602062002a29833981519152806200011a565b620000a160008051602062002a4983398151915260008051602062002a298339815191526200011a565b620000bc60008051602062002a298339815191528362000165565b5060005b815181101562000111576200010760008051602062002a49833981519152838381518110620000f357620000f362000330565b60200260200101516200016560201b60201c565b50600101620000c0565b50505062000346565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166200020a576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620001c13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200020e565b5060005b92915050565b80516001600160a01b03811681146200022c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200025b57600080fd5b620002668362000214565b602084810151919350906001600160401b03808211156200028657600080fd5b818601915086601f8301126200029b57600080fd5b815181811115620002b057620002b062000231565b8060051b604051601f19603f83011681018181108582111715620002d857620002d862000231565b604052918252848201925083810185019189831115620002f757600080fd5b938501935b828510156200032057620003108562000214565b84529385019392850192620002fc565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6126d380620003566000396000f3fe6080604052600436106101485760003560e01c80636c06005a116100c0578063bcbef20611610074578063e9c0407111610059578063e9c040711461045c578063fb0cb6a51461047c578063fb5235d8146104a957600080fd5b8063bcbef20614610429578063d547741f1461043c57600080fd5b806391d14854116100a557806391d1485414610396578063a217fddf146103e7578063ac9650d8146103fc57600080fd5b80636c06005a1461034257806375b238fc1461036257600080fd5b806336568abe116101175780634460bdd6116100fc5780634460bdd6146102a157806351f63ebc146102d5578063585cc6a5146102f557600080fd5b806336568abe146102615780633ed242b41461028157600080fd5b806301ffc9a714610154578063248a9ca3146101895780632f2ff15d146101c757806336351365146101e957600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f366004611b32565b6104bc565b60405190151581526020015b60405180910390f35b34801561019557600080fd5b506101b96101a4366004611b74565b60009081526020819052604090206001015490565b604051908152602001610180565b3480156101d357600080fd5b506101e76101e2366004611baf565b6104dc565b005b3480156101f557600080fd5b506101b9610204366004611bdf565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b34801561026d57600080fd5b506101e761027c366004611baf565b610507565b61029461028f366004611c59565b610565565b6040516101809190611d20565b3480156102ad57600080fd5b506101b97f7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c4768981565b3480156102e157600080fd5b506101e76102f0366004611de7565b61063d565b34801561030157600080fd5b5061031d73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610180565b34801561034e57600080fd5b506101e761035d366004611e3e565b6106fd565b34801561036e57600080fd5b506101b97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156103a257600080fd5b506101746103b1366004611baf565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156103f357600080fd5b506101b9600081565b34801561040857600080fd5b5061041c610417366004611c59565b6107b6565b6040516101809190611ea6565b6101e7610437366004611f1b565b61089e565b34801561044857600080fd5b506101e7610457366004611baf565b61097a565b34801561046857600080fd5b506101e7610477366004611c59565b61099f565b34801561048857600080fd5b5061049c610497366004611f8d565b6109d3565b6040516101809190611fe2565b6101e76104b7366004612051565b610c00565b60006104c782610dc7565b806104d657506104d682610e5f565b92915050565b6000828152602081905260409020600101546104f781610ef6565b6105018383610f03565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610556576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105608282610fff565b505050565b60608167ffffffffffffffff8111156105805761058061208c565b6040519080825280602002602001820160405280156105d757816020015b6105c4604051806060016040528060001515815260200160608152602001600081525090565b81526020019060019003908161059e5790505b50905060005b82811015610636576106118484838181106105fa576105fa6120bb565b905060200281019061060c91906120ea565b6110ba565b828281518110610623576106236120bb565b60209081029190910101526001016105dd565b5092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561066781610ef6565b60005b838110156106f6576000858583818110610686576106866120bb565b90506040020180360381019061069c91906121cc565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200151036106da5780516106d59085611250565b6106ed565b6106ed8160000151826020015186611327565b5060010161066a565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561072781610ef6565b6040517f560c649900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063560c64999061077d90879087908790600401612206565b600060405180830381600087803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b505050505050505050565b6040805160008152602081019091526060908267ffffffffffffffff8111156107e1576107e161208c565b60405190808252806020026020018201604052801561081457816020015b60608152602001906001900390816107ff5790505b50915060005b838110156108965761087130868684818110610838576108386120bb565b905060200281019061084a91906120ea565b8560405160200161085d939291906122c5565b6040516020818303038152906040526113c3565b838281518110610883576108836120bb565b602090810291909101015260010161081a565b505092915050565b60005a90506000803073ffffffffffffffffffffffffffffffffffffffff1685856040516108cd9291906122ec565b600060405180830381855af49150503d8060008114610908576040519150601f19603f3d011682016040523d82523d6000602084013e61090d565b606091505b509150915060005a61091f908561228b565b905060405180606001604052808415158152602001838152602001828152506040517f493703af00000000000000000000000000000000000000000000000000000000815260040161097191906122fc565b60405180910390fd5b60008281526020819052604090206001015461099581610ef6565b6105018383610fff565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756109c981610ef6565b610560838361143d565b60608167ffffffffffffffff8111156109ee576109ee61208c565b604051908082528060200260200182016040528015610a5957816020015b610a466040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b815260200190600190039081610a0c5790505b50905060005b82811015610bf8576000848483818110610a7b57610a7b6120bb565b9050602002016020810190610a90919061230f565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff80841680835292517fc67e32e900000000000000000000000000000000000000000000000000000000815260048101939093529293509160208301919089169063c67e32e990602401602060405180830381865afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b39919061232c565b81526040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209091019073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf919061232c565b815250838381518110610be457610be46120bb565b602090810291909101015250600101610a5f565b509392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610c2a81610ef6565b60005b610c378380612345565b9050811015610c8f576000610c4c8480612345565b83818110610c5c57610c5c6120bb565b905060400201803603810190610c7291906123ad565b9050610c86816000015182602001516114e8565b50600101610c2d565b5060005b610ca060408401846123ee565b9050811015610d5b576000610cb86060850185612345565b83818110610cc857610cc86120bb565b905060400201803603810190610cde9190612456565b9050610d52610cf060208601866123ee565b835160ff16818110610d0457610d046120bb565b9050602002016020810190610d19919061230f565b610d2660408701876123ee565b85818110610d3657610d366120bb565b9050602002810190610d4891906120ea565b846020015161152d565b50600101610c93565b5060005b610d6c6080840184612345565b9050811015610560576000610d846080850185612345565b83818110610d9457610d946120bb565b905060400201803603810190610daa91906123ad565b9050610dbe81600001518260200151611250565b50600101610d5f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3ed242b40000000000000000000000000000000000000000000000000000000014806104d657507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a7000000000000000000000000000000000000000000000000000000001492915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104d657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146104d6565b610f008133611585565b50565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610f953390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016104d6565b5060006104d6565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff1615610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016104d6565b6110e0604051806060016040528060001515815260200160608152602001600081525090565b6000803073ffffffffffffffffffffffffffffffffffffffff1663bcbef20660e01b8686604051602401611115929190612481565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161118091906124b0565b600060405180830381855af49150503d80600081146111bb576040519150601f19603f3d011682016040523d82523d6000602084013e6111c0565b606091505b5091509150811561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5754463f2053686f756c642068617665206661696c65642100000000000000006044820152606401610971565b6004810190508080602001905181019061124791906124e1565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611316576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611311919061232c565b611318565b475b90508015610560576105608382845b73ffffffffffffffffffffffffffffffffffffffff81166113455750335b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8416016113a25761056073ffffffffffffffffffffffffffffffffffffffff82168361160b565b61056073ffffffffffffffffffffffffffffffffffffffff841682846116e1565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113ed91906124b0565b600060405180830381855af49150503d8060008114611428576040519150601f19603f3d011682016040523d82523d6000602084013e61142d565b606091505b5091509150611247858383611762565b60005b8181101561056057600083838381811061145c5761145c6120bb565b905060200281019061146e91906125b5565b611477906125e9565b905060005b8160200151518110156114de576114d682600001516000846020015184815181106114a9576114a96120bb565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166117f49092919063ffffffff16565b60010161147c565b5050600101611440565b61152973ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6117f4565b5050565b6106f683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505073ffffffffffffffffffffffffffffffffffffffff8716919050836118cc565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611529576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610971565b80471015611647576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146116a1576040519150601f19603f3d011682016040523d82523d6000602084013e6116a6565b606091505b5050905080610560576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261056091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061198f565b6060826117775761177282611a25565b6117ed565b815115801561179b575073ffffffffffffffffffffffffffffffffffffffff84163b155b156117ea576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610971565b50805b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526118808482611a67565b6105015760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526118c291869182169063095ea7b39060640161171b565b610501848261198f565b60608147101561190a576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161193391906124b0565b60006040518083038185875af1925050503d8060008114611970576040519150601f19603f3d011682016040523d82523d6000602084013e611975565b606091505b5091509150611985868383611762565b9695505050505050565b60006119b173ffffffffffffffffffffffffffffffffffffffff841683611b24565b905080516000141580156119d65750808060200190518101906119d491906126b8565b155b15610560576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610971565b805115611a355780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611a9191906124b0565b6000604051808303816000865af19150503d8060008114611ace576040519150601f19603f3d011682016040523d82523d6000602084013e611ad3565b606091505b5091509150818015611afd575080511580611afd575080806020019051810190611afd91906126b8565b801561124757505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606117ed838360006118cc565b600060208284031215611b4457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146117ed57600080fd5b600060208284031215611b8657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f0057600080fd5b60008060408385031215611bc257600080fd5b823591506020830135611bd481611b8d565b809150509250929050565b60008060408385031215611bf257600080fd5b8235611bfd81611b8d565b91506020830135611bd481611b8d565b60008083601f840112611c1f57600080fd5b50813567ffffffffffffffff811115611c3757600080fd5b6020830191508360208260051b8501011115611c5257600080fd5b9250929050565b60008060208385031215611c6c57600080fd5b823567ffffffffffffffff811115611c8357600080fd5b611c8f85828601611c0d565b90969095509350505050565b60005b83811015611cb6578181015183820152602001611c9e565b50506000910152565b60008151808452611cd7816020860160208601611c9b565b601f01601f19169290920160200192915050565b8051151582526000602082015160606020850152611d0c6060850182611cbf565b604093840151949093019390935250919050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611d83858351611ceb565b94509285019290850190600101611d49565b5092979650505050505050565b60008083601f840112611db457600080fd5b50813567ffffffffffffffff811115611dcc57600080fd5b6020830191508360208260061b8501011115611c5257600080fd5b600080600060408486031215611dfc57600080fd5b833567ffffffffffffffff811115611e1357600080fd5b611e1f86828701611da2565b9094509250506020840135611e3381611b8d565b809150509250925092565b60008060008060608587031215611e5457600080fd5b8435611e5f81611b8d565b9350602085013567ffffffffffffffff811115611e7b57600080fd5b611e8787828801611da2565b9094509250506040850135611e9b81611b8d565b939692955090935050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611f09858351611cbf565b94509285019290850190600101611ecf565b60008060208385031215611f2e57600080fd5b823567ffffffffffffffff80821115611f4657600080fd5b818501915085601f830112611f5a57600080fd5b813581811115611f6957600080fd5b866020828501011115611f7b57600080fd5b60209290920196919550909350505050565b600080600060408486031215611fa257600080fd5b8335611fad81611b8d565b9250602084013567ffffffffffffffff811115611fc957600080fd5b611fd586828701611c0d565b9497909650939450505050565b602080825282518282018190526000919060409081850190868401855b82811015612044578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528501518585015260609093019290850190600101611fff565b5091979650505050505050565b60006020828403121561206357600080fd5b813567ffffffffffffffff81111561207a57600080fd5b820160a081850312156117ed57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261211f57600080fd5b83018035915067ffffffffffffffff82111561213a57600080fd5b602001915036819003821315611c5257600080fd5b6040805190810167ffffffffffffffff811182821017156121725761217261208c565b60405290565b6040516060810167ffffffffffffffff811182821017156121725761217261208c565b604051601f8201601f1916810167ffffffffffffffff811182821017156121c4576121c461208c565b604052919050565b6000604082840312156121de57600080fd5b6121e661214f565b82356121f181611b8d565b81526020928301359281019290925250919050565b60408082528181018490526000908560608401835b8781101561226057823561222e81611b8d565b73ffffffffffffffffffffffffffffffffffffffff16825260208381013590830152918301919083019060010161221b565b5080935050505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b818103818111156104d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8284823760008382016000815283516122e2818360208801611c9b565b0195945050505050565b8183823760009101908152919050565b6020815260006117ed6020830184611ceb565b60006020828403121561232157600080fd5b81356117ed81611b8d565b60006020828403121561233e57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261237a57600080fd5b83018035915067ffffffffffffffff82111561239557600080fd5b6020019150600681901b3603821315611c5257600080fd5b6000604082840312156123bf57600080fd5b6123c761214f565b82356123d281611b8d565b815260208301356123e281611b8d565b60208201529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261242357600080fd5b83018035915067ffffffffffffffff82111561243e57600080fd5b6020019150600581901b3603821315611c5257600080fd5b60006040828403121561246857600080fd5b61247061214f565b823560ff811681146121f157600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600082516124c2818460208701611c9b565b9190910192915050565b805180151581146124dc57600080fd5b919050565b600060208083850312156124f457600080fd5b825167ffffffffffffffff8082111561250c57600080fd5b908401906060828703121561252057600080fd5b612528612178565b612531836124cc565b8152838301518281111561254457600080fd5b8301601f8101881361255557600080fd5b8051838111156125675761256761208c565b61257986601f19601f8401160161219b565b9350808452888682840101111561258f57600080fd5b61259e81878601888501611c9b565b505092830152604090810151908201529392505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126124c257600080fd5b6000604082360312156125fb57600080fd5b61260361214f565b823561260e81611b8d565b815260208381013567ffffffffffffffff8082111561262c57600080fd5b9085019036601f83011261263f57600080fd5b8135818111156126515761265161208c565b8060051b915061266284830161219b565b818152918301840191848101903684111561267c57600080fd5b938501935b838510156126a6578435925061269683611b8d565b8282529385019390850190612681565b94860194909452509295945050505050565b6000602082840312156126ca57600080fd5b6117ed826124cc567613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775000000000000000000000000fd7598b46ac9e7b9201b06ff014f22085e155b6000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fd7598b46ac9e7b9201b06ff014f22085e155b60",
              "fullyQualifiedName": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol:DCAFeeManager"
            }
          ],
          "index": "4",
          "decodedAction": {
            "referenceName": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
            "functionName": "call",
            "variables": [
              "Calldata is too large to display."
            ],
            "address": ""
          },
          "gas": "2490698",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
          "txData": "0xc7aeef0f42616c6d792d4443414665654d616e616765722d563100000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ae960806040523480156200001157600080fd5b5060405162002a6938038062002a69833981016040819052620000349162000247565b6001600160a01b0382166200005c5760405163d92e233d60e01b815260040160405180910390fd5b6200007760008051602062002a29833981519152806200011a565b620000a160008051602062002a4983398151915260008051602062002a298339815191526200011a565b620000bc60008051602062002a298339815191528362000165565b5060005b815181101562000111576200010760008051602062002a49833981519152838381518110620000f357620000f362000330565b60200260200101516200016560201b60201c565b50600101620000c0565b50505062000346565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166200020a576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620001c13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200020e565b5060005b92915050565b80516001600160a01b03811681146200022c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200025b57600080fd5b620002668362000214565b602084810151919350906001600160401b03808211156200028657600080fd5b818601915086601f8301126200029b57600080fd5b815181811115620002b057620002b062000231565b8060051b604051601f19603f83011681018181108582111715620002d857620002d862000231565b604052918252848201925083810185019189831115620002f757600080fd5b938501935b828510156200032057620003108562000214565b84529385019392850192620002fc565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6126d380620003566000396000f3fe6080604052600436106101485760003560e01c80636c06005a116100c0578063bcbef20611610074578063e9c0407111610059578063e9c040711461045c578063fb0cb6a51461047c578063fb5235d8146104a957600080fd5b8063bcbef20614610429578063d547741f1461043c57600080fd5b806391d14854116100a557806391d1485414610396578063a217fddf146103e7578063ac9650d8146103fc57600080fd5b80636c06005a1461034257806375b238fc1461036257600080fd5b806336568abe116101175780634460bdd6116100fc5780634460bdd6146102a157806351f63ebc146102d5578063585cc6a5146102f557600080fd5b806336568abe146102615780633ed242b41461028157600080fd5b806301ffc9a714610154578063248a9ca3146101895780632f2ff15d146101c757806336351365146101e957600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f366004611b32565b6104bc565b60405190151581526020015b60405180910390f35b34801561019557600080fd5b506101b96101a4366004611b74565b60009081526020819052604090206001015490565b604051908152602001610180565b3480156101d357600080fd5b506101e76101e2366004611baf565b6104dc565b005b3480156101f557600080fd5b506101b9610204366004611bdf565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b34801561026d57600080fd5b506101e761027c366004611baf565b610507565b61029461028f366004611c59565b610565565b6040516101809190611d20565b3480156102ad57600080fd5b506101b97f7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c4768981565b3480156102e157600080fd5b506101e76102f0366004611de7565b61063d565b34801561030157600080fd5b5061031d73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610180565b34801561034e57600080fd5b506101e761035d366004611e3e565b6106fd565b34801561036e57600080fd5b506101b97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156103a257600080fd5b506101746103b1366004611baf565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156103f357600080fd5b506101b9600081565b34801561040857600080fd5b5061041c610417366004611c59565b6107b6565b6040516101809190611ea6565b6101e7610437366004611f1b565b61089e565b34801561044857600080fd5b506101e7610457366004611baf565b61097a565b34801561046857600080fd5b506101e7610477366004611c59565b61099f565b34801561048857600080fd5b5061049c610497366004611f8d565b6109d3565b6040516101809190611fe2565b6101e76104b7366004612051565b610c00565b60006104c782610dc7565b806104d657506104d682610e5f565b92915050565b6000828152602081905260409020600101546104f781610ef6565b6105018383610f03565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610556576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105608282610fff565b505050565b60608167ffffffffffffffff8111156105805761058061208c565b6040519080825280602002602001820160405280156105d757816020015b6105c4604051806060016040528060001515815260200160608152602001600081525090565b81526020019060019003908161059e5790505b50905060005b82811015610636576106118484838181106105fa576105fa6120bb565b905060200281019061060c91906120ea565b6110ba565b828281518110610623576106236120bb565b60209081029190910101526001016105dd565b5092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561066781610ef6565b60005b838110156106f6576000858583818110610686576106866120bb565b90506040020180360381019061069c91906121cc565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200151036106da5780516106d59085611250565b6106ed565b6106ed8160000151826020015186611327565b5060010161066a565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561072781610ef6565b6040517f560c649900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063560c64999061077d90879087908790600401612206565b600060405180830381600087803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b505050505050505050565b6040805160008152602081019091526060908267ffffffffffffffff8111156107e1576107e161208c565b60405190808252806020026020018201604052801561081457816020015b60608152602001906001900390816107ff5790505b50915060005b838110156108965761087130868684818110610838576108386120bb565b905060200281019061084a91906120ea565b8560405160200161085d939291906122c5565b6040516020818303038152906040526113c3565b838281518110610883576108836120bb565b602090810291909101015260010161081a565b505092915050565b60005a90506000803073ffffffffffffffffffffffffffffffffffffffff1685856040516108cd9291906122ec565b600060405180830381855af49150503d8060008114610908576040519150601f19603f3d011682016040523d82523d6000602084013e61090d565b606091505b509150915060005a61091f908561228b565b905060405180606001604052808415158152602001838152602001828152506040517f493703af00000000000000000000000000000000000000000000000000000000815260040161097191906122fc565b60405180910390fd5b60008281526020819052604090206001015461099581610ef6565b6105018383610fff565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756109c981610ef6565b610560838361143d565b60608167ffffffffffffffff8111156109ee576109ee61208c565b604051908082528060200260200182016040528015610a5957816020015b610a466040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b815260200190600190039081610a0c5790505b50905060005b82811015610bf8576000848483818110610a7b57610a7b6120bb565b9050602002016020810190610a90919061230f565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff80841680835292517fc67e32e900000000000000000000000000000000000000000000000000000000815260048101939093529293509160208301919089169063c67e32e990602401602060405180830381865afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b39919061232c565b81526040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209091019073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf919061232c565b815250838381518110610be457610be46120bb565b602090810291909101015250600101610a5f565b509392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610c2a81610ef6565b60005b610c378380612345565b9050811015610c8f576000610c4c8480612345565b83818110610c5c57610c5c6120bb565b905060400201803603810190610c7291906123ad565b9050610c86816000015182602001516114e8565b50600101610c2d565b5060005b610ca060408401846123ee565b9050811015610d5b576000610cb86060850185612345565b83818110610cc857610cc86120bb565b905060400201803603810190610cde9190612456565b9050610d52610cf060208601866123ee565b835160ff16818110610d0457610d046120bb565b9050602002016020810190610d19919061230f565b610d2660408701876123ee565b85818110610d3657610d366120bb565b9050602002810190610d4891906120ea565b846020015161152d565b50600101610c93565b5060005b610d6c6080840184612345565b9050811015610560576000610d846080850185612345565b83818110610d9457610d946120bb565b905060400201803603810190610daa91906123ad565b9050610dbe81600001518260200151611250565b50600101610d5f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3ed242b40000000000000000000000000000000000000000000000000000000014806104d657507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a7000000000000000000000000000000000000000000000000000000001492915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104d657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146104d6565b610f008133611585565b50565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610f953390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016104d6565b5060006104d6565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff1615610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016104d6565b6110e0604051806060016040528060001515815260200160608152602001600081525090565b6000803073ffffffffffffffffffffffffffffffffffffffff1663bcbef20660e01b8686604051602401611115929190612481565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161118091906124b0565b600060405180830381855af49150503d80600081146111bb576040519150601f19603f3d011682016040523d82523d6000602084013e6111c0565b606091505b5091509150811561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5754463f2053686f756c642068617665206661696c65642100000000000000006044820152606401610971565b6004810190508080602001905181019061124791906124e1565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611316576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611311919061232c565b611318565b475b90508015610560576105608382845b73ffffffffffffffffffffffffffffffffffffffff81166113455750335b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8416016113a25761056073ffffffffffffffffffffffffffffffffffffffff82168361160b565b61056073ffffffffffffffffffffffffffffffffffffffff841682846116e1565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113ed91906124b0565b600060405180830381855af49150503d8060008114611428576040519150601f19603f3d011682016040523d82523d6000602084013e61142d565b606091505b5091509150611247858383611762565b60005b8181101561056057600083838381811061145c5761145c6120bb565b905060200281019061146e91906125b5565b611477906125e9565b905060005b8160200151518110156114de576114d682600001516000846020015184815181106114a9576114a96120bb565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166117f49092919063ffffffff16565b60010161147c565b5050600101611440565b61152973ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6117f4565b5050565b6106f683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505073ffffffffffffffffffffffffffffffffffffffff8716919050836118cc565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611529576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610971565b80471015611647576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146116a1576040519150601f19603f3d011682016040523d82523d6000602084013e6116a6565b606091505b5050905080610560576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261056091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061198f565b6060826117775761177282611a25565b6117ed565b815115801561179b575073ffffffffffffffffffffffffffffffffffffffff84163b155b156117ea576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610971565b50805b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526118808482611a67565b6105015760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526118c291869182169063095ea7b39060640161171b565b610501848261198f565b60608147101561190a576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161193391906124b0565b60006040518083038185875af1925050503d8060008114611970576040519150601f19603f3d011682016040523d82523d6000602084013e611975565b606091505b5091509150611985868383611762565b9695505050505050565b60006119b173ffffffffffffffffffffffffffffffffffffffff841683611b24565b905080516000141580156119d65750808060200190518101906119d491906126b8565b155b15610560576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610971565b805115611a355780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611a9191906124b0565b6000604051808303816000865af19150503d8060008114611ace576040519150601f19603f3d011682016040523d82523d6000602084013e611ad3565b606091505b5091509150818015611afd575080511580611afd575080806020019051810190611afd91906126b8565b801561124757505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606117ed838360006118cc565b600060208284031215611b4457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146117ed57600080fd5b600060208284031215611b8657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f0057600080fd5b60008060408385031215611bc257600080fd5b823591506020830135611bd481611b8d565b809150509250929050565b60008060408385031215611bf257600080fd5b8235611bfd81611b8d565b91506020830135611bd481611b8d565b60008083601f840112611c1f57600080fd5b50813567ffffffffffffffff811115611c3757600080fd5b6020830191508360208260051b8501011115611c5257600080fd5b9250929050565b60008060208385031215611c6c57600080fd5b823567ffffffffffffffff811115611c8357600080fd5b611c8f85828601611c0d565b90969095509350505050565b60005b83811015611cb6578181015183820152602001611c9e565b50506000910152565b60008151808452611cd7816020860160208601611c9b565b601f01601f19169290920160200192915050565b8051151582526000602082015160606020850152611d0c6060850182611cbf565b604093840151949093019390935250919050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611d83858351611ceb565b94509285019290850190600101611d49565b5092979650505050505050565b60008083601f840112611db457600080fd5b50813567ffffffffffffffff811115611dcc57600080fd5b6020830191508360208260061b8501011115611c5257600080fd5b600080600060408486031215611dfc57600080fd5b833567ffffffffffffffff811115611e1357600080fd5b611e1f86828701611da2565b9094509250506020840135611e3381611b8d565b809150509250925092565b60008060008060608587031215611e5457600080fd5b8435611e5f81611b8d565b9350602085013567ffffffffffffffff811115611e7b57600080fd5b611e8787828801611da2565b9094509250506040850135611e9b81611b8d565b939692955090935050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611f09858351611cbf565b94509285019290850190600101611ecf565b60008060208385031215611f2e57600080fd5b823567ffffffffffffffff80821115611f4657600080fd5b818501915085601f830112611f5a57600080fd5b813581811115611f6957600080fd5b866020828501011115611f7b57600080fd5b60209290920196919550909350505050565b600080600060408486031215611fa257600080fd5b8335611fad81611b8d565b9250602084013567ffffffffffffffff811115611fc957600080fd5b611fd586828701611c0d565b9497909650939450505050565b602080825282518282018190526000919060409081850190868401855b82811015612044578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528501518585015260609093019290850190600101611fff565b5091979650505050505050565b60006020828403121561206357600080fd5b813567ffffffffffffffff81111561207a57600080fd5b820160a081850312156117ed57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261211f57600080fd5b83018035915067ffffffffffffffff82111561213a57600080fd5b602001915036819003821315611c5257600080fd5b6040805190810167ffffffffffffffff811182821017156121725761217261208c565b60405290565b6040516060810167ffffffffffffffff811182821017156121725761217261208c565b604051601f8201601f1916810167ffffffffffffffff811182821017156121c4576121c461208c565b604052919050565b6000604082840312156121de57600080fd5b6121e661214f565b82356121f181611b8d565b81526020928301359281019290925250919050565b60408082528181018490526000908560608401835b8781101561226057823561222e81611b8d565b73ffffffffffffffffffffffffffffffffffffffff16825260208381013590830152918301919083019060010161221b565b5080935050505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b818103818111156104d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8284823760008382016000815283516122e2818360208801611c9b565b0195945050505050565b8183823760009101908152919050565b6020815260006117ed6020830184611ceb565b60006020828403121561232157600080fd5b81356117ed81611b8d565b60006020828403121561233e57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261237a57600080fd5b83018035915067ffffffffffffffff82111561239557600080fd5b6020019150600681901b3603821315611c5257600080fd5b6000604082840312156123bf57600080fd5b6123c761214f565b82356123d281611b8d565b815260208301356123e281611b8d565b60208201529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261242357600080fd5b83018035915067ffffffffffffffff82111561243e57600080fd5b6020019150600581901b3603821315611c5257600080fd5b60006040828403121561246857600080fd5b61247061214f565b823560ff811681146121f157600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600082516124c2818460208701611c9b565b9190910192915050565b805180151581146124dc57600080fd5b919050565b600060208083850312156124f457600080fd5b825167ffffffffffffffff8082111561250c57600080fd5b908401906060828703121561252057600080fd5b612528612178565b612531836124cc565b8152838301518281111561254457600080fd5b8301601f8101881361255557600080fd5b8051838111156125675761256761208c565b61257986601f19601f8401160161219b565b9350808452888682840101111561258f57600080fd5b61259e81878601888501611c9b565b505092830152604090810151908201529392505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126124c257600080fd5b6000604082360312156125fb57600080fd5b61260361214f565b823561260e81611b8d565b815260208381013567ffffffffffffffff8082111561262c57600080fd5b9085019036601f83011261263f57600080fd5b8135818111156126515761265161208c565b8060051b915061266284830161219b565b818152918301840191848101903684111561267c57600080fd5b938501935b838510156126a6578435925061269683611b8d565b8282529385019390850190612681565b94860194909452509295945050505050565b6000602082840312156126ca57600080fd5b6117ed826124cc567613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775000000000000000000000000fd7598b46ac9e7b9201b06ff014f22085e155b6000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fd7598b46ac9e7b9201b06ff014f22085e155b600000000000000000000000000000000000000000000000"
        }
      ],
      "unlabeledContracts": [
        {
          "address": "0x394131Cdb7814E8857931e2b715F7b77CFb790Ab",
          "initCodeWithArgs": "0x67363d3d37363d34f03d5260086018f3"
        },
        {
          "address": "0x221C86592945612Be272cCD98172f1AeD676514E",
          "initCodeWithArgs": "0x67363d3d37363d34f03d5260086018f3"
        },
        {
          "address": "0x6EF27554F91e066A9c87AFDd45061c2fb92D84ab",
          "initCodeWithArgs": "0x67363d3d37363d34f03d5260086018f3"
        },
        {
          "address": "0x70863df2E62d56891f4690FF79BDAc9CB82b0108",
          "initCodeWithArgs": "0x67363d3d37363d34f03d5260086018f3"
        }
      ],
      "arbitraryChain": false,
      "executorAddress": "0xB5E96127D417b1B3ef8438496a38A143167209c7",
      "libraries": [],
      "gitCommit": "d54778e6761c7508c1ac1a2335d5622bc11417ee"
    },
    {
      "safeAddress": "0xBc2122028eEcd61df4B2cB2b996c00Bd856E333b",
      "moduleAddress": "0xFc74D2b66E455a30D4bA2a77821BA994e50F4c41",
      "safeInitData": "0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e77610000000000000000000000000000000000000000000000000000000000000140000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001a00e1e311009e56e3b0b9ed6f86f5ce128a1c0100000000000000000000000000000000000000000000000000000000000001448d80ff0a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000f2008f3301c9eada5642b5bb12fd047d3ebb2932e619000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000248236d0b80000000000000000000000000000000000000000000000000000000000000000018f3301c9eada5642b5bb12fd047d3ebb2932e6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002411ea37fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "nonce": "2",
      "chainId": "1284",
      "blockGasLimit": "15000000",
      "blockNumber": "5766932",
      "newConfig": {
        "projectName": "Permit2Adapter_SwapProxy_v3",
        "orgId": "cloepk9wp0001l809rbsegymp",
        "owners": [
          "0x1a00e1E311009E56e3b0B9Ed6F86f5Ce128a1C01"
        ],
        "mainnets": [],
        "testnets": [],
        "threshold": "1",
        "saltNonce": "0"
      },
      "executionMode": 2,
      "initialState": {
        "isExecuting": false,
        "isModuleDeployed": true,
        "isSafeDeployed": true
      },
      "isSystemDeployed": true,
      "actionInputs": [
        {
          "actionType": 2,
          "contracts": [
            {
              "address": "0x8F3788590DFab5711e5aF364d270981eFddFF732",
              "initCodeWithArgs": "0x608060405234801561001057600080fd5b5061183e806100206000396000f3fe6080604052600436106100b15760003560e01c8063451fcf4c116100695780634f899c481161004e5780634f899c48146101ac578063a1e8b1d5146101cc578063e7147294146101ec57600080fd5b8063451fcf4c1461016c5780634e89a7111461017f57600080fd5b80632426c6821161009a5780632426c682146101185780632d5403001461012b5780633142085c1461015957600080fd5b806301ffc9a7146100b65780630a8355b6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004611486565b6101ff565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b6101063660046114ea565b610298565b6040516100e29190611516565b61010b6101263660046115c7565b6103b6565b34801561013757600080fd5b5061014b610146366004611642565b6105bd565b6040519081526020016100e2565b61010b6101673660046115c7565b610699565b61014b61017a366004611697565b6109b8565b34801561018b57600080fd5b5061019f61019a366004611711565b610bb0565b6040516100e2919061172e565b3480156101b857600080fd5b5061014b6101c7366004611642565b610c29565b3480156101d857600080fd5b5061010b6101e73660046114ea565b610c94565b61014b6101fa366004611697565b610d60565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3050af3c00000000000000000000000000000000000000000000000000000000148061029257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b9190611788565b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff86169063b3d7f6b9906024015b602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a191906117a5565b90506103ad8282610ed9565b95945050505050565b606081804211156103f3576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001841461042d576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008873ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190611788565b6040517fba087652000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff89811660248301523360448301529192506000918b169063ba087652906064016020604051808303816000875af115801561051f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054391906117a5565b90508087876000818110610559576105596117be565b9050604002016020013511156105a3576040517fe9a3651e000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b6105ad8282610ed9565b935050505b509695505050505050565b6000600182146105f9576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663ef8b30f784846000818110610628576106286117be565b905060400201602001356040518263ffffffff1660e01b815260040161065091815260200190565b602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069191906117a5565b949350505050565b606081804211156106d6576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018414610710576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810188905260009073ffffffffffffffffffffffffffffffffffffffff8a169063b3d7f6b990602401602060405180830381865afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a291906117a5565b905060008973ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190611788565b905061083973ffffffffffffffffffffffffffffffffffffffff8216333085610f68565b61085a73ffffffffffffffffffffffffffffffffffffffff82168b84610ff7565b6040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8981166024830152600091908c16906394bf804d906044016020604051808303816000875af11580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f791906117a5565b9050808888600081811061090d5761090d6117be565b905060400201602001351015610952576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810182905260240161059a565b8281101561099f5761097d73ffffffffffffffffffffffffffffffffffffffff8316338386036110cf565b61099f73ffffffffffffffffffffffffffffffffffffffff83168c6000610ff7565b6109a98282610ed9565b9b9a5050505050505050505050565b600081804211156109f5576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610a2f576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087876000818110610a4457610a446117be565b610a5a9260206040909202019081019150611711565b9050600088886000818110610a7157610a716117be565b905060400201602001359050610aaa3330838573ffffffffffffffffffffffffffffffffffffffff16610f68909392919063ffffffff16565b610acb73ffffffffffffffffffffffffffffffffffffffff83168b83610ff7565b6040517f6e553f650000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88811660248301528b1690636e553f65906044016020604051808303816000875af1158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906117a5565b935083861115610ba3576040517fe9a3651e0000000000000000000000000000000000000000000000000000000081526004810185905260240161059a565b5050509695505050505050565b60606102928273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611788565b611112565b600060018214610c65576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16630a28a47784846000818110610628576106286117be565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d079190611788565b6040517f4cdad5060000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff861690634cdad50690602401610360565b60008180421115610d9d576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610dd7576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff1663b460af9488886000818110610e0657610e066117be565b9050604002016020013587336040518463ffffffff1660e01b8152600401610e579392919092835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b6020604051808303816000875af1158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a91906117a5565b9150818410156105b2576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810183905260240161059a565b604080516001808252818301909252606091816020015b6040805180820190915260008082526020820152815260200190600190039081610ef057905050905060405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381525081600081518110610f5757610f576117be565b602002602001018190525092915050565b60405173ffffffffffffffffffffffffffffffffffffffff8481166024830152838116604483015260648201839052610ff19186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611187565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611083848261121d565b610ff15760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526110c591869182169063095ea7b390606401610faa565b610ff18482611187565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261110d91859182169063a9059cbb90606401610faa565b505050565b604080516001808252818301909252606091602080830190803683370190505090508181600081518110611148576111486117be565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050919050565b60006111a973ffffffffffffffffffffffffffffffffffffffff8416836112da565b905080516000141580156111ce5750808060200190518101906111cc91906117ed565b155b1561110d576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161059a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611247919061180f565b6000604051808303816000865af19150503d8060008114611284576040519150601f19603f3d011682016040523d82523d6000602084013e611289565b606091505b50915091508180156112b35750805115806112b35750808060200190518101906112b391906117ed565b80156103ad57505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606112e8838360006112ef565b9392505050565b60608147101561132d576040517fcd78605900000000000000000000000000000000000000000000000000000000815230600482015260240161059a565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051611356919061180f565b60006040518083038185875af1925050503d8060008114611393576040519150601f19603f3d011682016040523d82523d6000602084013e611398565b606091505b50915091506113a88683836113b2565b9695505050505050565b6060826113c7576113c282611441565b6112e8565b81511580156113eb575073ffffffffffffffffffffffffffffffffffffffff84163b155b1561143a576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161059a565b50806112e8565b8051156114515780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006020828403121561149857600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112e857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461148357600080fd5b600080604083850312156114fd57600080fd5b8235611508816114c8565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561156e578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611533565b5091979650505050505050565b60008083601f84011261158d57600080fd5b50813567ffffffffffffffff8111156115a557600080fd5b6020830191508360208260061b85010111156115c057600080fd5b9250929050565b60008060008060008060a087890312156115e057600080fd5b86356115eb816114c8565b9550602087013594506040870135611602816114c8565b9350606087013567ffffffffffffffff81111561161e57600080fd5b61162a89828a0161157b565b979a9699509497949695608090950135949350505050565b60008060006040848603121561165757600080fd5b8335611662816114c8565b9250602084013567ffffffffffffffff81111561167e57600080fd5b61168a8682870161157b565b9497909650939450505050565b60008060008060008060a087890312156116b057600080fd5b86356116bb816114c8565b9550602087013567ffffffffffffffff8111156116d757600080fd5b6116e389828a0161157b565b90965094505060408701356116f7816114c8565b959894975092956060810135946080909101359350915050565b60006020828403121561172357600080fd5b81356112e8816114c8565b6020808252825182820181905260009190848201906040850190845b8181101561177c57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161174a565b50909695505050505050565b60006020828403121561179a57600080fd5b81516112e8816114c8565b6000602082840312156117b757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156117ff57600080fd5b815180151581146112e857600080fd5b6000825160005b818110156118305760208186018101518583015201611816565b50600092019182525091905056",
              "fullyQualifiedName": "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ERC4626Transformer.sol:ERC4626Transformer"
            }
          ],
          "index": "1",
          "decodedAction": {
            "referenceName": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
            "functionName": "call",
            "variables": [
              "Calldata is too large to display."
            ],
            "address": ""
          },
          "gas": "1560799",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
          "txData": "0xc7aeef0f42616c6d792d455243343632365472616e73666f726d65722d5631000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000185e608060405234801561001057600080fd5b5061183e806100206000396000f3fe6080604052600436106100b15760003560e01c8063451fcf4c116100695780634f899c481161004e5780634f899c48146101ac578063a1e8b1d5146101cc578063e7147294146101ec57600080fd5b8063451fcf4c1461016c5780634e89a7111461017f57600080fd5b80632426c6821161009a5780632426c682146101185780632d5403001461012b5780633142085c1461015957600080fd5b806301ffc9a7146100b65780630a8355b6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004611486565b6101ff565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b6101063660046114ea565b610298565b6040516100e29190611516565b61010b6101263660046115c7565b6103b6565b34801561013757600080fd5b5061014b610146366004611642565b6105bd565b6040519081526020016100e2565b61010b6101673660046115c7565b610699565b61014b61017a366004611697565b6109b8565b34801561018b57600080fd5b5061019f61019a366004611711565b610bb0565b6040516100e2919061172e565b3480156101b857600080fd5b5061014b6101c7366004611642565b610c29565b3480156101d857600080fd5b5061010b6101e73660046114ea565b610c94565b61014b6101fa366004611697565b610d60565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3050af3c00000000000000000000000000000000000000000000000000000000148061029257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b9190611788565b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff86169063b3d7f6b9906024015b602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a191906117a5565b90506103ad8282610ed9565b95945050505050565b606081804211156103f3576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001841461042d576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008873ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190611788565b6040517fba087652000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff89811660248301523360448301529192506000918b169063ba087652906064016020604051808303816000875af115801561051f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054391906117a5565b90508087876000818110610559576105596117be565b9050604002016020013511156105a3576040517fe9a3651e000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b6105ad8282610ed9565b935050505b509695505050505050565b6000600182146105f9576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663ef8b30f784846000818110610628576106286117be565b905060400201602001356040518263ffffffff1660e01b815260040161065091815260200190565b602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069191906117a5565b949350505050565b606081804211156106d6576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018414610710576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810188905260009073ffffffffffffffffffffffffffffffffffffffff8a169063b3d7f6b990602401602060405180830381865afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a291906117a5565b905060008973ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190611788565b905061083973ffffffffffffffffffffffffffffffffffffffff8216333085610f68565b61085a73ffffffffffffffffffffffffffffffffffffffff82168b84610ff7565b6040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8981166024830152600091908c16906394bf804d906044016020604051808303816000875af11580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f791906117a5565b9050808888600081811061090d5761090d6117be565b905060400201602001351015610952576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810182905260240161059a565b8281101561099f5761097d73ffffffffffffffffffffffffffffffffffffffff8316338386036110cf565b61099f73ffffffffffffffffffffffffffffffffffffffff83168c6000610ff7565b6109a98282610ed9565b9b9a5050505050505050505050565b600081804211156109f5576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610a2f576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087876000818110610a4457610a446117be565b610a5a9260206040909202019081019150611711565b9050600088886000818110610a7157610a716117be565b905060400201602001359050610aaa3330838573ffffffffffffffffffffffffffffffffffffffff16610f68909392919063ffffffff16565b610acb73ffffffffffffffffffffffffffffffffffffffff83168b83610ff7565b6040517f6e553f650000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88811660248301528b1690636e553f65906044016020604051808303816000875af1158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906117a5565b935083861115610ba3576040517fe9a3651e0000000000000000000000000000000000000000000000000000000081526004810185905260240161059a565b5050509695505050505050565b60606102928273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611788565b611112565b600060018214610c65576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16630a28a47784846000818110610628576106286117be565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d079190611788565b6040517f4cdad5060000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff861690634cdad50690602401610360565b60008180421115610d9d576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610dd7576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff1663b460af9488886000818110610e0657610e066117be565b9050604002016020013587336040518463ffffffff1660e01b8152600401610e579392919092835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b6020604051808303816000875af1158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a91906117a5565b9150818410156105b2576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810183905260240161059a565b604080516001808252818301909252606091816020015b6040805180820190915260008082526020820152815260200190600190039081610ef057905050905060405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381525081600081518110610f5757610f576117be565b602002602001018190525092915050565b60405173ffffffffffffffffffffffffffffffffffffffff8481166024830152838116604483015260648201839052610ff19186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611187565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611083848261121d565b610ff15760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526110c591869182169063095ea7b390606401610faa565b610ff18482611187565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261110d91859182169063a9059cbb90606401610faa565b505050565b604080516001808252818301909252606091602080830190803683370190505090508181600081518110611148576111486117be565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050919050565b60006111a973ffffffffffffffffffffffffffffffffffffffff8416836112da565b905080516000141580156111ce5750808060200190518101906111cc91906117ed565b155b1561110d576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161059a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611247919061180f565b6000604051808303816000865af19150503d8060008114611284576040519150601f19603f3d011682016040523d82523d6000602084013e611289565b606091505b50915091508180156112b35750805115806112b35750808060200190518101906112b391906117ed565b80156103ad57505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606112e8838360006112ef565b9392505050565b60608147101561132d576040517fcd78605900000000000000000000000000000000000000000000000000000000815230600482015260240161059a565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051611356919061180f565b60006040518083038185875af1925050503d8060008114611393576040519150601f19603f3d011682016040523d82523d6000602084013e611398565b606091505b50915091506113a88683836113b2565b9695505050505050565b6060826113c7576113c282611441565b6112e8565b81511580156113eb575073ffffffffffffffffffffffffffffffffffffffff84163b155b1561143a576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161059a565b50806112e8565b8051156114515780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006020828403121561149857600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112e857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461148357600080fd5b600080604083850312156114fd57600080fd5b8235611508816114c8565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561156e578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611533565b5091979650505050505050565b60008083601f84011261158d57600080fd5b50813567ffffffffffffffff8111156115a557600080fd5b6020830191508360208260061b85010111156115c057600080fd5b9250929050565b60008060008060008060a087890312156115e057600080fd5b86356115eb816114c8565b9550602087013594506040870135611602816114c8565b9350606087013567ffffffffffffffff81111561161e57600080fd5b61162a89828a0161157b565b979a9699509497949695608090950135949350505050565b60008060006040848603121561165757600080fd5b8335611662816114c8565b9250602084013567ffffffffffffffff81111561167e57600080fd5b61168a8682870161157b565b9497909650939450505050565b60008060008060008060a087890312156116b057600080fd5b86356116bb816114c8565b9550602087013567ffffffffffffffff8111156116d757600080fd5b6116e389828a0161157b565b90965094505060408701356116f7816114c8565b959894975092956060810135946080909101359350915050565b60006020828403121561172357600080fd5b81356112e8816114c8565b6020808252825182820181905260009190848201906040850190845b8181101561177c57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161174a565b50909695505050505050565b60006020828403121561179a57600080fd5b81516112e8816114c8565b6000602082840312156117b757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156117ff57600080fd5b815180151581146112e857600080fd5b6000825160005b818110156118305760208186018101518583015201611816565b506000920191825250919050560000"
        },
        {
          "actionType": 2,
          "contracts": [
            {
              "address": "0x6C615481E96806edBd9987B6E522A4Ea85d13659",
              "initCodeWithArgs": "",
              "fullyQualifiedName": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol:DCAHubCompanion"
            }
          ],
          "index": "2",
          "decodedAction": {
            "referenceName": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
            "functionName": "call",
            "variables": [
              "Calldata is too large to display."
            ],
            "address": ""
          },
          "gas": "5112926",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
          "txData": ""
        },
        {
          "actionType": 2,
          "contracts": [
            {
              "address": "0x0f218847790b70da742b0bD701A86F09c5F73C63",
              "initCodeWithArgs": "0x608060405234801561001057600080fd5b50611ab5806100206000396000f3fe6080604052600436106100345760003560e01c80635817c99e14610039578063648573701461005b578063d6347c1b146100a1575b600080fd5b34801561004557600080fd5b50610059610054366004610e6e565b6100b4565b005b34801561006757600080fd5b5061008f7f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f481565b60405190815260200160405180910390f35b6100596100af366004610f91565b61015d565b60006100c282840184611470565b90508060200151421115610102576040517fa83116fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010f8160400151610322565b61011c81606001516103ac565b8051156101325761013287878360800151610417565b61014187878360a001516106ed565b61015381608001518260a00151610840565b5050505050505050565b6040517f91d148540000000000000000000000000000000000000000000000000000000081527f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f4600482015233602482015273ffffffffffffffffffffffffffffffffffffffff8c16906391d1485490604401602060405180830381865afa1580156101ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102119190611551565b610247576040517f1171cc3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb39461e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c169063b39461e5906102af908d908d908d908d90309081908f908f908f908f908f908f9060040161166a565b6000604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103149190810190611858565b505050505050505050505050565b60005b81518110156103a857600082828151811061034257610342611982565b6020026020010151905061039f81602001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836000015173ffffffffffffffffffffffffffffffffffffffff166109549092919063ffffffff16565b50600101610325565b5050565b60005b81518110156103a85760008282815181106103cc576103cc611982565b6020026020010151905061040d81604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16610a6f9092919063ffffffff16565b50506001016103af565b805160009061042690846119b1565b67ffffffffffffffff81111561043e5761043e611098565b60405190808252806020026020018201604052801561048357816020015b604080518082019091526000808252602082015281526020019060019003908161045c5790505b50905060005b838110156105865760008585838181106104a5576104a5611982565b6104bb92602060809092020190810191506119eb565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff831680825291517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152929350916020830191906370a0823190602401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611a08565b81525083838151811061057257610572611982565b602090810291909101015250600101610489565b5060005b82518110156106af5760405180604001604052808483815181106105b0576105b0611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018483815181106105e5576105e5611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190611a08565b90528261068c86846119b1565b8151811061069c5761069c611982565b602090810291909101015260010161058a565b50806040517fac2836d80000000000000000000000000000000000000000000000000000000081526004016106e49190611a21565b60405180910390fd5b60005b8281101561083a57600084848381811061070c5761070c611982565b61072292602060809092020190810191506119eb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611a08565b905080156108305760008686858181106107d2576107d2611982565b905060800201604001359050600081111561080d5761080873ffffffffffffffffffffffffffffffffffffffff84163384610b34565b61082e565b61082e73ffffffffffffffffffffffffffffffffffffffff84168684610b34565b505b50506001016106f0565b50505050565b60005b825181101561094f57600083828151811061086057610860611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190611a08565b9050801561094657610946838286858151811061091957610919611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610b349092919063ffffffff16565b50600101610843565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526109e08482610b72565b61083a5760405173ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152610a6591869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c36565b61083a8482610c36565b606081471015610aad576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016106e4565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051610ad69190611a86565b60006040518083038185875af1925050503d8060008114610b13576040519150601f19603f3d011682016040523d82523d6000602084013e610b18565b606091505b5091509150610b28868383610ccc565b925050505b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261094f91859182169063a9059cbb90606401610a1e565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051610b9c9190611a86565b6000604051808303816000865af19150503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5091509150818015610c08575080511580610c08575080806020019051810190610c089190611551565b8015610c2b575060008573ffffffffffffffffffffffffffffffffffffffff163b115b925050505b92915050565b6000610c5873ffffffffffffffffffffffffffffffffffffffff841683610d5b565b90508051600014158015610c7d575080806020019051810190610c7b9190611551565b155b1561094f576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106e4565b606082610ce157610cdc82610d69565b610b2d565b8151158015610d05575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610d54576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016106e4565b5080610b2d565b6060610b2d83836000610a6f565b805115610d795780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114610dab57600080fd5b8035610ddb81610dae565b919050565b60008083601f840112610df257600080fd5b50813567ffffffffffffffff811115610e0a57600080fd5b6020830191508360208260051b8501011115610e2557600080fd5b9250929050565b60008083601f840112610e3e57600080fd5b50813567ffffffffffffffff811115610e5657600080fd5b602083019150836020828501011115610e2557600080fd5b60008060008060008060006080888a031215610e8957600080fd5b8735610e9481610dae565b9650602088013567ffffffffffffffff80821115610eb157600080fd5b818a0191508a601f830112610ec557600080fd5b813581811115610ed457600080fd5b8b60208260071b8501011115610ee957600080fd5b6020830198508097505060408a0135915080821115610f0757600080fd5b610f138b838c01610de0565b909650945060608a0135915080821115610f2c57600080fd5b50610f398a828b01610e2c565b989b979a50959850939692959293505050565b60008083601f840112610f5e57600080fd5b50813567ffffffffffffffff811115610f7657600080fd5b6020830191508360208260061b8501011115610e2557600080fd5b600080600080600080600080600080600060c08c8e031215610fb257600080fd5b610fbb8c610dd0565b9a5067ffffffffffffffff8060208e01351115610fd757600080fd5b610fe78e60208f01358f01610de0565b909b50995060408d0135811015610ffd57600080fd5b61100d8e60408f01358f01610f4c565b909950975060608d013581101561102357600080fd5b6110338e60608f01358f01610de0565b909750955060808d013581101561104957600080fd5b6110598e60808f01358f01610e2c565b909550935060a08d013581101561106f57600080fd5b506110808d60a08e01358e01610e2c565b81935080925050509295989b509295989b9093969950565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156110ea576110ea611098565b60405290565b6040516060810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160c0810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160e0810167ffffffffffffffff811182821017156110ea576110ea611098565b6040516080810167ffffffffffffffff811182821017156110ea576110ea611098565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156111c3576111c3611098565b604052919050565b8015158114610dab57600080fd5b8035610ddb816111cb565b600067ffffffffffffffff8211156111fe576111fe611098565b5060051b60200190565b600082601f83011261121957600080fd5b8135602061122e611229836111e4565b61117c565b82815260069290921b8401810191818101908684111561124d57600080fd5b8286015b8481101561129e576040818903121561126a5760008081fd5b6112726110c7565b813561127d81610dae565b81528185013561128c81610dae565b81860152835291830191604001611251565b509695505050505050565b6000601f83601f8401126112bc57600080fd5b823560206112cc611229836111e4565b82815260059290921b850181019181810190878411156112eb57600080fd5b8287015b848110156113fc57803567ffffffffffffffff808211156113105760008081fd5b818a01915060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08181858f0301121561134a5760008081fd5b6113526110f0565b8885013561135f81610dae565b81526040858101358a83015292850135928484111561137e5760008081fd5b83860195508e603f87011261139557600093508384fd5b898601359350848411156113ab576113ab611098565b6113ba8a848e8701160161117c565b94508385528e818588010111156113d357600092508283fd5b838187018b87013760009385018a019390935291820192909252855250509183019183016112ef565b50979650505050505050565b600082601f83011261141957600080fd5b81356020611429611229836111e4565b8083825260208201915060208460051b87010193508684111561144b57600080fd5b602086015b8481101561129e57803561146381610dae565b8352918301918301611450565b60006020828403121561148257600080fd5b813567ffffffffffffffff8082111561149a57600080fd5b9083019060c082860312156114ae57600080fd5b6114b6611113565b6114bf836111d9565b8152602083013560208201526040830135828111156114dd57600080fd5b6114e987828601611208565b60408301525060608301358281111561150157600080fd5b61150d878286016112a9565b60608301525060808301358281111561152557600080fd5b61153187828601611408565b60808301525061154360a08401610dd0565b60a082015295945050505050565b60006020828403121561156357600080fd5b8151610b2d816111cb565b803560ff81168114610ddb57600080fd5b8183526000602080850194508260005b858110156115cb5760ff806115a38461156e565b168852806115b285850161156e565b168885015250604096870196919091019060010161158f565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561160857600080fd5b8260051b80836020870137939093016020019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60e080825281018c9052600061010082018e825b8f8110156116bc576116908235610dae565b813573ffffffffffffffffffffffffffffffffffffffff1683526020928301929091019060010161167e565b505082810360208401526116d1818d8f61157f565b73ffffffffffffffffffffffffffffffffffffffff8c166040850152905073ffffffffffffffffffffffffffffffffffffffff8a166060840152828103608084015261171e81898b6115d6565b905082810360a0840152611733818789611621565b905082810360c0840152611748818587611621565b9f9e505050505050505050505050505050565b600082601f83011261176c57600080fd5b8151602061177c611229836111e4565b82815260e0928302850182019282820191908785111561179b57600080fd5b8387015b8581101561184b5781818a0312156117b75760008081fd5b6117bf611136565b81516117ca81610dae565b8152818601516117d981610dae565b8187015260408281015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301517fff000000000000000000000000000000000000000000000000000000000000008116811461183a5760008081fd5b90820152845292840192810161179f565b5090979650505050505050565b6000602080838503121561186b57600080fd5b825167ffffffffffffffff8082111561188357600080fd5b8185019150604080838803121561189957600080fd5b6118a16110c7565b8351838111156118b057600080fd5b8401601f810189136118c157600080fd5b80516118cf611229826111e4565b81815260079190911b8201870190878101908b8311156118ee57600080fd5b928801925b8284101561194c576080848d03121561190c5760008081fd5b611914611159565b845161191f81610dae565b8152848a01518a8201528685015187820152606080860151908201528252608090930192908801906118f3565b84525050508385015191508282111561196457600080fd5b6119708883860161175b565b85820152809550505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610c30577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000602082840312156119fd57600080fd5b8135610b2d81610dae565b600060208284031215611a1a57600080fd5b5051919050565b602080825282518282018190526000919060409081850190868401855b82811015611a79578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611a3e565b5091979650505050505050565b6000825160005b81811015611aa75760208186018101518583015201611a8d565b50600092019182525091905056",
              "fullyQualifiedName": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/ThirdPartyDCAHubSwapper.sol:ThirdPartyDCAHubSwapper"
            }
          ],
          "index": "3",
          "decodedAction": {
            "referenceName": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
            "functionName": "call",
            "variables": [
              "Calldata is too large to display."
            ],
            "address": ""
          },
          "gas": "1683999",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
          "txData": "0xc7aeef0f42616c6d792d335061727479537761707065722d563100000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ad5608060405234801561001057600080fd5b50611ab5806100206000396000f3fe6080604052600436106100345760003560e01c80635817c99e14610039578063648573701461005b578063d6347c1b146100a1575b600080fd5b34801561004557600080fd5b50610059610054366004610e6e565b6100b4565b005b34801561006757600080fd5b5061008f7f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f481565b60405190815260200160405180910390f35b6100596100af366004610f91565b61015d565b60006100c282840184611470565b90508060200151421115610102576040517fa83116fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010f8160400151610322565b61011c81606001516103ac565b8051156101325761013287878360800151610417565b61014187878360a001516106ed565b61015381608001518260a00151610840565b5050505050505050565b6040517f91d148540000000000000000000000000000000000000000000000000000000081527f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f4600482015233602482015273ffffffffffffffffffffffffffffffffffffffff8c16906391d1485490604401602060405180830381865afa1580156101ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102119190611551565b610247576040517f1171cc3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb39461e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c169063b39461e5906102af908d908d908d908d90309081908f908f908f908f908f908f9060040161166a565b6000604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103149190810190611858565b505050505050505050505050565b60005b81518110156103a857600082828151811061034257610342611982565b6020026020010151905061039f81602001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836000015173ffffffffffffffffffffffffffffffffffffffff166109549092919063ffffffff16565b50600101610325565b5050565b60005b81518110156103a85760008282815181106103cc576103cc611982565b6020026020010151905061040d81604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16610a6f9092919063ffffffff16565b50506001016103af565b805160009061042690846119b1565b67ffffffffffffffff81111561043e5761043e611098565b60405190808252806020026020018201604052801561048357816020015b604080518082019091526000808252602082015281526020019060019003908161045c5790505b50905060005b838110156105865760008585838181106104a5576104a5611982565b6104bb92602060809092020190810191506119eb565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff831680825291517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152929350916020830191906370a0823190602401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611a08565b81525083838151811061057257610572611982565b602090810291909101015250600101610489565b5060005b82518110156106af5760405180604001604052808483815181106105b0576105b0611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018483815181106105e5576105e5611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190611a08565b90528261068c86846119b1565b8151811061069c5761069c611982565b602090810291909101015260010161058a565b50806040517fac2836d80000000000000000000000000000000000000000000000000000000081526004016106e49190611a21565b60405180910390fd5b60005b8281101561083a57600084848381811061070c5761070c611982565b61072292602060809092020190810191506119eb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611a08565b905080156108305760008686858181106107d2576107d2611982565b905060800201604001359050600081111561080d5761080873ffffffffffffffffffffffffffffffffffffffff84163384610b34565b61082e565b61082e73ffffffffffffffffffffffffffffffffffffffff84168684610b34565b505b50506001016106f0565b50505050565b60005b825181101561094f57600083828151811061086057610860611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190611a08565b9050801561094657610946838286858151811061091957610919611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610b349092919063ffffffff16565b50600101610843565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526109e08482610b72565b61083a5760405173ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152610a6591869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c36565b61083a8482610c36565b606081471015610aad576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016106e4565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051610ad69190611a86565b60006040518083038185875af1925050503d8060008114610b13576040519150601f19603f3d011682016040523d82523d6000602084013e610b18565b606091505b5091509150610b28868383610ccc565b925050505b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261094f91859182169063a9059cbb90606401610a1e565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051610b9c9190611a86565b6000604051808303816000865af19150503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5091509150818015610c08575080511580610c08575080806020019051810190610c089190611551565b8015610c2b575060008573ffffffffffffffffffffffffffffffffffffffff163b115b925050505b92915050565b6000610c5873ffffffffffffffffffffffffffffffffffffffff841683610d5b565b90508051600014158015610c7d575080806020019051810190610c7b9190611551565b155b1561094f576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106e4565b606082610ce157610cdc82610d69565b610b2d565b8151158015610d05575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610d54576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016106e4565b5080610b2d565b6060610b2d83836000610a6f565b805115610d795780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114610dab57600080fd5b8035610ddb81610dae565b919050565b60008083601f840112610df257600080fd5b50813567ffffffffffffffff811115610e0a57600080fd5b6020830191508360208260051b8501011115610e2557600080fd5b9250929050565b60008083601f840112610e3e57600080fd5b50813567ffffffffffffffff811115610e5657600080fd5b602083019150836020828501011115610e2557600080fd5b60008060008060008060006080888a031215610e8957600080fd5b8735610e9481610dae565b9650602088013567ffffffffffffffff80821115610eb157600080fd5b818a0191508a601f830112610ec557600080fd5b813581811115610ed457600080fd5b8b60208260071b8501011115610ee957600080fd5b6020830198508097505060408a0135915080821115610f0757600080fd5b610f138b838c01610de0565b909650945060608a0135915080821115610f2c57600080fd5b50610f398a828b01610e2c565b989b979a50959850939692959293505050565b60008083601f840112610f5e57600080fd5b50813567ffffffffffffffff811115610f7657600080fd5b6020830191508360208260061b8501011115610e2557600080fd5b600080600080600080600080600080600060c08c8e031215610fb257600080fd5b610fbb8c610dd0565b9a5067ffffffffffffffff8060208e01351115610fd757600080fd5b610fe78e60208f01358f01610de0565b909b50995060408d0135811015610ffd57600080fd5b61100d8e60408f01358f01610f4c565b909950975060608d013581101561102357600080fd5b6110338e60608f01358f01610de0565b909750955060808d013581101561104957600080fd5b6110598e60808f01358f01610e2c565b909550935060a08d013581101561106f57600080fd5b506110808d60a08e01358e01610e2c565b81935080925050509295989b509295989b9093969950565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156110ea576110ea611098565b60405290565b6040516060810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160c0810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160e0810167ffffffffffffffff811182821017156110ea576110ea611098565b6040516080810167ffffffffffffffff811182821017156110ea576110ea611098565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156111c3576111c3611098565b604052919050565b8015158114610dab57600080fd5b8035610ddb816111cb565b600067ffffffffffffffff8211156111fe576111fe611098565b5060051b60200190565b600082601f83011261121957600080fd5b8135602061122e611229836111e4565b61117c565b82815260069290921b8401810191818101908684111561124d57600080fd5b8286015b8481101561129e576040818903121561126a5760008081fd5b6112726110c7565b813561127d81610dae565b81528185013561128c81610dae565b81860152835291830191604001611251565b509695505050505050565b6000601f83601f8401126112bc57600080fd5b823560206112cc611229836111e4565b82815260059290921b850181019181810190878411156112eb57600080fd5b8287015b848110156113fc57803567ffffffffffffffff808211156113105760008081fd5b818a01915060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08181858f0301121561134a5760008081fd5b6113526110f0565b8885013561135f81610dae565b81526040858101358a83015292850135928484111561137e5760008081fd5b83860195508e603f87011261139557600093508384fd5b898601359350848411156113ab576113ab611098565b6113ba8a848e8701160161117c565b94508385528e818588010111156113d357600092508283fd5b838187018b87013760009385018a019390935291820192909252855250509183019183016112ef565b50979650505050505050565b600082601f83011261141957600080fd5b81356020611429611229836111e4565b8083825260208201915060208460051b87010193508684111561144b57600080fd5b602086015b8481101561129e57803561146381610dae565b8352918301918301611450565b60006020828403121561148257600080fd5b813567ffffffffffffffff8082111561149a57600080fd5b9083019060c082860312156114ae57600080fd5b6114b6611113565b6114bf836111d9565b8152602083013560208201526040830135828111156114dd57600080fd5b6114e987828601611208565b60408301525060608301358281111561150157600080fd5b61150d878286016112a9565b60608301525060808301358281111561152557600080fd5b61153187828601611408565b60808301525061154360a08401610dd0565b60a082015295945050505050565b60006020828403121561156357600080fd5b8151610b2d816111cb565b803560ff81168114610ddb57600080fd5b8183526000602080850194508260005b858110156115cb5760ff806115a38461156e565b168852806115b285850161156e565b168885015250604096870196919091019060010161158f565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561160857600080fd5b8260051b80836020870137939093016020019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60e080825281018c9052600061010082018e825b8f8110156116bc576116908235610dae565b813573ffffffffffffffffffffffffffffffffffffffff1683526020928301929091019060010161167e565b505082810360208401526116d1818d8f61157f565b73ffffffffffffffffffffffffffffffffffffffff8c166040850152905073ffffffffffffffffffffffffffffffffffffffff8a166060840152828103608084015261171e81898b6115d6565b905082810360a0840152611733818789611621565b905082810360c0840152611748818587611621565b9f9e505050505050505050505050505050565b600082601f83011261176c57600080fd5b8151602061177c611229836111e4565b82815260e0928302850182019282820191908785111561179b57600080fd5b8387015b8581101561184b5781818a0312156117b75760008081fd5b6117bf611136565b81516117ca81610dae565b8152818601516117d981610dae565b8187015260408281015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301517fff000000000000000000000000000000000000000000000000000000000000008116811461183a5760008081fd5b90820152845292840192810161179f565b5090979650505050505050565b6000602080838503121561186b57600080fd5b825167ffffffffffffffff8082111561188357600080fd5b8185019150604080838803121561189957600080fd5b6118a16110c7565b8351838111156118b057600080fd5b8401601f810189136118c157600080fd5b80516118cf611229826111e4565b81815260079190911b8201870190878101908b8311156118ee57600080fd5b928801925b8284101561194c576080848d03121561190c5760008081fd5b611914611159565b845161191f81610dae565b8152848a01518a8201528685015187820152606080860151908201528252608090930192908801906118f3565b84525050508385015191508282111561196457600080fd5b6119708883860161175b565b85820152809550505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610c30577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000602082840312156119fd57600080fd5b8135610b2d81610dae565b600060208284031215611a1a57600080fd5b5051919050565b602080825282518282018190526000919060409081850190868401855b82811015611a79578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611a3e565b5091979650505050505050565b6000825160005b81811015611aa75760208186018101518583015201611a8d565b506000920191825250919050560000000000000000000000"
        },
        {
          "actionType": 2,
          "contracts": [
            {
              "address": "0xDB8EF5BDBaf2a3A22DBbBB5986Df524926bdB07e",
              "initCodeWithArgs": "0x60806040523480156200001157600080fd5b5060405162002a6938038062002a69833981016040819052620000349162000247565b6001600160a01b0382166200005c5760405163d92e233d60e01b815260040160405180910390fd5b6200007760008051602062002a29833981519152806200011a565b620000a160008051602062002a4983398151915260008051602062002a298339815191526200011a565b620000bc60008051602062002a298339815191528362000165565b5060005b815181101562000111576200010760008051602062002a49833981519152838381518110620000f357620000f362000330565b60200260200101516200016560201b60201c565b50600101620000c0565b50505062000346565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166200020a576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620001c13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200020e565b5060005b92915050565b80516001600160a01b03811681146200022c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200025b57600080fd5b620002668362000214565b602084810151919350906001600160401b03808211156200028657600080fd5b818601915086601f8301126200029b57600080fd5b815181811115620002b057620002b062000231565b8060051b604051601f19603f83011681018181108582111715620002d857620002d862000231565b604052918252848201925083810185019189831115620002f757600080fd5b938501935b828510156200032057620003108562000214565b84529385019392850192620002fc565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6126d380620003566000396000f3fe6080604052600436106101485760003560e01c80636c06005a116100c0578063bcbef20611610074578063e9c0407111610059578063e9c040711461045c578063fb0cb6a51461047c578063fb5235d8146104a957600080fd5b8063bcbef20614610429578063d547741f1461043c57600080fd5b806391d14854116100a557806391d1485414610396578063a217fddf146103e7578063ac9650d8146103fc57600080fd5b80636c06005a1461034257806375b238fc1461036257600080fd5b806336568abe116101175780634460bdd6116100fc5780634460bdd6146102a157806351f63ebc146102d5578063585cc6a5146102f557600080fd5b806336568abe146102615780633ed242b41461028157600080fd5b806301ffc9a714610154578063248a9ca3146101895780632f2ff15d146101c757806336351365146101e957600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f366004611b32565b6104bc565b60405190151581526020015b60405180910390f35b34801561019557600080fd5b506101b96101a4366004611b74565b60009081526020819052604090206001015490565b604051908152602001610180565b3480156101d357600080fd5b506101e76101e2366004611baf565b6104dc565b005b3480156101f557600080fd5b506101b9610204366004611bdf565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b34801561026d57600080fd5b506101e761027c366004611baf565b610507565b61029461028f366004611c59565b610565565b6040516101809190611d20565b3480156102ad57600080fd5b506101b97f7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c4768981565b3480156102e157600080fd5b506101e76102f0366004611de7565b61063d565b34801561030157600080fd5b5061031d73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610180565b34801561034e57600080fd5b506101e761035d366004611e3e565b6106fd565b34801561036e57600080fd5b506101b97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156103a257600080fd5b506101746103b1366004611baf565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156103f357600080fd5b506101b9600081565b34801561040857600080fd5b5061041c610417366004611c59565b6107b6565b6040516101809190611ea6565b6101e7610437366004611f1b565b61089e565b34801561044857600080fd5b506101e7610457366004611baf565b61097a565b34801561046857600080fd5b506101e7610477366004611c59565b61099f565b34801561048857600080fd5b5061049c610497366004611f8d565b6109d3565b6040516101809190611fe2565b6101e76104b7366004612051565b610c00565b60006104c782610dc7565b806104d657506104d682610e5f565b92915050565b6000828152602081905260409020600101546104f781610ef6565b6105018383610f03565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610556576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105608282610fff565b505050565b60608167ffffffffffffffff8111156105805761058061208c565b6040519080825280602002602001820160405280156105d757816020015b6105c4604051806060016040528060001515815260200160608152602001600081525090565b81526020019060019003908161059e5790505b50905060005b82811015610636576106118484838181106105fa576105fa6120bb565b905060200281019061060c91906120ea565b6110ba565b828281518110610623576106236120bb565b60209081029190910101526001016105dd565b5092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561066781610ef6565b60005b838110156106f6576000858583818110610686576106866120bb565b90506040020180360381019061069c91906121cc565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200151036106da5780516106d59085611250565b6106ed565b6106ed8160000151826020015186611327565b5060010161066a565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561072781610ef6565b6040517f560c649900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063560c64999061077d90879087908790600401612206565b600060405180830381600087803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b505050505050505050565b6040805160008152602081019091526060908267ffffffffffffffff8111156107e1576107e161208c565b60405190808252806020026020018201604052801561081457816020015b60608152602001906001900390816107ff5790505b50915060005b838110156108965761087130868684818110610838576108386120bb565b905060200281019061084a91906120ea565b8560405160200161085d939291906122c5565b6040516020818303038152906040526113c3565b838281518110610883576108836120bb565b602090810291909101015260010161081a565b505092915050565b60005a90506000803073ffffffffffffffffffffffffffffffffffffffff1685856040516108cd9291906122ec565b600060405180830381855af49150503d8060008114610908576040519150601f19603f3d011682016040523d82523d6000602084013e61090d565b606091505b509150915060005a61091f908561228b565b905060405180606001604052808415158152602001838152602001828152506040517f493703af00000000000000000000000000000000000000000000000000000000815260040161097191906122fc565b60405180910390fd5b60008281526020819052604090206001015461099581610ef6565b6105018383610fff565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756109c981610ef6565b610560838361143d565b60608167ffffffffffffffff8111156109ee576109ee61208c565b604051908082528060200260200182016040528015610a5957816020015b610a466040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b815260200190600190039081610a0c5790505b50905060005b82811015610bf8576000848483818110610a7b57610a7b6120bb565b9050602002016020810190610a90919061230f565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff80841680835292517fc67e32e900000000000000000000000000000000000000000000000000000000815260048101939093529293509160208301919089169063c67e32e990602401602060405180830381865afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b39919061232c565b81526040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209091019073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf919061232c565b815250838381518110610be457610be46120bb565b602090810291909101015250600101610a5f565b509392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610c2a81610ef6565b60005b610c378380612345565b9050811015610c8f576000610c4c8480612345565b83818110610c5c57610c5c6120bb565b905060400201803603810190610c7291906123ad565b9050610c86816000015182602001516114e8565b50600101610c2d565b5060005b610ca060408401846123ee565b9050811015610d5b576000610cb86060850185612345565b83818110610cc857610cc86120bb565b905060400201803603810190610cde9190612456565b9050610d52610cf060208601866123ee565b835160ff16818110610d0457610d046120bb565b9050602002016020810190610d19919061230f565b610d2660408701876123ee565b85818110610d3657610d366120bb565b9050602002810190610d4891906120ea565b846020015161152d565b50600101610c93565b5060005b610d6c6080840184612345565b9050811015610560576000610d846080850185612345565b83818110610d9457610d946120bb565b905060400201803603810190610daa91906123ad565b9050610dbe81600001518260200151611250565b50600101610d5f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3ed242b40000000000000000000000000000000000000000000000000000000014806104d657507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a7000000000000000000000000000000000000000000000000000000001492915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104d657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146104d6565b610f008133611585565b50565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610f953390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016104d6565b5060006104d6565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff1615610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016104d6565b6110e0604051806060016040528060001515815260200160608152602001600081525090565b6000803073ffffffffffffffffffffffffffffffffffffffff1663bcbef20660e01b8686604051602401611115929190612481565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161118091906124b0565b600060405180830381855af49150503d80600081146111bb576040519150601f19603f3d011682016040523d82523d6000602084013e6111c0565b606091505b5091509150811561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5754463f2053686f756c642068617665206661696c65642100000000000000006044820152606401610971565b6004810190508080602001905181019061124791906124e1565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611316576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611311919061232c565b611318565b475b90508015610560576105608382845b73ffffffffffffffffffffffffffffffffffffffff81166113455750335b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8416016113a25761056073ffffffffffffffffffffffffffffffffffffffff82168361160b565b61056073ffffffffffffffffffffffffffffffffffffffff841682846116e1565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113ed91906124b0565b600060405180830381855af49150503d8060008114611428576040519150601f19603f3d011682016040523d82523d6000602084013e61142d565b606091505b5091509150611247858383611762565b60005b8181101561056057600083838381811061145c5761145c6120bb565b905060200281019061146e91906125b5565b611477906125e9565b905060005b8160200151518110156114de576114d682600001516000846020015184815181106114a9576114a96120bb565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166117f49092919063ffffffff16565b60010161147c565b5050600101611440565b61152973ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6117f4565b5050565b6106f683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505073ffffffffffffffffffffffffffffffffffffffff8716919050836118cc565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611529576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610971565b80471015611647576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146116a1576040519150601f19603f3d011682016040523d82523d6000602084013e6116a6565b606091505b5050905080610560576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261056091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061198f565b6060826117775761177282611a25565b6117ed565b815115801561179b575073ffffffffffffffffffffffffffffffffffffffff84163b155b156117ea576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610971565b50805b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526118808482611a67565b6105015760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526118c291869182169063095ea7b39060640161171b565b610501848261198f565b60608147101561190a576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161193391906124b0565b60006040518083038185875af1925050503d8060008114611970576040519150601f19603f3d011682016040523d82523d6000602084013e611975565b606091505b5091509150611985868383611762565b9695505050505050565b60006119b173ffffffffffffffffffffffffffffffffffffffff841683611b24565b905080516000141580156119d65750808060200190518101906119d491906126b8565b155b15610560576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610971565b805115611a355780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611a9191906124b0565b6000604051808303816000865af19150503d8060008114611ace576040519150601f19603f3d011682016040523d82523d6000602084013e611ad3565b606091505b5091509150818015611afd575080511580611afd575080806020019051810190611afd91906126b8565b801561124757505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606117ed838360006118cc565b600060208284031215611b4457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146117ed57600080fd5b600060208284031215611b8657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f0057600080fd5b60008060408385031215611bc257600080fd5b823591506020830135611bd481611b8d565b809150509250929050565b60008060408385031215611bf257600080fd5b8235611bfd81611b8d565b91506020830135611bd481611b8d565b60008083601f840112611c1f57600080fd5b50813567ffffffffffffffff811115611c3757600080fd5b6020830191508360208260051b8501011115611c5257600080fd5b9250929050565b60008060208385031215611c6c57600080fd5b823567ffffffffffffffff811115611c8357600080fd5b611c8f85828601611c0d565b90969095509350505050565b60005b83811015611cb6578181015183820152602001611c9e565b50506000910152565b60008151808452611cd7816020860160208601611c9b565b601f01601f19169290920160200192915050565b8051151582526000602082015160606020850152611d0c6060850182611cbf565b604093840151949093019390935250919050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611d83858351611ceb565b94509285019290850190600101611d49565b5092979650505050505050565b60008083601f840112611db457600080fd5b50813567ffffffffffffffff811115611dcc57600080fd5b6020830191508360208260061b8501011115611c5257600080fd5b600080600060408486031215611dfc57600080fd5b833567ffffffffffffffff811115611e1357600080fd5b611e1f86828701611da2565b9094509250506020840135611e3381611b8d565b809150509250925092565b60008060008060608587031215611e5457600080fd5b8435611e5f81611b8d565b9350602085013567ffffffffffffffff811115611e7b57600080fd5b611e8787828801611da2565b9094509250506040850135611e9b81611b8d565b939692955090935050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611f09858351611cbf565b94509285019290850190600101611ecf565b60008060208385031215611f2e57600080fd5b823567ffffffffffffffff80821115611f4657600080fd5b818501915085601f830112611f5a57600080fd5b813581811115611f6957600080fd5b866020828501011115611f7b57600080fd5b60209290920196919550909350505050565b600080600060408486031215611fa257600080fd5b8335611fad81611b8d565b9250602084013567ffffffffffffffff811115611fc957600080fd5b611fd586828701611c0d565b9497909650939450505050565b602080825282518282018190526000919060409081850190868401855b82811015612044578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528501518585015260609093019290850190600101611fff565b5091979650505050505050565b60006020828403121561206357600080fd5b813567ffffffffffffffff81111561207a57600080fd5b820160a081850312156117ed57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261211f57600080fd5b83018035915067ffffffffffffffff82111561213a57600080fd5b602001915036819003821315611c5257600080fd5b6040805190810167ffffffffffffffff811182821017156121725761217261208c565b60405290565b6040516060810167ffffffffffffffff811182821017156121725761217261208c565b604051601f8201601f1916810167ffffffffffffffff811182821017156121c4576121c461208c565b604052919050565b6000604082840312156121de57600080fd5b6121e661214f565b82356121f181611b8d565b81526020928301359281019290925250919050565b60408082528181018490526000908560608401835b8781101561226057823561222e81611b8d565b73ffffffffffffffffffffffffffffffffffffffff16825260208381013590830152918301919083019060010161221b565b5080935050505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b818103818111156104d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8284823760008382016000815283516122e2818360208801611c9b565b0195945050505050565b8183823760009101908152919050565b6020815260006117ed6020830184611ceb565b60006020828403121561232157600080fd5b81356117ed81611b8d565b60006020828403121561233e57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261237a57600080fd5b83018035915067ffffffffffffffff82111561239557600080fd5b6020019150600681901b3603821315611c5257600080fd5b6000604082840312156123bf57600080fd5b6123c761214f565b82356123d281611b8d565b815260208301356123e281611b8d565b60208201529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261242357600080fd5b83018035915067ffffffffffffffff82111561243e57600080fd5b6020019150600581901b3603821315611c5257600080fd5b60006040828403121561246857600080fd5b61247061214f565b823560ff811681146121f157600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600082516124c2818460208701611c9b565b9190910192915050565b805180151581146124dc57600080fd5b919050565b600060208083850312156124f457600080fd5b825167ffffffffffffffff8082111561250c57600080fd5b908401906060828703121561252057600080fd5b612528612178565b612531836124cc565b8152838301518281111561254457600080fd5b8301601f8101881361255557600080fd5b8051838111156125675761256761208c565b61257986601f19601f8401160161219b565b9350808452888682840101111561258f57600080fd5b61259e81878601888501611c9b565b505092830152604090810151908201529392505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126124c257600080fd5b6000604082360312156125fb57600080fd5b61260361214f565b823561260e81611b8d565b815260208381013567ffffffffffffffff8082111561262c57600080fd5b9085019036601f83011261263f57600080fd5b8135818111156126515761265161208c565b8060051b915061266284830161219b565b818152918301840191848101903684111561267c57600080fd5b938501935b838510156126a6578435925061269683611b8d565b8282529385019390850190612681565b94860194909452509295945050505050565b6000602082840312156126ca57600080fd5b6117ed826124cc567613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775000000000000000000000000a1667e34fc9a602c38e19246176d28831c5794eb00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a1667e34fc9a602c38e19246176d28831c5794eb",
              "fullyQualifiedName": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol:DCAFeeManager"
            }
          ],
          "index": "4",
          "decodedAction": {
            "referenceName": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
            "functionName": "call",
            "variables": [
              "Calldata is too large to display."
            ],
            "address": ""
          },
          "gas": "2549292",
          "requireSuccess": true,
          "value": "0",
          "operation": 0,
          "to": "0x3A3e3a37c5E5aE9B49dbb9555A1E6f6d81367406",
          "txData": "0xc7aeef0f42616c6d792d4443414665654d616e616765722d563100000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ae960806040523480156200001157600080fd5b5060405162002a6938038062002a69833981016040819052620000349162000247565b6001600160a01b0382166200005c5760405163d92e233d60e01b815260040160405180910390fd5b6200007760008051602062002a29833981519152806200011a565b620000a160008051602062002a4983398151915260008051602062002a298339815191526200011a565b620000bc60008051602062002a298339815191528362000165565b5060005b815181101562000111576200010760008051602062002a49833981519152838381518110620000f357620000f362000330565b60200260200101516200016560201b60201c565b50600101620000c0565b50505062000346565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166200020a576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620001c13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200020e565b5060005b92915050565b80516001600160a01b03811681146200022c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200025b57600080fd5b620002668362000214565b602084810151919350906001600160401b03808211156200028657600080fd5b818601915086601f8301126200029b57600080fd5b815181811115620002b057620002b062000231565b8060051b604051601f19603f83011681018181108582111715620002d857620002d862000231565b604052918252848201925083810185019189831115620002f757600080fd5b938501935b828510156200032057620003108562000214565b84529385019392850192620002fc565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6126d380620003566000396000f3fe6080604052600436106101485760003560e01c80636c06005a116100c0578063bcbef20611610074578063e9c0407111610059578063e9c040711461045c578063fb0cb6a51461047c578063fb5235d8146104a957600080fd5b8063bcbef20614610429578063d547741f1461043c57600080fd5b806391d14854116100a557806391d1485414610396578063a217fddf146103e7578063ac9650d8146103fc57600080fd5b80636c06005a1461034257806375b238fc1461036257600080fd5b806336568abe116101175780634460bdd6116100fc5780634460bdd6146102a157806351f63ebc146102d5578063585cc6a5146102f557600080fd5b806336568abe146102615780633ed242b41461028157600080fd5b806301ffc9a714610154578063248a9ca3146101895780632f2ff15d146101c757806336351365146101e957600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f366004611b32565b6104bc565b60405190151581526020015b60405180910390f35b34801561019557600080fd5b506101b96101a4366004611b74565b60009081526020819052604090206001015490565b604051908152602001610180565b3480156101d357600080fd5b506101e76101e2366004611baf565b6104dc565b005b3480156101f557600080fd5b506101b9610204366004611bdf565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b34801561026d57600080fd5b506101e761027c366004611baf565b610507565b61029461028f366004611c59565b610565565b6040516101809190611d20565b3480156102ad57600080fd5b506101b97f7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c4768981565b3480156102e157600080fd5b506101e76102f0366004611de7565b61063d565b34801561030157600080fd5b5061031d73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610180565b34801561034e57600080fd5b506101e761035d366004611e3e565b6106fd565b34801561036e57600080fd5b506101b97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156103a257600080fd5b506101746103b1366004611baf565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156103f357600080fd5b506101b9600081565b34801561040857600080fd5b5061041c610417366004611c59565b6107b6565b6040516101809190611ea6565b6101e7610437366004611f1b565b61089e565b34801561044857600080fd5b506101e7610457366004611baf565b61097a565b34801561046857600080fd5b506101e7610477366004611c59565b61099f565b34801561048857600080fd5b5061049c610497366004611f8d565b6109d3565b6040516101809190611fe2565b6101e76104b7366004612051565b610c00565b60006104c782610dc7565b806104d657506104d682610e5f565b92915050565b6000828152602081905260409020600101546104f781610ef6565b6105018383610f03565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610556576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105608282610fff565b505050565b60608167ffffffffffffffff8111156105805761058061208c565b6040519080825280602002602001820160405280156105d757816020015b6105c4604051806060016040528060001515815260200160608152602001600081525090565b81526020019060019003908161059e5790505b50905060005b82811015610636576106118484838181106105fa576105fa6120bb565b905060200281019061060c91906120ea565b6110ba565b828281518110610623576106236120bb565b60209081029190910101526001016105dd565b5092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561066781610ef6565b60005b838110156106f6576000858583818110610686576106866120bb565b90506040020180360381019061069c91906121cc565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200151036106da5780516106d59085611250565b6106ed565b6106ed8160000151826020015186611327565b5060010161066a565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561072781610ef6565b6040517f560c649900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063560c64999061077d90879087908790600401612206565b600060405180830381600087803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b505050505050505050565b6040805160008152602081019091526060908267ffffffffffffffff8111156107e1576107e161208c565b60405190808252806020026020018201604052801561081457816020015b60608152602001906001900390816107ff5790505b50915060005b838110156108965761087130868684818110610838576108386120bb565b905060200281019061084a91906120ea565b8560405160200161085d939291906122c5565b6040516020818303038152906040526113c3565b838281518110610883576108836120bb565b602090810291909101015260010161081a565b505092915050565b60005a90506000803073ffffffffffffffffffffffffffffffffffffffff1685856040516108cd9291906122ec565b600060405180830381855af49150503d8060008114610908576040519150601f19603f3d011682016040523d82523d6000602084013e61090d565b606091505b509150915060005a61091f908561228b565b905060405180606001604052808415158152602001838152602001828152506040517f493703af00000000000000000000000000000000000000000000000000000000815260040161097191906122fc565b60405180910390fd5b60008281526020819052604090206001015461099581610ef6565b6105018383610fff565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756109c981610ef6565b610560838361143d565b60608167ffffffffffffffff8111156109ee576109ee61208c565b604051908082528060200260200182016040528015610a5957816020015b610a466040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b815260200190600190039081610a0c5790505b50905060005b82811015610bf8576000848483818110610a7b57610a7b6120bb565b9050602002016020810190610a90919061230f565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff80841680835292517fc67e32e900000000000000000000000000000000000000000000000000000000815260048101939093529293509160208301919089169063c67e32e990602401602060405180830381865afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b39919061232c565b81526040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209091019073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf919061232c565b815250838381518110610be457610be46120bb565b602090810291909101015250600101610a5f565b509392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610c2a81610ef6565b60005b610c378380612345565b9050811015610c8f576000610c4c8480612345565b83818110610c5c57610c5c6120bb565b905060400201803603810190610c7291906123ad565b9050610c86816000015182602001516114e8565b50600101610c2d565b5060005b610ca060408401846123ee565b9050811015610d5b576000610cb86060850185612345565b83818110610cc857610cc86120bb565b905060400201803603810190610cde9190612456565b9050610d52610cf060208601866123ee565b835160ff16818110610d0457610d046120bb565b9050602002016020810190610d19919061230f565b610d2660408701876123ee565b85818110610d3657610d366120bb565b9050602002810190610d4891906120ea565b846020015161152d565b50600101610c93565b5060005b610d6c6080840184612345565b9050811015610560576000610d846080850185612345565b83818110610d9457610d946120bb565b905060400201803603810190610daa91906123ad565b9050610dbe81600001518260200151611250565b50600101610d5f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3ed242b40000000000000000000000000000000000000000000000000000000014806104d657507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a7000000000000000000000000000000000000000000000000000000001492915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104d657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146104d6565b610f008133611585565b50565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610f953390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016104d6565b5060006104d6565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff1615610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016104d6565b6110e0604051806060016040528060001515815260200160608152602001600081525090565b6000803073ffffffffffffffffffffffffffffffffffffffff1663bcbef20660e01b8686604051602401611115929190612481565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161118091906124b0565b600060405180830381855af49150503d80600081146111bb576040519150601f19603f3d011682016040523d82523d6000602084013e6111c0565b606091505b5091509150811561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5754463f2053686f756c642068617665206661696c65642100000000000000006044820152606401610971565b6004810190508080602001905181019061124791906124e1565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611316576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611311919061232c565b611318565b475b90508015610560576105608382845b73ffffffffffffffffffffffffffffffffffffffff81166113455750335b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8416016113a25761056073ffffffffffffffffffffffffffffffffffffffff82168361160b565b61056073ffffffffffffffffffffffffffffffffffffffff841682846116e1565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113ed91906124b0565b600060405180830381855af49150503d8060008114611428576040519150601f19603f3d011682016040523d82523d6000602084013e61142d565b606091505b5091509150611247858383611762565b60005b8181101561056057600083838381811061145c5761145c6120bb565b905060200281019061146e91906125b5565b611477906125e9565b905060005b8160200151518110156114de576114d682600001516000846020015184815181106114a9576114a96120bb565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166117f49092919063ffffffff16565b60010161147c565b5050600101611440565b61152973ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6117f4565b5050565b6106f683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505073ffffffffffffffffffffffffffffffffffffffff8716919050836118cc565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611529576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610971565b80471015611647576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146116a1576040519150601f19603f3d011682016040523d82523d6000602084013e6116a6565b606091505b5050905080610560576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261056091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061198f565b6060826117775761177282611a25565b6117ed565b815115801561179b575073ffffffffffffffffffffffffffffffffffffffff84163b155b156117ea576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610971565b50805b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526118808482611a67565b6105015760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526118c291869182169063095ea7b39060640161171b565b610501848261198f565b60608147101561190a576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161193391906124b0565b60006040518083038185875af1925050503d8060008114611970576040519150601f19603f3d011682016040523d82523d6000602084013e611975565b606091505b5091509150611985868383611762565b9695505050505050565b60006119b173ffffffffffffffffffffffffffffffffffffffff841683611b24565b905080516000141580156119d65750808060200190518101906119d491906126b8565b155b15610560576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610971565b805115611a355780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611a9191906124b0565b6000604051808303816000865af19150503d8060008114611ace576040519150601f19603f3d011682016040523d82523d6000602084013e611ad3565b606091505b5091509150818015611afd575080511580611afd575080806020019051810190611afd91906126b8565b801561124757505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606117ed838360006118cc565b600060208284031215611b4457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146117ed57600080fd5b600060208284031215611b8657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f0057600080fd5b60008060408385031215611bc257600080fd5b823591506020830135611bd481611b8d565b809150509250929050565b60008060408385031215611bf257600080fd5b8235611bfd81611b8d565b91506020830135611bd481611b8d565b60008083601f840112611c1f57600080fd5b50813567ffffffffffffffff811115611c3757600080fd5b6020830191508360208260051b8501011115611c5257600080fd5b9250929050565b60008060208385031215611c6c57600080fd5b823567ffffffffffffffff811115611c8357600080fd5b611c8f85828601611c0d565b90969095509350505050565b60005b83811015611cb6578181015183820152602001611c9e565b50506000910152565b60008151808452611cd7816020860160208601611c9b565b601f01601f19169290920160200192915050565b8051151582526000602082015160606020850152611d0c6060850182611cbf565b604093840151949093019390935250919050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611d83858351611ceb565b94509285019290850190600101611d49565b5092979650505050505050565b60008083601f840112611db457600080fd5b50813567ffffffffffffffff811115611dcc57600080fd5b6020830191508360208260061b8501011115611c5257600080fd5b600080600060408486031215611dfc57600080fd5b833567ffffffffffffffff811115611e1357600080fd5b611e1f86828701611da2565b9094509250506020840135611e3381611b8d565b809150509250925092565b60008060008060608587031215611e5457600080fd5b8435611e5f81611b8d565b9350602085013567ffffffffffffffff811115611e7b57600080fd5b611e8787828801611da2565b9094509250506040850135611e9b81611b8d565b939692955090935050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611f09858351611cbf565b94509285019290850190600101611ecf565b60008060208385031215611f2e57600080fd5b823567ffffffffffffffff80821115611f4657600080fd5b818501915085601f830112611f5a57600080fd5b813581811115611f6957600080fd5b866020828501011115611f7b57600080fd5b60209290920196919550909350505050565b600080600060408486031215611fa257600080fd5b8335611fad81611b8d565b9250602084013567ffffffffffffffff811115611fc957600080fd5b611fd586828701611c0d565b9497909650939450505050565b602080825282518282018190526000919060409081850190868401855b82811015612044578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528501518585015260609093019290850190600101611fff565b5091979650505050505050565b60006020828403121561206357600080fd5b813567ffffffffffffffff81111561207a57600080fd5b820160a081850312156117ed57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261211f57600080fd5b83018035915067ffffffffffffffff82111561213a57600080fd5b602001915036819003821315611c5257600080fd5b6040805190810167ffffffffffffffff811182821017156121725761217261208c565b60405290565b6040516060810167ffffffffffffffff811182821017156121725761217261208c565b604051601f8201601f1916810167ffffffffffffffff811182821017156121c4576121c461208c565b604052919050565b6000604082840312156121de57600080fd5b6121e661214f565b82356121f181611b8d565b81526020928301359281019290925250919050565b60408082528181018490526000908560608401835b8781101561226057823561222e81611b8d565b73ffffffffffffffffffffffffffffffffffffffff16825260208381013590830152918301919083019060010161221b565b5080935050505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b818103818111156104d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8284823760008382016000815283516122e2818360208801611c9b565b0195945050505050565b8183823760009101908152919050565b6020815260006117ed6020830184611ceb565b60006020828403121561232157600080fd5b81356117ed81611b8d565b60006020828403121561233e57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261237a57600080fd5b83018035915067ffffffffffffffff82111561239557600080fd5b6020019150600681901b3603821315611c5257600080fd5b6000604082840312156123bf57600080fd5b6123c761214f565b82356123d281611b8d565b815260208301356123e281611b8d565b60208201529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261242357600080fd5b83018035915067ffffffffffffffff82111561243e57600080fd5b6020019150600581901b3603821315611c5257600080fd5b60006040828403121561246857600080fd5b61247061214f565b823560ff811681146121f157600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600082516124c2818460208701611c9b565b9190910192915050565b805180151581146124dc57600080fd5b919050565b600060208083850312156124f457600080fd5b825167ffffffffffffffff8082111561250c57600080fd5b908401906060828703121561252057600080fd5b612528612178565b612531836124cc565b8152838301518281111561254457600080fd5b8301601f8101881361255557600080fd5b8051838111156125675761256761208c565b61257986601f19601f8401160161219b565b9350808452888682840101111561258f57600080fd5b61259e81878601888501611c9b565b505092830152604090810151908201529392505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126124c257600080fd5b6000604082360312156125fb57600080fd5b61260361214f565b823561260e81611b8d565b815260208381013567ffffffffffffffff8082111561262c57600080fd5b9085019036601f83011261263f57600080fd5b8135818111156126515761265161208c565b8060051b915061266284830161219b565b818152918301840191848101903684111561267c57600080fd5b938501935b838510156126a6578435925061269683611b8d565b8282529385019390850190612681565b94860194909452509295945050505050565b6000602082840312156126ca57600080fd5b6117ed826124cc567613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775000000000000000000000000a1667e34fc9a602c38e19246176d28831c5794eb00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a1667e34fc9a602c38e19246176d28831c5794eb0000000000000000000000000000000000000000000000"
        }
      ],
      "unlabeledContracts": [
        {
          "address": "0x394131Cdb7814E8857931e2b715F7b77CFb790Ab",
          "initCodeWithArgs": "0x67363d3d37363d34f03d5260086018f3"
        },
        {
          "address": "0x221C86592945612Be272cCD98172f1AeD676514E",
          "initCodeWithArgs": "0x67363d3d37363d34f03d5260086018f3"
        },
        {
          "address": "0x6EF27554F91e066A9c87AFDd45061c2fb92D84ab",
          "initCodeWithArgs": "0x67363d3d37363d34f03d5260086018f3"
        },
        {
          "address": "0x70863df2E62d56891f4690FF79BDAc9CB82b0108",
          "initCodeWithArgs": "0x67363d3d37363d34f03d5260086018f3"
        }
      ],
      "arbitraryChain": false,
      "executorAddress": "0xB5E96127D417b1B3ef8438496a38A143167209c7",
      "libraries": [],
      "gitCommit": "d54778e6761c7508c1ac1a2335d5622bc11417ee"
    }
  ],
  "buildInfos": {
    "ac2e129c3735bebff89875131ed89a3e": {
      "id": "ac2e129c3735bebff89875131ed89a3e",
      "solcVersion": "0.8.22",
      "solcLongVersion": "0.8.22+commit.4fc1097e",
      "input": {
        "language": "Solidity",
        "sources": {
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/TransformerRegistry.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165Checker.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport './utils/Multicall.sol';\nimport './utils/Governable.sol';\nimport './transformers/BaseTransformer.sol';\nimport '../interfaces/ITransformerRegistry.sol';\n\ncontract TransformerRegistry is BaseTransformer, Governable, Multicall, ITransformerRegistry {\n  address public constant PROTOCOL_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  mapping(address => ITransformer) internal _registeredTransformer; // dependent => transformer\n\n  constructor(address _governor) Governable(_governor) {}\n\n  /// @inheritdoc ITransformerRegistry\n  function transformers(address[] calldata _dependents) external view returns (ITransformer[] memory _transformers) {\n    _transformers = new ITransformer[](_dependents.length);\n    for (uint256 i; i < _dependents.length; i++) {\n      _transformers[i] = _registeredTransformer[_dependents[i]];\n    }\n  }\n\n  /// @inheritdoc ITransformerRegistry\n  function registerTransformers(TransformerRegistration[] calldata _registrations) external onlyGovernor {\n    for (uint256 i; i < _registrations.length; i++) {\n      TransformerRegistration memory _registration = _registrations[i];\n      // Make sure the given address is actually a transformer\n      bool _isTransformer = ERC165Checker.supportsInterface(_registration.transformer, type(ITransformer).interfaceId);\n      if (!_isTransformer) revert AddressIsNotTransformer(_registration.transformer);\n      for (uint256 j; j < _registration.dependents.length; j++) {\n        _registeredTransformer[_registration.dependents[j]] = ITransformer(_registration.transformer);\n      }\n    }\n    emit TransformersRegistered(_registrations);\n  }\n\n  /// @inheritdoc ITransformerRegistry\n  function removeTransformers(address[] calldata _dependents) external onlyGovernor {\n    for (uint256 i; i < _dependents.length; i++) {\n      _registeredTransformer[_dependents[i]] = ITransformer(address(0));\n    }\n    emit TransformersRemoved(_dependents);\n  }\n\n  /// @inheritdoc ITransformer\n  function getUnderlying(address _dependent) external view returns (address[] memory) {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n    return _transformer.getUnderlying(_dependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateTransformToUnderlying(address _dependent, uint256 _amountDependent) external view returns (UnderlyingAmount[] memory) {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n    return _transformer.calculateTransformToUnderlying(_dependent, _amountDependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateTransformToDependent(address _dependent, UnderlyingAmount[] calldata _underlying)\n    external\n    view\n    returns (uint256 _amountDependent)\n  {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n    return _transformer.calculateTransformToDependent(_dependent, _underlying);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateNeededToTransformToUnderlying(address _dependent, UnderlyingAmount[] calldata _expectedUnderlying)\n    external\n    view\n    returns (uint256 _neededDependent)\n  {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n    return _transformer.calculateNeededToTransformToUnderlying(_dependent, _expectedUnderlying);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateNeededToTransformToDependent(address _dependent, uint256 _expectedDependent)\n    external\n    view\n    returns (UnderlyingAmount[] memory _neededUnderlying)\n  {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n    return _transformer.calculateNeededToTransformToDependent(_dependent, _expectedDependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToUnderlying(\n    address _dependent,\n    uint256 _amountDependent,\n    address _recipient,\n    UnderlyingAmount[] calldata _minAmountOut,\n    uint256 _deadline\n  ) external payable returns (UnderlyingAmount[] memory) {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n    bytes memory _result = _delegateToTransformer(\n      _transformer,\n      abi.encodeWithSelector(_transformer.transformToUnderlying.selector, _dependent, _amountDependent, _recipient, _minAmountOut, _deadline)\n    );\n    return abi.decode(_result, (UnderlyingAmount[]));\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToDependent(\n    address _dependent,\n    UnderlyingAmount[] calldata _underlying,\n    address _recipient,\n    uint256 _minAmountOut,\n    uint256 _deadline\n  ) external payable returns (uint256 _amountDependent) {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n    bytes memory _result = _delegateToTransformer(\n      _transformer,\n      abi.encodeWithSelector(_transformer.transformToDependent.selector, _dependent, _underlying, _recipient, _minAmountOut, _deadline)\n    );\n    return abi.decode(_result, (uint256));\n  }\n\n  /// @inheritdoc ITransformerRegistry\n  function transformAllToUnderlying(\n    address _dependent,\n    address _recipient,\n    UnderlyingAmount[] memory _minAmountOut,\n    uint256 _deadline\n  ) external payable returns (UnderlyingAmount[] memory) {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n    uint256 _amountDependent = IERC20(_dependent).balanceOf(msg.sender);\n    bytes memory _result = _delegateToTransformer(\n      _transformer,\n      abi.encodeWithSelector(_transformer.transformToUnderlying.selector, _dependent, _amountDependent, _recipient, _minAmountOut, _deadline)\n    );\n    return abi.decode(_result, (UnderlyingAmount[]));\n  }\n\n  /// @inheritdoc ITransformerRegistry\n  function transformAllToDependent(\n    address _dependent,\n    address _recipient,\n    uint256 _minAmountOut,\n    uint256 _deadline\n  ) external payable returns (uint256) {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n\n    // Calculate underlying\n    address[] memory _underlying = _transformer.getUnderlying(_dependent);\n    UnderlyingAmount[] memory _underlyingAmount = new UnderlyingAmount[](_underlying.length);\n    for (uint256 i; i < _underlying.length; i++) {\n      address _underlyingToken = _underlying[i];\n      uint256 _balance = _underlyingToken == PROTOCOL_TOKEN ? address(this).balance : IERC20(_underlyingToken).balanceOf(msg.sender);\n      _underlyingAmount[i] = UnderlyingAmount({underlying: _underlyingToken, amount: _balance});\n    }\n\n    // Delegate\n    bytes memory _result = _delegateToTransformer(\n      _transformer,\n      abi.encodeWithSelector(_transformer.transformToDependent.selector, _dependent, _underlyingAmount, _recipient, _minAmountOut, _deadline)\n    );\n    return abi.decode(_result, (uint256));\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToExpectedUnderlying(\n    address _dependent,\n    UnderlyingAmount[] calldata _expectedUnderlying,\n    address _recipient,\n    uint256 _maxAmountIn,\n    uint256 _deadline\n  ) external payable returns (uint256 _spentDependent) {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n    bytes memory _result = _delegateToTransformer(\n      _transformer,\n      abi.encodeWithSelector(\n        _transformer.transformToExpectedUnderlying.selector,\n        _dependent,\n        _expectedUnderlying,\n        _recipient,\n        _maxAmountIn,\n        _deadline\n      )\n    );\n    return abi.decode(_result, (uint256));\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToExpectedDependent(\n    address _dependent,\n    uint256 _expectedDependent,\n    address _recipient,\n    UnderlyingAmount[] calldata _maxAmountIn,\n    uint256 _deadline\n  ) external payable returns (UnderlyingAmount[] memory _spentUnderlying) {\n    ITransformer _transformer = _getTransformerOrFail(_dependent);\n    bytes memory _result = _delegateToTransformer(\n      _transformer,\n      abi.encodeWithSelector(\n        _transformer.transformToExpectedDependent.selector,\n        _dependent,\n        _expectedDependent,\n        _recipient,\n        _maxAmountIn,\n        _deadline\n      )\n    );\n    return abi.decode(_result, (UnderlyingAmount[]));\n  }\n\n  receive() external payable {}\n\n  function _getTransformerOrFail(address _dependent) internal view returns (ITransformer _transformer) {\n    _transformer = _registeredTransformer[_dependent];\n    if (address(_transformer) == address(0)) revert NoTransformerRegistered(_dependent);\n  }\n\n  function _delegateToTransformer(ITransformer _transformer, bytes memory _data) internal returns (bytes memory) {\n    return Address.functionDelegateCall(address(_transformer), _data);\n  }\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/test/ERC20.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.22;\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract ERC20Mock is ERC20 {\n  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\n\n  function mint(address _account, uint256 _amount) external {\n    _mint(_account, _amount);\n  }\n\n  function burn(address _account, uint256 _amount) external {\n    _burn(_account, _amount);\n  }\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/test/ITransformerERC165.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\nimport '../../interfaces/ITransformer.sol';\n\n// Note: necessary for smocking purposes\ninterface ITransformerERC165 is IERC165, ITransformer {\n\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/test/utils/Governable.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.22;\n\nimport '../../utils/Governable.sol';\n\ncontract GovernableMock is Governable {\n  constructor(address _governor) Governable(_governor) {}\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/test/utils/Multicall.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.22;\n\nimport '../../utils/Multicall.sol';\n\ncontract MulticallMock is Multicall {\n  // slither-disable-next-line arbitrary-send\n  function sendEthToAddress(address payable _recipient, uint256 _amount) external payable {\n    _recipient.transfer(_amount);\n  }\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/transformers/BaseTransformer.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\nimport '../../interfaces/ITransformer.sol';\n\n/// @title A base implementation of `ITransformer` that implements ERC-165\nabstract contract BaseTransformer is ERC165, ITransformer {\n  /// @inheritdoc IERC165\n  function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n    return _interfaceId == type(ITransformer).interfaceId || super.supportsInterface(_interfaceId);\n  }\n\n  modifier checkDeadline(uint256 _deadline) {\n    if (block.timestamp > _deadline) revert TransactionExpired();\n    _;\n  }\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ERC4626Transformer.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/interfaces/IERC4626.sol';\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport './BaseTransformer.sol';\n\n/// @title An implementaton of `ITransformer` for tokens that implement `ERC4626`\ncontract ERC4626Transformer is BaseTransformer {\n  using SafeERC20 for IERC20;\n\n  /// @inheritdoc ITransformer\n  function getUnderlying(address _dependent) external view returns (address[] memory) {\n    return _toSingletonArray(IERC4626(_dependent).asset());\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateTransformToUnderlying(address _dependent, uint256 _amountDependent) external view returns (UnderlyingAmount[] memory) {\n    address _underlying = IERC4626(_dependent).asset();\n    uint256 _amount = IERC4626(_dependent).previewRedeem(_amountDependent);\n    return _toSingletonArray(_underlying, _amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateTransformToDependent(address _dependent, UnderlyingAmount[] calldata _underlying)\n    external\n    view\n    returns (uint256 _amountDependent)\n  {\n    if (_underlying.length != 1) revert InvalidUnderlyingInput();\n    _amountDependent = IERC4626(_dependent).previewDeposit(_underlying[0].amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateNeededToTransformToUnderlying(address _dependent, UnderlyingAmount[] calldata _expectedUnderlying)\n    external\n    view\n    returns (uint256 _neededDependent)\n  {\n    if (_expectedUnderlying.length != 1) revert InvalidUnderlyingInput();\n    _neededDependent = IERC4626(_dependent).previewWithdraw(_expectedUnderlying[0].amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateNeededToTransformToDependent(address _dependent, uint256 _expectedDependent)\n    external\n    view\n    returns (UnderlyingAmount[] memory _neededUnderlying)\n  {\n    address _underlying = IERC4626(_dependent).asset();\n    uint256 _amount = IERC4626(_dependent).previewMint(_expectedDependent);\n    return _toSingletonArray(_underlying, _amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToUnderlying(\n    address _dependent,\n    uint256 _amountDependent,\n    address _recipient,\n    UnderlyingAmount[] calldata _minAmountOut,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (UnderlyingAmount[] memory) {\n    if (_minAmountOut.length != 1) revert InvalidUnderlyingInput();\n    address _underlying = IERC4626(_dependent).asset();\n    uint256 _amount = IERC4626(_dependent).redeem(_amountDependent, _recipient, msg.sender);\n    if (_minAmountOut[0].amount > _amount) revert ReceivedLessThanExpected(_amount);\n    return _toSingletonArray(_underlying, _amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToDependent(\n    address _dependent,\n    UnderlyingAmount[] calldata _underlying,\n    address _recipient,\n    uint256 _minAmountOut,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (uint256 _amountDependent) {\n    if (_underlying.length != 1) revert InvalidUnderlyingInput();\n    IERC20 _underlyingToken = IERC20(_underlying[0].underlying);\n    uint256 _underlyingAmount = _underlying[0].amount;\n    // We need to take the tokens from the sender, and approve them so that the vault can take it from us\n    _underlyingToken.safeTransferFrom(msg.sender, address(this), _underlyingAmount);\n    _underlyingToken.forceApprove(_dependent, _underlyingAmount);\n    _amountDependent = IERC4626(_dependent).deposit(_underlyingAmount, _recipient);\n    if (_minAmountOut > _amountDependent) revert ReceivedLessThanExpected(_amountDependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToExpectedUnderlying(\n    address _dependent,\n    UnderlyingAmount[] calldata _expectedUnderlying,\n    address _recipient,\n    uint256 _maxAmountIn,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (uint256 _spentDependent) {\n    if (_expectedUnderlying.length != 1) revert InvalidUnderlyingInput();\n    _spentDependent = IERC4626(_dependent).withdraw(_expectedUnderlying[0].amount, _recipient, msg.sender);\n    if (_maxAmountIn < _spentDependent) revert NeededMoreThanExpected(_spentDependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToExpectedDependent(\n    address _dependent,\n    uint256 _expectedDependent,\n    address _recipient,\n    UnderlyingAmount[] calldata _maxAmountIn,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (UnderlyingAmount[] memory) {\n    if (_maxAmountIn.length != 1) revert InvalidUnderlyingInput();\n    // Check how much underlying would be needed to mint the vault tokens\n    uint256 _neededUnderlying = IERC4626(_dependent).previewMint(_expectedDependent);\n    // Take the needed underlying tokens from the caller, and approve the vault\n    IERC20 _underlying = IERC20(IERC4626(_dependent).asset());\n    _underlying.safeTransferFrom(msg.sender, address(this), _neededUnderlying);\n    _underlying.forceApprove(_dependent, _neededUnderlying);\n    // Mint the vault tokens\n    uint256 _spentUnderlying = IERC4626(_dependent).mint(_expectedDependent, _recipient);\n    if (_maxAmountIn[0].amount < _spentUnderlying) revert NeededMoreThanExpected(_spentUnderlying);\n    // If some tokens were left unspent, then return to caller\n    if (_spentUnderlying < _neededUnderlying) {\n      unchecked {\n        _underlying.safeTransfer(msg.sender, _neededUnderlying - _spentUnderlying);\n      }\n      _underlying.forceApprove(_dependent, 0);\n    }\n    return _toSingletonArray(address(_underlying), _spentUnderlying);\n  }\n\n  function _toSingletonArray(address _underlying) internal pure returns (address[] memory _underlyingArray) {\n    _underlyingArray = new address[](1);\n    _underlyingArray[0] = _underlying;\n  }\n\n  function _toSingletonArray(address _underlying, uint256 _amount) internal pure returns (UnderlyingAmount[] memory _amounts) {\n    _amounts = new UnderlyingAmount[](1);\n    _amounts[0] = UnderlyingAmount({underlying: _underlying, amount: _amount});\n  }\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ProtocolTokenWrapperTransformer.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport './BaseTransformer.sol';\n\n/// @title An implementaton of `ITransformer` for protocol token wrappers (WETH/WBNB/WMATIC)\ncontract ProtocolTokenWrapperTransformer is BaseTransformer {\n  using SafeERC20 for IERC20;\n  using SafeERC20 for IWETH9;\n  using Address for address payable;\n\n  address public constant PROTOCOL_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @inheritdoc ITransformer\n  function getUnderlying(address) external pure returns (address[] memory) {\n    return _toSingletonArray(PROTOCOL_TOKEN);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateTransformToUnderlying(address, uint256 _amountDependent) external pure returns (UnderlyingAmount[] memory) {\n    return _toSingletonArray(PROTOCOL_TOKEN, _amountDependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateTransformToDependent(address, UnderlyingAmount[] calldata _underlying) external pure returns (uint256 _amountDependent) {\n    if (_underlying.length != 1) revert InvalidUnderlyingInput();\n    _amountDependent = _underlying[0].amount;\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateNeededToTransformToUnderlying(address, UnderlyingAmount[] calldata _expectedUnderlying)\n    external\n    pure\n    returns (uint256 _neededDependent)\n  {\n    if (_expectedUnderlying.length != 1) revert InvalidUnderlyingInput();\n    _neededDependent = _expectedUnderlying[0].amount;\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateNeededToTransformToDependent(address, uint256 _expectedDependent)\n    external\n    pure\n    returns (UnderlyingAmount[] memory _neededUnderlying)\n  {\n    return _toSingletonArray(PROTOCOL_TOKEN, _expectedDependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToUnderlying(\n    address _dependent,\n    uint256 _amountDependent,\n    address _recipient,\n    UnderlyingAmount[] calldata _minAmountOut,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (UnderlyingAmount[] memory) {\n    if (_minAmountOut.length != 1) revert InvalidUnderlyingInput();\n    // Since dependent & underlying are 1:1, we can preemptively check if received less than expected\n    if (_minAmountOut[0].amount > _amountDependent) revert ReceivedLessThanExpected(_amountDependent);\n    _takeFromSenderAndUnwrap(IWETH9(_dependent), _amountDependent, _recipient);\n    return _toSingletonArray(PROTOCOL_TOKEN, _amountDependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToDependent(\n    address _dependent,\n    UnderlyingAmount[] calldata _underlying,\n    address _recipient,\n    uint256 _minAmountOut,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (uint256 _amountDependent) {\n    if (_underlying.length != 1) revert InvalidUnderlyingInput();\n    _amountDependent = _underlying[0].amount;\n    // Since dependent & underlying are 1:1, we can preemptively check if received less than expected\n    if (_minAmountOut > _amountDependent) revert ReceivedLessThanExpected(_amountDependent);\n    _wrapAndTransfer(IWETH9(_dependent), _amountDependent, _recipient);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToExpectedUnderlying(\n    address _dependent,\n    UnderlyingAmount[] calldata _expectedUnderlying,\n    address _recipient,\n    uint256 _maxAmountIn,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (uint256 _spentDependent) {\n    if (_expectedUnderlying.length != 1) revert InvalidUnderlyingInput();\n    _spentDependent = _expectedUnderlying[0].amount;\n    // Since dependent & underlying are 1:1, we can preemptively check if needed more than expected\n    if (_maxAmountIn < _spentDependent) revert NeededMoreThanExpected(_spentDependent);\n    _takeFromSenderAndUnwrap(IWETH9(_dependent), _spentDependent, _recipient);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToExpectedDependent(\n    address _dependent,\n    uint256 _expectedDependent,\n    address _recipient,\n    UnderlyingAmount[] calldata _maxAmountIn,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (UnderlyingAmount[] memory _spentUnderlying) {\n    if (_maxAmountIn.length != 1) revert InvalidUnderlyingInput();\n    // Since dependent & underlying are 1:1, we can preemptively check if needed more than expected\n    if (_maxAmountIn[0].amount < _expectedDependent) revert NeededMoreThanExpected(_expectedDependent);\n    _wrapAndTransfer(IWETH9(_dependent), _expectedDependent, _recipient);\n    return _toSingletonArray(PROTOCOL_TOKEN, _expectedDependent);\n  }\n\n  receive() external payable {}\n\n  // slither-disable-next-line arbitrary-send\n  function _takeFromSenderAndUnwrap(\n    IWETH9 _dependent,\n    uint256 _amount,\n    address _recipient\n  ) internal {\n    _dependent.safeTransferFrom(msg.sender, address(this), _amount);\n    _dependent.withdraw(_amount);\n    payable(_recipient).sendValue(_amount);\n  }\n\n  // slither-disable-next-line arbitrary-send\n  function _wrapAndTransfer(\n    IWETH9 _dependent,\n    uint256 _amount,\n    address _recipient\n  ) internal {\n    _dependent.deposit{value: _amount}();\n    _dependent.safeTransfer(_recipient, _amount);\n  }\n\n  function _toSingletonArray(address _underlying) internal pure returns (address[] memory _underlyingArray) {\n    _underlyingArray = new address[](1);\n    _underlyingArray[0] = _underlying;\n  }\n\n  function _toSingletonArray(address _underlying, uint256 _amount) internal pure returns (UnderlyingAmount[] memory _amounts) {\n    _amounts = new UnderlyingAmount[](1);\n    _amounts[0] = UnderlyingAmount({underlying: _underlying, amount: _amount});\n  }\n}\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n  /// @notice Deposit ether to get wrapped ether\n  function deposit() external payable;\n\n  /// @notice Withdraw wrapped ether to get ether\n  function withdraw(uint256) external;\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/transformers/wstETHTransformer.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport './BaseTransformer.sol';\n\n/// @title An implementaton of `ITransformer` for wstETH <=> stETH\ncontract wstETHTransformer is BaseTransformer {\n  using SafeERC20 for IwstETH;\n  using SafeERC20 for IstETH;\n\n  /// @notice The address of the stETH contract\n  IstETH public immutable stETH;\n\n  constructor(IstETH _stETH) {\n    stETH = _stETH;\n  }\n\n  /// @inheritdoc ITransformer\n  function getUnderlying(address) external view returns (address[] memory) {\n    return _toSingletonArray(stETH);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateTransformToUnderlying(address, uint256 _amountDependent) external view returns (UnderlyingAmount[] memory) {\n    uint256 _amountUnderlying = stETH.getPooledEthByShares(_amountDependent);\n    return _toSingletonArray(stETH, _amountUnderlying);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateTransformToDependent(address, UnderlyingAmount[] calldata _underlying) external view returns (uint256 _amountDependent) {\n    if (_underlying.length != 1) revert InvalidUnderlyingInput();\n    _amountDependent = stETH.getSharesByPooledEth(_underlying[0].amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateNeededToTransformToUnderlying(address, UnderlyingAmount[] calldata _expectedUnderlying)\n    external\n    view\n    returns (uint256 _neededDependent)\n  {\n    if (_expectedUnderlying.length != 1) revert InvalidUnderlyingInput();\n    _neededDependent = _calculateNeededToTransformToUnderlying(_expectedUnderlying[0].amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateNeededToTransformToDependent(address, uint256 _expectedDependent)\n    external\n    view\n    returns (UnderlyingAmount[] memory _neededUnderlying)\n  {\n    uint256 _neededUnderlyingAmount = _calculateNeededToTransformToDependent(_expectedDependent);\n    return _toSingletonArray(stETH, _neededUnderlyingAmount);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToUnderlying(\n    address _dependent,\n    uint256 _amountDependent,\n    address _recipient,\n    UnderlyingAmount[] calldata _minAmountOut,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (UnderlyingAmount[] memory) {\n    if (_minAmountOut.length != 1) revert InvalidUnderlyingInput();\n    uint256 _amountUnderlying = _takewstETHFromSenderAndUnwrap(_dependent, _amountDependent, _recipient);\n    if (_minAmountOut[0].amount > _amountUnderlying) revert ReceivedLessThanExpected(_amountUnderlying);\n    return _toSingletonArray(stETH, _amountUnderlying);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToDependent(\n    address _dependent,\n    UnderlyingAmount[] calldata _underlying,\n    address _recipient,\n    uint256 _minAmountOut,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (uint256 _amountDependent) {\n    if (_underlying.length != 1) revert InvalidUnderlyingInput();\n    _amountDependent = _takestETHFromSenderAndWrap(_dependent, _underlying[0].amount, _recipient);\n    if (_minAmountOut > _amountDependent) revert ReceivedLessThanExpected(_amountDependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToExpectedUnderlying(\n    address _dependent,\n    UnderlyingAmount[] calldata _expectedUnderlying,\n    address _recipient,\n    uint256 _maxAmountIn,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (uint256 _spentDependent) {\n    if (_expectedUnderlying.length != 1) revert InvalidUnderlyingInput();\n    uint256 _expectedUnderlyingAmount = _expectedUnderlying[0].amount;\n    _spentDependent = _calculateNeededToTransformToUnderlying(_expectedUnderlyingAmount);\n    if (_spentDependent > _maxAmountIn) revert NeededMoreThanExpected(_spentDependent);\n    uint256 _receivedUnderlying = _takewstETHFromSenderAndUnwrap(_dependent, _spentDependent, _recipient);\n    if (_expectedUnderlyingAmount > _receivedUnderlying) revert ReceivedLessThanExpected(_receivedUnderlying);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToExpectedDependent(\n    address _dependent,\n    uint256 _expectedDependent,\n    address _recipient,\n    UnderlyingAmount[] calldata _maxAmountIn,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (UnderlyingAmount[] memory _spentUnderlying) {\n    if (_maxAmountIn.length != 1) revert InvalidUnderlyingInput();\n    uint256 _neededUnderlyingAmount = _calculateNeededToTransformToDependent(_expectedDependent);\n    if (_neededUnderlyingAmount > _maxAmountIn[0].amount) revert NeededMoreThanExpected(_neededUnderlyingAmount);\n    uint256 _receivedDependent = _takestETHFromSenderAndWrap(_dependent, _neededUnderlyingAmount, _recipient);\n    if (_expectedDependent > _receivedDependent) revert ReceivedLessThanExpected(_receivedDependent);\n    return _toSingletonArray(stETH, _neededUnderlyingAmount);\n  }\n\n  function _calculateNeededToTransformToUnderlying(uint256 _expectedUnderlying) internal view returns (uint256 _neededDependent) {\n    // Since stETH contracts rounds down, we do the math here and round up\n    uint256 _totalSuppy = stETH.totalSupply();\n    uint256 _totalShares = stETH.getTotalShares();\n    _neededDependent = Math.mulDiv(_expectedUnderlying, _totalShares, _totalSuppy, Math.Rounding.Ceil);\n  }\n\n  function _calculateNeededToTransformToDependent(uint256 _expectedDependent) internal view returns (uint256 _neededUnderlying) {\n    // Since stETH contracts rounds down, we do the math here and round up\n    uint256 _totalShares = stETH.getTotalShares();\n    uint256 _totalSuppy = stETH.totalSupply();\n    _neededUnderlying = Math.mulDiv(_expectedDependent, _totalSuppy, _totalShares, Math.Rounding.Ceil);\n  }\n\n  function _takewstETHFromSenderAndUnwrap(\n    address _dependent,\n    uint256 _amount,\n    address _recipient\n  ) internal returns (uint256 _underlyingAmount) {\n    IwstETH(_dependent).safeTransferFrom(msg.sender, address(this), _amount);\n    _underlyingAmount = IwstETH(_dependent).unwrap(_amount);\n    stETH.safeTransfer(_recipient, _underlyingAmount);\n  }\n\n  function _takestETHFromSenderAndWrap(\n    address _dependent,\n    uint256 _amount,\n    address _recipient\n  ) internal returns (uint256 _dependentAmount) {\n    stETH.safeTransferFrom(msg.sender, address(this), _amount);\n    stETH.forceApprove(_dependent, _amount);\n    _dependentAmount = IwstETH(_dependent).wrap(_amount);\n    IwstETH(_dependent).safeTransfer(_recipient, _dependentAmount);\n  }\n\n  function _toSingletonArray(IstETH _underlying) internal pure returns (address[] memory _underlyingArray) {\n    _underlyingArray = new address[](1);\n    _underlyingArray[0] = address(_underlying);\n  }\n\n  function _toSingletonArray(IstETH _underlying, uint256 _amount) internal pure returns (UnderlyingAmount[] memory _amounts) {\n    _amounts = new UnderlyingAmount[](1);\n    _amounts[0] = UnderlyingAmount({underlying: address(_underlying), amount: _amount});\n  }\n}\n\ninterface IstETH is IERC20 {\n  /**\n   * @return The total amount of stETH\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @return The total amount of internal shares on stETH\n   * @dev This has nothing to do with wstETH supply\n   */\n  function getTotalShares() external view returns (uint256);\n\n  /**\n   * @return The amount of Ether that corresponds to `sharesAmount` token shares.\n   */\n  function getPooledEthByShares(uint256 sharesAmount) external view returns (uint256);\n\n  /**\n   * @return The amount of shares that corresponds to `stEthAmount` protocol-controlled Ether.\n   */\n  function getSharesByPooledEth(uint256 ethAmount) external view returns (uint256);\n}\n\ninterface IwstETH is IERC20 {\n  /**\n   * @notice Exchanges stETH to wstETH\n   * @param _stETHAmount amount of stETH to wrap in exchange for wstETH\n   * @dev Requirements:\n   *  - `_stETHAmount` must be non-zero\n   *  - msg.sender must approve at least `_stETHAmount` stETH to this\n   *    contract.\n   *  - msg.sender must have at least `_stETHAmount` of stETH.\n   * User should first approve _stETHAmount to the WstETH contract\n   * @return Amount of wstETH user receives after wrap\n   */\n  function wrap(uint256 _stETHAmount) external returns (uint256);\n\n  /**\n   * @notice Exchanges wstETH to stETH\n   * @param _wstETHAmount amount of wstETH to uwrap in exchange for stETH\n   * @dev Requirements:\n   *  - `_wstETHAmount` must be non-zero\n   *  - msg.sender must have at least `_wstETHAmount` wstETH.\n   * @return Amount of stETH user receives after unwrap\n   */\n  function unwrap(uint256 _wstETHAmount) external returns (uint256);\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/utils/Governable.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '../../interfaces/utils/IGovernable.sol';\n\n/**\n * @notice This contract is meant to be used in other contracts. By using this contract,\n *         a specific address will be given a \"governor\" role, which basically will be able to\n *         control certains aspects of the contract. There are other contracts that do the same,\n *         but this contract forces a new governor to accept the role before it's transferred.\n *         This is a basically a safety measure to prevent losing access to the contract.\n */\nabstract contract Governable is IGovernable {\n  /// @inheritdoc IGovernable\n  address public governor;\n\n  /// @inheritdoc IGovernable\n  address public pendingGovernor;\n\n  constructor(address _governor) {\n    if (_governor == address(0)) revert GovernorIsZeroAddress();\n    governor = _governor;\n  }\n\n  /// @inheritdoc IGovernable\n  function isGovernor(address _account) public view returns (bool) {\n    return _account == governor;\n  }\n\n  /// @inheritdoc IGovernable\n  function isPendingGovernor(address _account) public view returns (bool) {\n    return _account == pendingGovernor;\n  }\n\n  /// @inheritdoc IGovernable\n  function setPendingGovernor(address _pendingGovernor) external onlyGovernor {\n    pendingGovernor = _pendingGovernor;\n    emit PendingGovernorSet(_pendingGovernor);\n  }\n\n  /// @inheritdoc IGovernable\n  function acceptPendingGovernor() external onlyPendingGovernor {\n    governor = pendingGovernor;\n    pendingGovernor = address(0);\n    emit PendingGovernorAccepted();\n  }\n\n  modifier onlyGovernor() {\n    if (!isGovernor(msg.sender)) revert OnlyGovernor();\n    _;\n  }\n\n  modifier onlyPendingGovernor() {\n    if (!isPendingGovernor(msg.sender)) revert OnlyPendingGovernor();\n    _;\n  }\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/utils/Multicall.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '../../interfaces/utils/IMulticall.sol';\n\n/**\n * @dev Adding this contract will enable batching calls. This is basically the same as Open Zeppelin's\n *      Multicall contract, but we have made it payable. Any contract that uses this Multicall version\n *      should be very careful when using msg.value.\n *      For more context, read: https://github.com/Uniswap/v3-periphery/issues/52\n */\nabstract contract Multicall is IMulticall {\n  /// @inheritdoc IMulticall\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results) {\n    results = new bytes[](data.length);\n    for (uint256 i; i < data.length; i++) {\n      results[i] = Address.functionDelegateCall(address(this), data[i]);\n    }\n    return results;\n  }\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/interfaces/ITransformer.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/**\n * @title A contract that can map between one token and their underlying counterparts, and vice-versa\n * @notice This contract defines the concept of dependent tokens. These are tokens that depend on one or more underlying tokens,\n *         they can't exist on their own. This concept can apply to some known types of tokens, such as:\n *           - Wrappers (WETH/WMATIC/WBNB)\n *           - ERC-4626 tokens\n *           - LP tokens\n *         Now, transformers are smart contract that knows how to map dependent tokens into their underlying counterparts,\n *         and vice-versa. We are doing this so that we can abstract the way tokens can be transformed between each other\n * @dev All non-view functions were made payable, so that they could be multicalled when msg.value > 0\n */\ninterface ITransformer {\n  /// @notice An amount of an underlying token\n  struct UnderlyingAmount {\n    address underlying;\n    uint256 amount;\n  }\n\n  /// @notice Thrown when the underlying input is not valid for the used transformer\n  error InvalidUnderlyingInput();\n\n  /// @notice Thrown when the transformation provides less output than expected\n  error ReceivedLessThanExpected(uint256 received);\n\n  /// @notice Thrown when the transformation needs more input than expected\n  error NeededMoreThanExpected(uint256 needed);\n\n  /// @notice Thrown when a transaction is executed after the deadline has passed\n  error TransactionExpired();\n\n  /**\n   * @notice Returns the addresses of all the underlying tokens, for the given dependent\n   * @dev This function must be unaware of context. The returned values must be the same,\n   *      regardless of who the caller is\n   * @param dependent The address of the dependent token\n   * @return The addresses of all the underlying tokens\n   */\n  function getUnderlying(address dependent) external view returns (address[] memory);\n\n  /**\n   * @notice Calculates how much would the transformation to the underlying tokens return\n   * @dev This function must be unaware of context. The returned values must be the same,\n   *      regardless of who the caller is\n   * @param dependent The address of the dependent token\n   * @param amountDependent The amount to transform\n   * @return The transformed amount in each of the underlying tokens\n   */\n  function calculateTransformToUnderlying(address dependent, uint256 amountDependent) external view returns (UnderlyingAmount[] memory);\n\n  /**\n   * @notice Calculates how much would the transformation to the dependent token return\n   * @dev This function must be unaware of context. The returned values must be the same,\n   *      regardless of who the caller is\n   * @param dependent The address of the dependent token\n   * @param underlying The amounts of underlying tokens to transform\n   * @return amountDependent The transformed amount in the dependent token\n   */\n  function calculateTransformToDependent(address dependent, UnderlyingAmount[] calldata underlying)\n    external\n    view\n    returns (uint256 amountDependent);\n\n  /**\n   * @notice Calculates how many dependent tokens are needed to transform to the expected\n   *         amount of underlying\n   * @dev This function must be unaware of context. The returned values must be the same,\n   *      regardless of who the caller is\n   * @param dependent The address of the dependent token\n   * @param expectedUnderlying The expected amounts of underlying tokens\n   * @return neededDependent The amount of dependent needed\n   */\n  function calculateNeededToTransformToUnderlying(address dependent, UnderlyingAmount[] calldata expectedUnderlying)\n    external\n    view\n    returns (uint256 neededDependent);\n\n  /**\n   * @notice Calculates how many underlying tokens are needed to transform to the expected\n   *         amount of dependent\n   * @dev This function must be unaware of context. The returned values must be the same,\n   *      regardless of who the caller is\n   * @param dependent The address of the dependent token\n   * @param expectedDependent The expected amount of dependent tokens\n   * @return neededUnderlying The amount of underlying tokens needed\n   */\n  function calculateNeededToTransformToDependent(address dependent, uint256 expectedDependent)\n    external\n    view\n    returns (UnderlyingAmount[] memory neededUnderlying);\n\n  /**\n   * @notice Executes the transformation to the underlying tokens\n   * @param dependent The address of the dependent token\n   * @param amountDependent The amount to transform\n   * @param recipient The address that would receive the underlying tokens\n   * @param minAmountOut The minimum amount of underlying that the caller expects to get. Will fail\n   *                     if less is received. As a general rule, the underlying tokens should\n   *                     be provided in the same order as `getUnderlying` returns them\n   * @param deadline A deadline when the transaction becomes invalid\n   * @return The transformed amount in each of the underlying tokens\n   */\n  function transformToUnderlying(\n    address dependent,\n    uint256 amountDependent,\n    address recipient,\n    UnderlyingAmount[] calldata minAmountOut,\n    uint256 deadline\n  ) external payable returns (UnderlyingAmount[] memory);\n\n  /**\n   * @notice Executes the transformation to the dependent token\n   * @param dependent The address of the dependent token\n   * @param underlying The amounts of underlying tokens to transform\n   * @param recipient The address that would receive the dependent tokens\n   * @param minAmountOut The minimum amount of dependent that the caller expects to get. Will fail\n   *                     if less is received\n   * @param deadline A deadline when the transaction becomes invalid\n   * @return amountDependent The transformed amount in the dependent token\n   */\n  function transformToDependent(\n    address dependent,\n    UnderlyingAmount[] calldata underlying,\n    address recipient,\n    uint256 minAmountOut,\n    uint256 deadline\n  ) external payable returns (uint256 amountDependent);\n\n  /**\n   * @notice Transforms dependent tokens to an expected amount of underlying tokens\n   * @param dependent The address of the dependent token\n   * @param expectedUnderlying The expected amounts of underlying tokens\n   * @param recipient The address that would receive the underlying tokens\n   * @param maxAmountIn The maximum amount of dependent that the caller is willing to spend.\n   *                    Will fail more is needed\n   * @param deadline A deadline when the transaction becomes invalid\n   * @return spentDependent The amount of spent dependent tokens\n   */\n  function transformToExpectedUnderlying(\n    address dependent,\n    UnderlyingAmount[] calldata expectedUnderlying,\n    address recipient,\n    uint256 maxAmountIn,\n    uint256 deadline\n  ) external payable returns (uint256 spentDependent);\n\n  /**\n   * @notice Transforms underlying tokens to an expected amount of dependent tokens\n   * @param dependent The address of the dependent token\n   * @param expectedDependent The expected amounts of dependent tokens\n   * @param recipient The address that would receive the underlying tokens\n   * @param maxAmountIn The maximum amount of underlying that the caller is willing to spend.\n   *                    Will fail more is needed. As a general rule, the underlying tokens should\n   *                    be provided in the same order as `getUnderlying` returns them\n   * @param deadline A deadline when the transaction becomes invalid\n   * @return spentUnderlying The amount of spent underlying tokens\n   */\n  function transformToExpectedDependent(\n    address dependent,\n    uint256 expectedDependent,\n    address recipient,\n    UnderlyingAmount[] calldata maxAmountIn,\n    uint256 deadline\n  ) external payable returns (UnderlyingAmount[] memory spentUnderlying);\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/interfaces/ITransformerRegistry.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './ITransformer.sol';\n\n/**\n * @title A registry for all existing transformers\n * @notice This contract will contain all registered transformers and act as proxy. When called\n *         the registry will find the corresponding transformer and delegate the call to it. If no\n *         transformer is found, then it will fail\n */\ninterface ITransformerRegistry is ITransformer {\n  /// @notice An association between a transformer, and some of its dependentes\n  struct TransformerRegistration {\n    address transformer;\n    address[] dependents;\n  }\n\n  /**\n   * @notice Thrown when trying to register a dependent to an address that is not a transformer\n   * @param account The account that was not a transformer\n   */\n  error AddressIsNotTransformer(address account);\n\n  /**\n   * @notice Thrown when trying to execute an action with a dependent that has no transformer\n   *          associated\n   * @param dependent The dependent that didn't have a transformer\n   */\n  error NoTransformerRegistered(address dependent);\n\n  /**\n   * @notice Emitted when new dependents are registered\n   * @param registrations The dependents that were registered\n   */\n  event TransformersRegistered(TransformerRegistration[] registrations);\n\n  /**\n   * @notice Emitted when dependents are removed from the registry\n   * @param dependents The dependents that were removed\n   */\n  event TransformersRemoved(address[] dependents);\n\n  /**\n   * @notice Returns the registered transformer for the given dependents\n   * @param dependents The dependents to get the transformer for\n   * @return The registered transformers, or the zero address if there isn't any\n   */\n  function transformers(address[] calldata dependents) external view returns (ITransformer[] memory);\n\n  /**\n   * @notice Sets a new registration for the given dependents\n   * @dev Can only be called by admin\n   * @param registrations The associations to register\n   */\n  function registerTransformers(TransformerRegistration[] calldata registrations) external;\n\n  /**\n   * @notice Removes registration for the given dependents\n   * @dev Can only be called by admin\n   * @param dependents The associations to remove\n   */\n  function removeTransformers(address[] calldata dependents) external;\n\n  /**\n   * @notice Executes a transformation to the underlying tokens, by taking the caller's entire\n   *         dependent balance. This is meant to be used as part of a multi-hop swap\n   * @dev This function was made payable, so that it could be multicalled when msg.value > 0\n   * @param dependent The address of the dependent token\n   * @param recipient The address that would receive the underlying tokens\n   * @param minAmountOut The minimum amount of underlying that the caller expects to get. Will fail\n   *                     if less is received. As a general rule, the underlying tokens should\n   *                     be provided in the same order as `getUnderlying` returns them\n   * @param deadline A deadline when the transaction becomes invalid\n   * @return The transformed amount in each of the underlying tokens\n   */\n  function transformAllToUnderlying(\n    address dependent,\n    address recipient,\n    UnderlyingAmount[] calldata minAmountOut,\n    uint256 deadline\n  ) external payable returns (UnderlyingAmount[] memory);\n\n  /**\n   * @notice Executes a transformation to the dependent token, by taking the caller's entire\n   *         underlying balance. This is meant to be used as part of a multi-hop swap\n   * @dev This function will not work when the underlying token is ETH/MATIC/BNB, since it can't be taken from the caller\n   *      This function was made payable, so that it could be multicalled when msg.value > 0\n   * @param dependent The address of the dependent token\n   * @param recipient The address that would receive the dependent tokens\n   * @param minAmountOut The minimum amount of dependent that the caller expects to get. Will fail\n   *                     if less is received\n   * @param deadline A deadline when the transaction becomes invalid\n   * @return amountDependent The transformed amount in the dependent token\n   */\n  function transformAllToDependent(\n    address dependent,\n    address recipient,\n    uint256 minAmountOut,\n    uint256 deadline\n  ) external payable returns (uint256 amountDependent);\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/interfaces/utils/ICollectableDust.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.8;\n\nimport './IGovernable.sol';\n\n/**\n * @title A contract that allows the current governor to withdraw funds\n * @notice This is meant to be used to recover any tokens that were sent to the contract\n *         by mistake\n */\ninterface ICollectableDust {\n  /// @notice The balance of a given token\n  struct TokenBalance {\n    address token;\n    uint256 balance;\n  }\n\n  /// @notice Thrown when trying to send dust to the zero address\n  error DustRecipientIsZeroAddress();\n\n  /**\n   * @notice Emitted when dust is sent\n   * @param token The token that was sent\n   * @param amount The amount that was sent\n   * @param recipient The address that received the tokens\n   */\n  event DustSent(address token, uint256 amount, address recipient);\n\n  /**\n   * @notice Returns the address of the protocol token\n   * @dev Cannot be modified\n   * @return The address of the protocol token;\n   */\n  function PROTOCOL_TOKEN() external view returns (address);\n\n  /**\n   * @notice Returns the balance of each of the given tokens\n   * @dev Meant to be used for off-chain queries\n   * @param tokens The tokens to check the balance for, can be ERC20s or the protocol token\n   * @return The balances for the given tokens\n   */\n  function getBalances(address[] calldata tokens) external view returns (TokenBalance[] memory);\n\n  /**\n   * @notice Sends the given token to the recipient\n   * @dev Can only be called by the governor\n   * @param token The token to send to the recipient (can be an ERC20 or the protocol token)\n   * @param amount The amount to transfer to the recipient\n   * @param recipient The address of the recipient\n   */\n  function sendDust(\n    address token,\n    uint256 amount,\n    address recipient\n  ) external;\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/interfaces/utils/IGovernable.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.8;\n\n/**\n * @title A contract that manages a \"governor\" role\n */\ninterface IGovernable {\n  /// @notice Thrown when trying to set the zero address as governor\n  error GovernorIsZeroAddress();\n\n  /// @notice Thrown when trying to execute an action that only the governor an execute\n  error OnlyGovernor();\n\n  /// @notice Thrown when trying to execute an action that only the pending governor an execute\n  error OnlyPendingGovernor();\n\n  /**\n   * @notice Emitted when a new pending governor is set\n   * @param newPendingGovernor The new pending governor\n   */\n  event PendingGovernorSet(address newPendingGovernor);\n\n  /**\n   * @notice Emitted when the pending governor accepts the role and becomes the governor\n   */\n  event PendingGovernorAccepted();\n\n  /**\n   * @notice Returns the address of the governor\n   * @return The address of the governor\n   */\n  function governor() external view returns (address);\n\n  /**\n   * @notice Returns the address of the pending governor\n   * @return The address of the pending governor\n   */\n  function pendingGovernor() external view returns (address);\n\n  /**\n   * @notice Returns whether the given account is the current governor\n   * @param account The account to check\n   * @return Whether it is the current governor or not\n   */\n  function isGovernor(address account) external view returns (bool);\n\n  /**\n   * @notice Returns whether the given account is the pending governor\n   * @param account The account to check\n   * @return Whether it is the pending governor or not\n   */\n  function isPendingGovernor(address account) external view returns (bool);\n\n  /**\n   * @notice Sets a new pending governor\n   * @dev Only the current governor can execute this action\n   * @param pendingGovernor The new pending governor\n   */\n  function setPendingGovernor(address pendingGovernor) external;\n\n  /**\n   * @notice Sets the pending governor as the governor\n   * @dev Only the pending governor can execute this action\n   */\n  function acceptPendingGovernor() external;\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/interfaces/utils/IMulticall.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.8;\n\n/**\n * @title A contract that supports batching calls\n * @notice Contracts with this interface provide a function to batch together multiple calls\n *         in a single external call.\n */\ninterface IMulticall {\n  /**\n   * @notice Receives and executes a batch of function calls on this contract.\n   * @param data A list of different function calls to execute\n   * @return results The result of executing each of those calls\n   */\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"
          }
        },
        "settings": {
          "viaIR": false,
          "optimizer": {
            "runs": 9999,
            "enabled": true
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "none",
            "appendCBOR": false
          },
          "outputSelection": {
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/IERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/Address.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/Context.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/TransformerRegistry.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/test/ERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/test/ITransformerERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/test/utils/Governable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/test/utils/Multicall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/transformers/BaseTransformer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ERC4626Transformer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ProtocolTokenWrapperTransformer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/transformers/wstETHTransformer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/utils/Governable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/utils/Multicall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/ITransformer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/ITransformerRegistry.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/utils/ICollectableDust.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/utils/IGovernable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/utils/IMulticall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {},
          "remappings": [
            "@openzeppelin/contracts/=node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/",
            "@mean-finance/oracles/=node_modules/@mean-finance/oracles/",
            "@mean-finance/nft-descriptors/=node_modules/@mean-finance/nft-descriptors/",
            "@mean-finance/call-simulation/contracts/=node_modules/@mean-finance/call-simulation/src/",
            "@mean-finance/swappers/=node_modules/@mean-finance/swappers/",
            "@mean-finance/dca-v2-core/=node_modules/@mean-finance/dca-v2-core/",
            "@mean-finance/permit2-adapter/=node_modules/@mean-finance/permit2-adapter/src/",
            "@mean-finance/transformers/=node_modules/@mean-finance/transformers/solidity/contracts/transformers/",
            "@mean-finance/dca-v2-periphery/=node_modules/@mean-finance/dca-v2-periphery/",
            "@mean-finance/uniswap-v3-oracle/=node_modules/@mean-finance/uniswap-v3-oracle/",
            "@call-simulation/=node_modules/@mean-finance/call-simulation/src/",
            "@chainlink/=node_modules/@chainlink/",
            "@api3/=node_modules/@api3/",
            "@uniswap/=node_modules/@uniswap/",
            "keep3r-v2/=node_modules/keep3r-v2/",
            "base64-sol/=node_modules/base64-sol/",
            "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
            "forge-std/=lib/forge-std/src/",
            "@rari-capital/solmate/=lib/solmate/",
            "ds-test/=lib/solmate/lib/ds-test/src/",
            "solmate/=lib/solmate/src/",
            "sphinx/=lib/sphinx/packages/contracts/contracts/forge-std/src/"
          ]
        }
      }
    },
    "25dc9d3d421f903049c2209282739291": {
      "id": "25dc9d3d421f903049c2209282739291",
      "solcVersion": "0.8.22",
      "solcLongVersion": "0.8.22+commit.4fc1097e",
      "input": {
        "language": "Solidity",
        "sources": {
          "node_modules/@mean-finance/call-simulation/src/SimulationAdapter.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\nimport { IERC165 } from \"./interfaces/external/IERC165.sol\";\nimport { ISimulationAdapter } from \"./interfaces/ISimulationAdapter.sol\";\n\n/**\n * @title Simulation Adapter\n * @author Sam Bugs\n * @notice This contracts adds off-chain simulation capabilities to existing contracts. It works similarly to a\n *         multicall, but the state is not modified in each subcall.\n */\nabstract contract SimulationAdapter is IERC165, ISimulationAdapter {\n  /// @notice An error that contains a simulation's result\n  error SimulatedCall(SimulationResult result);\n\n  /// @inheritdoc IERC165\n  function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n    return _interfaceId == type(ISimulationAdapter).interfaceId || _interfaceId == type(IERC165).interfaceId;\n  }\n\n  /// @inheritdoc ISimulationAdapter\n  function simulate(bytes[] calldata _calls) external payable returns (SimulationResult[] memory _results) {\n    _results = new SimulationResult[](_calls.length);\n    for (uint256 i = 0; i < _calls.length; i++) {\n      _results[i] = _simulate(_calls[i]);\n    }\n    return _results;\n  }\n\n  /**\n   * @notice Executes a simulation and returns the result\n   * @param _call The call to simulate\n   * @return _simulationResult The simulation's result\n   */\n  function _simulate(bytes calldata _call) internal returns (SimulationResult memory _simulationResult) {\n    (bool _success, bytes memory _result) =\n    // solhint-disable-next-line avoid-low-level-calls\n     address(this).delegatecall(abi.encodeWithSelector(this.simulateAndRevert.selector, _call));\n    require(!_success, \"WTF? Should have failed!\");\n    // Move pointer to ignore selector\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      _result := add(_result, 0x04)\n    }\n    (_simulationResult) = abi.decode(_result, (SimulationResult));\n  }\n\n  /**\n   * @notice Executes a call agains this contract and reverts with the result\n   * @dev This is meant to be used internally, do not call!\n   * @param _call The call to simulate\n   */\n  function simulateAndRevert(bytes calldata _call) external payable {\n    uint256 _gasAtStart = gasleft();\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool _success, bytes memory _result) = address(this).delegatecall(_call);\n    uint256 _gasSpent = _gasAtStart - gasleft();\n    revert SimulatedCall(SimulationResult({ success: _success, result: _result, gasSpent: _gasSpent }));\n  }\n}\n"
          },
          "node_modules/@mean-finance/call-simulation/src/interfaces/ISimulationAdapter.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\ninterface ISimulationAdapter {\n  /// @notice A simulation's result\n  struct SimulationResult {\n    bool success;\n    bytes result;\n    uint256 gasSpent;\n  }\n\n  /**\n   * @notice Executes individual simulations against this contract but doesn't modify the state when doing so\n   * @dev This function is meant to be used for off-chain simulation and should not be called on-chain\n   * @param calls The calls to simulate\n   * @return results Each simulation result\n   */\n  function simulate(bytes[] calldata calls) external payable returns (SimulationResult[] memory results);\n}\n"
          },
          "node_modules/@mean-finance/call-simulation/src/interfaces/external/IERC165.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol';\nimport './IDCAPermissionManager.sol';\n\n/**\n * @title The interface for all state related queries\n * @notice These methods allow users to read the hubs's current values\n */\ninterface IDCAHubParameters {\n  /**\n   * @notice Returns how much will the amount to swap differ from the previous swap. f.e. if the returned value is -100, then the amount to swap will be 100 less than the swap just before it\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\n   * @param tokenA One of the pair's token\n   * @param tokenB The other of the pair's token\n   * @param swapIntervalMask The byte representation of the swap interval to check\n   * @param swapNumber The swap number to check\n   * @return swapDeltaAToB How much less of token A will the following swap require\n   * @return swapDeltaBToA How much less of token B will the following swap require\n   */\n  function swapAmountDelta(\n    address tokenA,\n    address tokenB,\n    bytes1 swapIntervalMask,\n    uint32 swapNumber\n  ) external view returns (uint128 swapDeltaAToB, uint128 swapDeltaBToA);\n\n  /**\n   * @notice Returns the sum of the ratios reported in all swaps executed until the given swap number\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\n   * @param tokenA One of the pair's token\n   * @param tokenB The other of the pair's token\n   * @param swapIntervalMask The byte representation of the swap interval to check\n   * @param swapNumber The swap number to check\n   * @return accumRatioAToB The sum of all ratios from A to B\n   * @return accumRatioBToA The sum of all ratios from B to A\n   */\n  function accumRatio(\n    address tokenA,\n    address tokenB,\n    bytes1 swapIntervalMask,\n    uint32 swapNumber\n  ) external view returns (uint256 accumRatioAToB, uint256 accumRatioBToA);\n\n  /**\n   * @notice Returns swapping information about a specific pair\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\n   * @param tokenA One of the pair's token\n   * @param tokenB The other of the pair's token\n   * @param swapIntervalMask The byte representation of the swap interval to check\n   * @return performedSwaps How many swaps have been executed\n   * @return nextAmountToSwapAToB How much of token A will be swapped on the next swap\n   * @return lastSwappedAt Timestamp of the last swap\n   * @return nextAmountToSwapBToA How much of token B will be swapped on the next swap\n   */\n  function swapData(\n    address tokenA,\n    address tokenB,\n    bytes1 swapIntervalMask\n  )\n    external\n    view\n    returns (\n      uint32 performedSwaps,\n      uint224 nextAmountToSwapAToB,\n      uint32 lastSwappedAt,\n      uint224 nextAmountToSwapBToA\n    );\n\n  /**\n   * @notice Returns the byte representation of the set of actice swap intervals for the given pair\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\n   * @param tokenA The smaller of the pair's token\n   * @param tokenB The other of the pair's token\n   * @return The byte representation of the set of actice swap intervals\n   */\n  function activeSwapIntervals(address tokenA, address tokenB) external view returns (bytes1);\n\n  /**\n   * @notice Returns how much of the hub's token balance belongs to the platform\n   * @param token The token to check\n   * @return The amount that belongs to the platform\n   */\n  function platformBalance(address token) external view returns (uint256);\n}\n\n/**\n * @title The interface for all position related matters\n * @notice These methods allow users to create, modify and terminate their positions\n */\ninterface IDCAHubPositionHandler {\n  /// @notice The position of a certain user\n  struct UserPosition {\n    // The token that the user deposited and will be swapped in exchange for \"to\"\n    IERC20Metadata from;\n    // The token that the user will get in exchange for their \"from\" tokens in each swap\n    IERC20Metadata to;\n    // How frequently the position's swaps should be executed\n    uint32 swapInterval;\n    // How many swaps were executed since deposit, last modification, or last withdraw\n    uint32 swapsExecuted;\n    // How many \"to\" tokens can currently be withdrawn\n    uint256 swapped;\n    // How many swaps left the position has to execute\n    uint32 swapsLeft;\n    // How many \"from\" tokens there are left to swap\n    uint256 remaining;\n    // How many \"from\" tokens need to be traded in each swap\n    uint120 rate;\n  }\n\n  /// @notice A list of positions that all have the same `to` token\n  struct PositionSet {\n    // The `to` token\n    address token;\n    // The position ids\n    uint256[] positionIds;\n  }\n\n  /**\n   * @notice Emitted when a position is terminated\n   * @param user The address of the user that terminated the position\n   * @param recipientUnswapped The address of the user that will receive the unswapped tokens\n   * @param recipientSwapped The address of the user that will receive the swapped tokens\n   * @param positionId The id of the position that was terminated\n   * @param returnedUnswapped How many \"from\" tokens were returned to the caller\n   * @param returnedSwapped How many \"to\" tokens were returned to the caller\n   */\n  event Terminated(\n    address indexed user,\n    address indexed recipientUnswapped,\n    address indexed recipientSwapped,\n    uint256 positionId,\n    uint256 returnedUnswapped,\n    uint256 returnedSwapped\n  );\n\n  /**\n   * @notice Emitted when a position is created\n   * @param depositor The address of the user that creates the position\n   * @param owner The address of the user that will own the position\n   * @param positionId The id of the position that was created\n   * @param fromToken The address of the \"from\" token\n   * @param toToken The address of the \"to\" token\n   * @param swapInterval How frequently the position's swaps should be executed\n   * @param rate How many \"from\" tokens need to be traded in each swap\n   * @param startingSwap The number of the swap when the position will be executed for the first time\n   * @param lastSwap The number of the swap when the position will be executed for the last time\n   * @param permissions The permissions defined for the position\n   */\n  event Deposited(\n    address indexed depositor,\n    address indexed owner,\n    uint256 positionId,\n    address fromToken,\n    address toToken,\n    uint32 swapInterval,\n    uint120 rate,\n    uint32 startingSwap,\n    uint32 lastSwap,\n    IDCAPermissionManager.PermissionSet[] permissions\n  );\n\n  /**\n   * @notice Emitted when a position is created and extra data is provided\n   * @param positionId The id of the position that was created\n   * @param data The extra data that was provided\n   */\n  event Miscellaneous(uint256 positionId, bytes data);\n\n  /**\n   * @notice Emitted when a user withdraws all swapped tokens from a position\n   * @param withdrawer The address of the user that executed the withdraw\n   * @param recipient The address of the user that will receive the withdrawn tokens\n   * @param positionId The id of the position that was affected\n   * @param token The address of the withdrawn tokens. It's the same as the position's \"to\" token\n   * @param amount The amount that was withdrawn\n   */\n  event Withdrew(address indexed withdrawer, address indexed recipient, uint256 positionId, address token, uint256 amount);\n\n  /**\n   * @notice Emitted when a user withdraws all swapped tokens from many positions\n   * @param withdrawer The address of the user that executed the withdraws\n   * @param recipient The address of the user that will receive the withdrawn tokens\n   * @param positions The positions to withdraw from\n   * @param withdrew The total amount that was withdrawn from each token\n   */\n  event WithdrewMany(address indexed withdrawer, address indexed recipient, PositionSet[] positions, uint256[] withdrew);\n\n  /**\n   * @notice Emitted when a position is modified\n   * @param user The address of the user that modified the position\n   * @param positionId The id of the position that was modified\n   * @param rate How many \"from\" tokens need to be traded in each swap\n   * @param startingSwap The number of the swap when the position will be executed for the first time\n   * @param lastSwap The number of the swap when the position will be executed for the last time\n   */\n  event Modified(address indexed user, uint256 positionId, uint120 rate, uint32 startingSwap, uint32 lastSwap);\n\n  /// @notice Thrown when a user tries to create a position with the same `from` & `to`\n  error InvalidToken();\n\n  /// @notice Thrown when a user tries to create a position with a swap interval that is not allowed\n  error IntervalNotAllowed();\n\n  /// @notice Thrown when a user tries operate on a position that doesn't exist (it might have been already terminated)\n  error InvalidPosition();\n\n  /// @notice Thrown when a user tries operate on a position that they don't have access to\n  error UnauthorizedCaller();\n\n  /// @notice Thrown when a user tries to create a position with zero swaps\n  error ZeroSwaps();\n\n  /// @notice Thrown when a user tries to create a position with zero funds\n  error ZeroAmount();\n\n  /// @notice Thrown when a user tries to withdraw a position whose `to` token doesn't match the specified one\n  error PositionDoesNotMatchToken();\n\n  /// @notice Thrown when a user tries create or modify a position with an amount too big\n  error AmountTooBig();\n\n  /**\n   * @notice Returns the permission manager contract\n   * @return The contract itself\n   */\n  function permissionManager() external view returns (IDCAPermissionManager);\n\n  /**\n   * @notice Returns total created positions\n   * @return The total created positions\n   */\n  function totalCreatedPositions() external view returns (uint256);\n\n  /**\n   * @notice Returns a user position\n   * @param positionId The id of the position\n   * @return position The position itself\n   */\n  function userPosition(uint256 positionId) external view returns (UserPosition memory position);\n\n  /**\n   * @notice Creates a new position\n   * @dev Will revert:\n   *      - With ZeroAddress if from, to or owner are zero\n   *      - With InvalidToken if from == to\n   *      - With ZeroAmount if amount is zero\n   *      - With AmountTooBig if amount is too big\n   *      - With ZeroSwaps if amountOfSwaps is zero\n   *      - With IntervalNotAllowed if swapInterval is not allowed\n   * @param from The address of the \"from\" token\n   * @param to The address of the \"to\" token\n   * @param amount How many \"from\" tokens will be swapped in total\n   * @param amountOfSwaps How many swaps to execute for this position\n   * @param swapInterval How frequently the position's swaps should be executed\n   * @param owner The address of the owner of the position being created\n   * @param permissions Extra permissions to add to the position. Can be empty\n   * @return positionId The id of the created position\n   */\n  function deposit(\n    address from,\n    address to,\n    uint256 amount,\n    uint32 amountOfSwaps,\n    uint32 swapInterval,\n    address owner,\n    IDCAPermissionManager.PermissionSet[] calldata permissions\n  ) external returns (uint256 positionId);\n\n  /**\n   * @notice Creates a new position\n   * @dev Will revert:\n   *      - With ZeroAddress if from, to or owner are zero\n   *      - With InvalidToken if from == to\n   *      - With ZeroAmount if amount is zero\n   *      - With AmountTooBig if amount is too big\n   *      - With ZeroSwaps if amountOfSwaps is zero\n   *      - With IntervalNotAllowed if swapInterval is not allowed\n   * @param from The address of the \"from\" token\n   * @param to The address of the \"to\" token\n   * @param amount How many \"from\" tokens will be swapped in total\n   * @param amountOfSwaps How many swaps to execute for this position\n   * @param swapInterval How frequently the position's swaps should be executed\n   * @param owner The address of the owner of the position being created\n   * @param permissions Extra permissions to add to the position. Can be empty\n   * @param miscellaneous Bytes that will be emitted, and associated with the position\n   * @return positionId The id of the created position\n   */\n  function deposit(\n    address from,\n    address to,\n    uint256 amount,\n    uint32 amountOfSwaps,\n    uint32 swapInterval,\n    address owner,\n    IDCAPermissionManager.PermissionSet[] calldata permissions,\n    bytes calldata miscellaneous\n  ) external returns (uint256 positionId);\n\n  /**\n   * @notice Withdraws all swapped tokens from a position to a recipient\n   * @dev Will revert:\n   *      - With InvalidPosition if positionId is invalid\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\n   *      - With ZeroAddress if recipient is zero\n   * @param positionId The position's id\n   * @param recipient The address to withdraw swapped tokens to\n   * @return swapped How much was withdrawn\n   */\n  function withdrawSwapped(uint256 positionId, address recipient) external returns (uint256 swapped);\n\n  /**\n   * @notice Withdraws all swapped tokens from multiple positions\n   * @dev Will revert:\n   *      - With InvalidPosition if any of the position ids are invalid\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position to any of the given positions\n   *      - With ZeroAddress if recipient is zero\n   *      - With PositionDoesNotMatchToken if any of the positions do not match the token in their position set\n   * @param positions A list positions, grouped by `to` token\n   * @param recipient The address to withdraw swapped tokens to\n   * @return withdrawn How much was withdrawn for each token\n   */\n  function withdrawSwappedMany(PositionSet[] calldata positions, address recipient) external returns (uint256[] memory withdrawn);\n\n  /**\n   * @notice Takes the unswapped balance, adds the new deposited funds and modifies the position so that\n   * it is executed in newSwaps swaps\n   * @dev Will revert:\n   *      - With InvalidPosition if positionId is invalid\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\n   *      - With AmountTooBig if amount is too big\n   * @param positionId The position's id\n   * @param amount Amount of funds to add to the position\n   * @param newSwaps The new amount of swaps\n   */\n  function increasePosition(\n    uint256 positionId,\n    uint256 amount,\n    uint32 newSwaps\n  ) external;\n\n  /**\n   * @notice Withdraws the specified amount from the unswapped balance and modifies the position so that\n   * it is executed in newSwaps swaps\n   * @dev Will revert:\n   *      - With InvalidPosition if positionId is invalid\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\n   *      - With ZeroSwaps if newSwaps is zero and amount is not the total unswapped balance\n   * @param positionId The position's id\n   * @param amount Amount of funds to withdraw from the position\n   * @param newSwaps The new amount of swaps\n   * @param recipient The address to send tokens to\n   */\n  function reducePosition(\n    uint256 positionId,\n    uint256 amount,\n    uint32 newSwaps,\n    address recipient\n  ) external;\n\n  /**\n   * @notice Terminates the position and sends all unswapped and swapped balance to the specified recipients\n   * @dev Will revert:\n   *      - With InvalidPosition if positionId is invalid\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\n   *      - With ZeroAddress if recipientUnswapped or recipientSwapped is zero\n   * @param positionId The position's id\n   * @param recipientUnswapped The address to withdraw unswapped tokens to\n   * @param recipientSwapped The address to withdraw swapped tokens to\n   * @return unswapped The unswapped balance sent to `recipientUnswapped`\n   * @return swapped The swapped balance sent to `recipientSwapped`\n   */\n  function terminate(\n    uint256 positionId,\n    address recipientUnswapped,\n    address recipientSwapped\n  ) external returns (uint256 unswapped, uint256 swapped);\n}\n\n/**\n * @title The interface for all swap related matters\n * @notice These methods allow users to get information about the next swap, and how to execute it\n */\ninterface IDCAHubSwapHandler {\n  /// @notice Information about a swap\n  struct SwapInfo {\n    // The tokens involved in the swap\n    TokenInSwap[] tokens;\n    // The pairs involved in the swap\n    PairInSwap[] pairs;\n  }\n\n  /// @notice Information about a token's role in a swap\n  struct TokenInSwap {\n    // The token's address\n    address token;\n    // How much will be given of this token as a reward\n    uint256 reward;\n    // How much of this token needs to be provided by swapper\n    uint256 toProvide;\n    // How much of this token will be paid to the platform\n    uint256 platformFee;\n  }\n\n  /// @notice Information about a pair in a swap\n  struct PairInSwap {\n    // The address of one of the tokens\n    address tokenA;\n    // The address of the other token\n    address tokenB;\n    // The total amount of token A swapped in this pair\n    uint256 totalAmountToSwapTokenA;\n    // The total amount of token B swapped in this pair\n    uint256 totalAmountToSwapTokenB;\n    // How much is 1 unit of token A when converted to B\n    uint256 ratioAToB;\n    // How much is 1 unit of token B when converted to A\n    uint256 ratioBToA;\n    // The swap intervals involved in the swap, represented as a byte\n    bytes1 intervalsInSwap;\n  }\n\n  /// @notice A pair of tokens, represented by their indexes in an array\n  struct PairIndexes {\n    // The index of the token A\n    uint8 indexTokenA;\n    // The index of the token B\n    uint8 indexTokenB;\n  }\n\n  /**\n   * @notice Emitted when a swap is executed\n   * @param sender The address of the user that initiated the swap\n   * @param rewardRecipient The address that received the reward\n   * @param callbackHandler The address that executed the callback\n   * @param swapInformation All information related to the swap\n   * @param borrowed How much was borrowed\n   * @param fee The swap fee at the moment of the swap\n   */\n  event Swapped(\n    address indexed sender,\n    address indexed rewardRecipient,\n    address indexed callbackHandler,\n    SwapInfo swapInformation,\n    uint256[] borrowed,\n    uint32 fee\n  );\n\n  /// @notice Thrown when pairs indexes are not sorted correctly\n  error InvalidPairs();\n\n  /// @notice Thrown when trying to execute a swap, but there is nothing to swap\n  error NoSwapsToExecute();\n\n  /**\n   * @notice Returns all information related to the next swap\n   * @dev Will revert with:\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\n   * @param tokens The tokens involved in the next swap\n   * @param pairs The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\n   * @param calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\n   *        the possibility to calculate the next swap information for privileged and non-privileged accounts\n   * @param oracleData Bytes to send to the oracle when executing a quote\n   * @return swapInformation The information about the next swap\n   */\n  function getNextSwapInfo(\n    address[] calldata tokens,\n    PairIndexes[] calldata pairs,\n    bool calculatePrivilegedAvailability,\n    bytes calldata oracleData\n  ) external view returns (SwapInfo memory swapInformation);\n\n  /**\n   * @notice Executes a flash swap\n   * @dev Will revert with:\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\n   *      - With Paused if swaps are paused by protocol\n   *      - With NoSwapsToExecute if there are no swaps to execute for the given pairs\n   *      - With LiquidityNotReturned if the required tokens were not back during the callback\n   * @param tokens The tokens involved in the next swap\n   * @param pairsToSwap The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\n   * @param rewardRecipient The address to send the reward to\n   * @param callbackHandler Address to call for callback (and send the borrowed tokens to)\n   * @param borrow How much to borrow of each of the tokens in tokens. The amount must match the position of the token in the tokens array\n   * @param callbackData Bytes to send to the caller during the callback\n   * @param oracleData Bytes to send to the oracle when executing a quote\n   * @return Information about the executed swap\n   */\n  function swap(\n    address[] calldata tokens,\n    PairIndexes[] calldata pairsToSwap,\n    address rewardRecipient,\n    address callbackHandler,\n    uint256[] calldata borrow,\n    bytes calldata callbackData,\n    bytes calldata oracleData\n  ) external returns (SwapInfo memory);\n}\n\n/**\n * @title The interface for handling all configuration\n * @notice This contract will manage configuration that affects all pairs, swappers, etc\n */\ninterface IDCAHubConfigHandler {\n  /**\n   * @notice Emitted when a new oracle is set\n   * @param oracle The new oracle contract\n   */\n  event OracleSet(ITokenPriceOracle oracle);\n\n  /**\n   * @notice Emitted when a new swap fee is set\n   * @param feeSet The new swap fee\n   */\n  event SwapFeeSet(uint32 feeSet);\n\n  /**\n   * @notice Emitted when new swap intervals are allowed\n   * @param swapIntervals The new swap intervals\n   */\n  event SwapIntervalsAllowed(uint32[] swapIntervals);\n\n  /**\n   * @notice Emitted when some swap intervals are no longer allowed\n   * @param swapIntervals The swap intervals that are no longer allowed\n   */\n  event SwapIntervalsForbidden(uint32[] swapIntervals);\n\n  /**\n   * @notice Emitted when a new platform fee ratio is set\n   * @param platformFeeRatio The new platform fee ratio\n   */\n  event PlatformFeeRatioSet(uint16 platformFeeRatio);\n\n  /**\n   * @notice Emitted when allowed states of tokens are updated\n   * @param tokens Array of updated tokens\n   * @param allowed Array of new allow state per token were allowed[i] is the updated state of tokens[i]\n   */\n  event TokensAllowedUpdated(address[] tokens, bool[] allowed);\n\n  /// @notice Thrown when trying to interact with an unallowed token\n  error UnallowedToken();\n\n  /// @notice Thrown when set allowed tokens input is not valid\n  error InvalidAllowedTokensInput();\n\n  /// @notice Thrown when trying to set a fee higher than the maximum allowed\n  error HighFee();\n\n  /// @notice Thrown when trying to set a fee that is not multiple of 100\n  error InvalidFee();\n\n  /// @notice Thrown when trying to set a fee ratio that is higher that the maximum allowed\n  error HighPlatformFeeRatio();\n\n  /**\n   * @notice Returns the max fee ratio that can be set\n   * @dev Cannot be modified\n   * @return The maximum possible value\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function MAX_PLATFORM_FEE_RATIO() external view returns (uint16);\n\n  /**\n   * @notice Returns the fee charged on swaps\n   * @return swapFee The fee itself\n   */\n  function swapFee() external view returns (uint32 swapFee);\n\n  /**\n   * @notice Returns the price oracle contract\n   * @return oracle The contract itself\n   */\n  function oracle() external view returns (ITokenPriceOracle oracle);\n\n  /**\n   * @notice Returns how much will the platform take from the fees collected in swaps\n   * @return The current ratio\n   */\n  function platformFeeRatio() external view returns (uint16);\n\n  /**\n   * @notice Returns the max fee that can be set for swaps\n   * @dev Cannot be modified\n   * @return maxFee The maximum possible fee\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function MAX_FEE() external view returns (uint32 maxFee);\n\n  /**\n   * @notice Returns a byte that represents allowed swap intervals\n   * @return allowedSwapIntervals The allowed swap intervals\n   */\n  function allowedSwapIntervals() external view returns (bytes1 allowedSwapIntervals);\n\n  /**\n   * @notice Returns if a token is currently allowed or not\n   * @return Allowed state of token\n   */\n  function allowedTokens(address token) external view returns (bool);\n\n  /**\n   * @notice Returns token's magnitude (10**decimals)\n   * @return Stored magnitude for token\n   */\n  function tokenMagnitude(address token) external view returns (uint120);\n\n  /**\n   * @notice Returns whether swaps and deposits are currently paused\n   * @return isPaused Whether swaps and deposits are currently paused\n   */\n  function paused() external view returns (bool isPaused);\n\n  /**\n   * @notice Sets a new swap fee\n   * @dev Will revert with HighFee if the fee is higher than the maximum\n   * @dev Will revert with InvalidFee if the fee is not multiple of 100\n   * @param fee The new swap fee\n   */\n  function setSwapFee(uint32 fee) external;\n\n  /**\n   * @notice Sets a new price oracle\n   * @dev Will revert with ZeroAddress if the zero address is passed\n   * @param oracle The new oracle contract\n   */\n  function setOracle(ITokenPriceOracle oracle) external;\n\n  /**\n   * @notice Sets a new platform fee ratio\n   * @dev Will revert with HighPlatformFeeRatio if given ratio is too high\n   * @param platformFeeRatio The new ratio\n   */\n  function setPlatformFeeRatio(uint16 platformFeeRatio) external;\n\n  /**\n   * @notice Adds new swap intervals to the allowed list\n   * @param swapIntervals The new swap intervals\n   */\n  function addSwapIntervalsToAllowedList(uint32[] calldata swapIntervals) external;\n\n  /**\n   * @notice Removes some swap intervals from the allowed list\n   * @param swapIntervals The swap intervals to remove\n   */\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata swapIntervals) external;\n\n  /// @notice Pauses all swaps and deposits\n  function pause() external;\n\n  /// @notice Unpauses all swaps and deposits\n  function unpause() external;\n}\n\n/**\n * @title The interface for handling platform related actions\n * @notice This contract will handle all actions that affect the platform in some way\n */\ninterface IDCAHubPlatformHandler {\n  /**\n   * @notice Emitted when someone withdraws from the paltform balance\n   * @param sender The address of the user that initiated the withdraw\n   * @param recipient The address that received the withdraw\n   * @param amounts The tokens (and the amount) that were withdrawn\n   */\n  event WithdrewFromPlatform(address indexed sender, address indexed recipient, IDCAHub.AmountOfToken[] amounts);\n\n  /**\n   * @notice Withdraws tokens from the platform balance\n   * @param amounts The amounts to withdraw\n   * @param recipient The address that will receive the tokens\n   */\n  function withdrawFromPlatformBalance(IDCAHub.AmountOfToken[] calldata amounts, address recipient) external;\n}\n\ninterface IDCAHub is IDCAHubParameters, IDCAHubConfigHandler, IDCAHubSwapHandler, IDCAHubPositionHandler, IDCAHubPlatformHandler {\n  /// @notice Specifies an amount of a token. For example to determine how much to borrow from certain tokens\n  struct AmountOfToken {\n    // The tokens' address\n    address token;\n    // How much to borrow or withdraw of the specified token\n    uint256 amount;\n  }\n\n  /// @notice Thrown when one of the parameters is a zero address\n  error ZeroAddress();\n\n  /// @notice Thrown when the expected liquidity is not returned in flash swaps\n  error LiquidityNotReturned();\n\n  /// @notice Thrown when a list of token pairs is not sorted, or if there are duplicates\n  error InvalidTokens();\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHubSwapCallee.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport './IDCAHub.sol';\n\n/**\n * @title The interface for handling flash swaps\n * @notice Users that want to execute flash swaps must implement this interface\n */\ninterface IDCAHubSwapCallee {\n  // solhint-disable-next-line func-name-mixedcase\n  function DCAHubSwapCall(\n    address sender,\n    IDCAHub.TokenInSwap[] calldata tokens,\n    uint256[] calldata borrowed,\n    bytes calldata data\n  ) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol';\n\ninterface IERC721BasicEnumerable {\n  /**\n   * @notice Count NFTs tracked by this contract\n   * @return A count of valid NFTs tracked by this contract, where each one of\n   *         them has an assigned and queryable owner not equal to the zero address\n   */\n  function totalSupply() external view returns (uint256);\n}\n\n/**\n * @title The interface for all permission related matters\n * @notice These methods allow users to set and remove permissions to their positions\n */\ninterface IDCAPermissionManager is IERC721, IERC721BasicEnumerable {\n  /// @notice Set of possible permissions\n  enum Permission {\n    INCREASE,\n    REDUCE,\n    WITHDRAW,\n    TERMINATE\n  }\n\n  /// @notice A set of permissions for a specific operator\n  struct PermissionSet {\n    // The address of the operator\n    address operator;\n    // The permissions given to the overator\n    Permission[] permissions;\n  }\n\n  /// @notice A collection of permissions sets for a specific position\n  struct PositionPermissions {\n    // The id of the token\n    uint256 tokenId;\n    // The permissions to assign to the position\n    PermissionSet[] permissionSets;\n  }\n\n  /**\n   * @notice Emitted when permissions for a token are modified\n   * @param tokenId The id of the token\n   * @param permissions The set of permissions that were updated\n   */\n  event Modified(uint256 tokenId, PermissionSet[] permissions);\n\n  /**\n   * @notice Emitted when the address for a new descritor is set\n   * @param descriptor The new descriptor contract\n   */\n  event NFTDescriptorSet(IDCAHubPositionDescriptor descriptor);\n\n  /// @notice Thrown when a user tries to set the hub, once it was already set\n  error HubAlreadySet();\n\n  /// @notice Thrown when a user provides a zero address when they shouldn't\n  error ZeroAddress();\n\n  /// @notice Thrown when a user calls a method that can only be executed by the hub\n  error OnlyHubCanExecute();\n\n  /// @notice Thrown when a user tries to modify permissions for a token they do not own\n  error NotOwner();\n\n  /// @notice Thrown when a user tries to execute a permit with an expired deadline\n  error ExpiredDeadline();\n\n  /// @notice Thrown when a user tries to execute a permit with an invalid signature\n  error InvalidSignature();\n\n  /**\n   * @notice The permit typehash used in the permit signature\n   * @return The typehash for the permit\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  /**\n   * @notice The permit typehash used in the permission permit signature\n   * @return The typehash for the permission permit\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function PERMISSION_PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  /**\n   * @notice The permit typehash used in the multi permission permit signature\n   * @return The typehash for the multi permission permit\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function MULTI_PERMISSION_PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  /**\n   * @notice The permit typehash used in the permission permit signature\n   * @return The typehash for the permission set\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function PERMISSION_SET_TYPEHASH() external pure returns (bytes32);\n\n  /**\n   * @notice The permit typehash used in the multi permission permit signature\n   * @return The typehash for the position permissions\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function POSITION_PERMISSIONS_TYPEHASH() external pure returns (bytes32);\n\n  /**\n   * @notice The domain separator used in the permit signature\n   * @return The domain seperator used in encoding of permit signature\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  /**\n   * @notice Returns the NFT descriptor contract\n   * @return The contract for the NFT descriptor\n   */\n  function nftDescriptor() external returns (IDCAHubPositionDescriptor);\n\n  /**\n   * @notice Returns the address of the DCA Hub\n   * @return The address of the DCA Hub\n   */\n  function hub() external returns (address);\n\n  /**\n   * @notice Returns the next nonce to use for a given user\n   * @param user The address of the user\n   * @return nonce The next nonce to use\n   */\n  function nonces(address user) external returns (uint256 nonce);\n\n  /**\n   * @notice Returns whether the given address has the permission for the given token\n   * @param id The id of the token to check\n   * @param account The address of the user to check\n   * @param permission The permission to check\n   * @return Whether the user has the permission or not\n   */\n  function hasPermission(\n    uint256 id,\n    address account,\n    Permission permission\n  ) external view returns (bool);\n\n  /**\n   * @notice Returns whether the given address has the permissions for the given token\n   * @param id The id of the token to check\n   * @param account The address of the user to check\n   * @param permissions The permissions to check\n   * @return hasPermissions Whether the user has each permission or not\n   */\n  function hasPermissions(\n    uint256 id,\n    address account,\n    Permission[] calldata permissions\n  ) external view returns (bool[] memory hasPermissions);\n\n  /**\n   * @notice Sets the address for the hub\n   * @dev Can only be successfully executed once. Once it's set, it can be modified again\n   *      Will revert:\n   *      - With ZeroAddress if address is zero\n   *      - With HubAlreadySet if the hub has already been set\n   * @param hub The address to set for the hub\n   */\n  function setHub(address hub) external;\n\n  /**\n   * @notice Mints a new NFT with the given id, and sets the permissions for it\n   * @dev Will revert with OnlyHubCanExecute if the caller is not the hub\n   * @param id The id of the new NFT\n   * @param owner The owner of the new NFT\n   * @param permissions Permissions to set for the new NFT\n   */\n  function mint(\n    uint256 id,\n    address owner,\n    PermissionSet[] calldata permissions\n  ) external;\n\n  /**\n   * @notice Burns the NFT with the given id, and clears all permissions\n   * @dev Will revert with OnlyHubCanExecute if the caller is not the hub\n   * @param id The token's id\n   */\n  function burn(uint256 id) external;\n\n  /**\n   * @notice Sets new permissions for the given position\n   * @dev Will revert with NotOwner if the caller is not the token's owner.\n   *      Operators that are not part of the given permission sets do not see their permissions modified.\n   *      In order to remove permissions to an operator, provide an empty list of permissions for them\n   * @param id The token's id\n   * @param permissions A list of permission sets\n   */\n  function modify(uint256 id, PermissionSet[] calldata permissions) external;\n\n  /**\n   * @notice Sets new permissions for the given positions\n   * @dev This is basically the same as executing multiple `modify`\n   * @param permissions A list of position permissions to set\n   */\n  function modifyMany(PositionPermissions[] calldata permissions) external;\n\n  /**\n   * @notice Approves spending of a specific token ID by spender via signature\n   * @param spender The account that is being approved\n   * @param tokenId The ID of the token that is being approved for spending\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function permit(\n    address spender,\n    uint256 tokenId,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @notice Sets permissions via signature\n   * @dev This method works similarly to `modifyMany`, but instead of being executed by the owner, it can be set by signature\n   * @param permissions The permissions to set for the different positions\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function multiPermissionPermit(\n    PositionPermissions[] calldata permissions,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @notice Sets permissions via signature\n   * @dev This method works similarly to `modify`, but instead of being executed by the owner, it can be set my signature\n   * @param permissions The permissions to set\n   * @param tokenId The token's id\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function permissionPermit(\n    PermissionSet[] calldata permissions,\n    uint256 tokenId,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @notice Sets a new NFT descriptor\n   * @dev Will revert with ZeroAddress if address is zero\n   * @param descriptor The new NFT descriptor contract\n   */\n  function setNFTDescriptor(IDCAHubPositionDescriptor descriptor) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-core/contracts/libraries/Intervals.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\n/// @title Intervals library\n/// @notice Provides functions to easily convert from swap intervals to their byte representation and viceversa\nlibrary Intervals {\n  /// @notice Thrown when a user tries convert and invalid interval to a byte representation\n  error InvalidInterval();\n\n  /// @notice Thrown when a user tries convert and invalid byte representation to an interval\n  error InvalidMask();\n\n  /// @notice Takes a swap interval and returns its byte representation\n  /// @dev Will revert with InvalidInterval if the swap interval is not valid\n  /// @param _swapInterval The swap interval\n  /// @return The interval's byte representation\n  function intervalToMask(uint32 _swapInterval) internal pure returns (bytes1) {\n    if (_swapInterval == 1 minutes) return 0x01;\n    if (_swapInterval == 5 minutes) return 0x02;\n    if (_swapInterval == 15 minutes) return 0x04;\n    if (_swapInterval == 30 minutes) return 0x08;\n    if (_swapInterval == 1 hours) return 0x10;\n    if (_swapInterval == 4 hours) return 0x20;\n    if (_swapInterval == 1 days) return 0x40;\n    if (_swapInterval == 1 weeks) return 0x80;\n    revert InvalidInterval();\n  }\n\n  /// @notice Takes a byte representation of a swap interval and returns the swap interval\n  /// @dev Will revert with InvalidMask if the byte representation is not valid\n  /// @param _mask The byte representation\n  /// @return The swap interval\n  function maskToInterval(bytes1 _mask) internal pure returns (uint32) {\n    if (_mask == 0x01) return 1 minutes;\n    if (_mask == 0x02) return 5 minutes;\n    if (_mask == 0x04) return 15 minutes;\n    if (_mask == 0x08) return 30 minutes;\n    if (_mask == 0x10) return 1 hours;\n    if (_mask == 0x20) return 4 hours;\n    if (_mask == 0x40) return 1 days;\n    if (_mask == 0x80) return 1 weeks;\n    revert InvalidMask();\n  }\n\n  /// @notice Takes a byte representation of a set of swap intervals and returns which ones are in the set\n  /// @dev Will always return an array of length 8, with zeros at the end if there are less than 8 intervals\n  /// @param _byte The byte representation\n  /// @return _intervals The swap intervals in the set\n  function intervalsInByte(bytes1 _byte) internal pure returns (uint32[] memory _intervals) {\n    _intervals = new uint32[](8);\n    uint8 _index;\n    bytes1 _mask = 0x01;\n    while (_byte >= _mask && _mask > 0) {\n      if (_byte & _mask != 0) {\n        _intervals[_index++] = maskToInterval(_mask);\n      }\n      _mask <<= 1;\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-core/contracts/libraries/TokenSorting.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >0.6;\n\n/// @title TokenSorting library\n/// @notice Provides functions to sort tokens easily\nlibrary TokenSorting {\n  /// @notice Takes two tokens, and returns them sorted\n  /// @param _tokenA One of the tokens\n  /// @param _tokenB The other token\n  /// @return __tokenA The first of the tokens\n  /// @return __tokenB The second of the tokens\n  function sortTokens(address _tokenA, address _tokenB) internal pure returns (address __tokenA, address __tokenB) {\n    (__tokenA, __tokenB) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/access/AccessControl.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/Multicall.sol';\nimport '@mean-finance/call-simulation/contracts/SimulationAdapter.sol';\nimport '../interfaces/IDCAFeeManager.sol';\nimport '../utils/SwapAdapter.sol';\n\ncontract DCAFeeManager is SwapAdapter, AccessControl, Multicall, IDCAFeeManager, SimulationAdapter {\n  bytes32 public constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN_ROLE');\n  bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n\n  using SafeERC20 for IERC20;\n  using Address for address payable;\n\n  constructor(address _superAdmin, address[] memory _initialAdmins) SwapAdapter() {\n    if (_superAdmin == address(0)) revert ZeroAddress();\n    // We are setting the super admin role as its own admin so we can transfer it\n    _setRoleAdmin(SUPER_ADMIN_ROLE, SUPER_ADMIN_ROLE);\n    _setRoleAdmin(ADMIN_ROLE, SUPER_ADMIN_ROLE);\n    _grantRole(SUPER_ADMIN_ROLE, _superAdmin);\n    for (uint256 i; i < _initialAdmins.length; i++) {\n      _grantRole(ADMIN_ROLE, _initialAdmins[i]);\n    }\n  }\n\n  receive() external payable {}\n\n  /// @inheritdoc IDCAFeeManager\n  function runSwapsAndTransferMany(RunSwapsAndTransferManyParams calldata _parameters) public payable onlyRole(ADMIN_ROLE) {\n    // Approve whatever is necessary\n    for (uint256 i = 0; i < _parameters.allowanceTargets.length; ++i) {\n      AllowanceTarget memory _allowance = _parameters.allowanceTargets[i];\n      _maxApproveSpender(_allowance.token, _allowance.allowanceTarget);\n    }\n\n    // Execute swaps\n    for (uint256 i = 0; i < _parameters.swaps.length; ++i) {\n      SwapContext memory _context = _parameters.swapContext[i];\n      _executeSwap(_parameters.swappers[_context.swapperIndex], _parameters.swaps[i], _context.value);\n    }\n\n    // Transfer out whatever was left in the contract\n    for (uint256 i = 0; i < _parameters.transferOutBalance.length; ++i) {\n      TransferOutBalance memory _transferOutBalance = _parameters.transferOutBalance[i];\n      _sendBalanceOnContractToRecipient(_transferOutBalance.token, _transferOutBalance.recipient);\n    }\n  }\n\n  /// @inheritdoc IDCAFeeManager\n  function withdrawFromPlatformBalance(\n    IDCAHub _hub,\n    IDCAHub.AmountOfToken[] calldata _amountToWithdraw,\n    address _recipient\n  ) external onlyRole(ADMIN_ROLE) {\n    _hub.withdrawFromPlatformBalance(_amountToWithdraw, _recipient);\n  }\n\n  /// @inheritdoc IDCAFeeManager\n  function withdrawFromBalance(IDCAHub.AmountOfToken[] calldata _amountToWithdraw, address _recipient) external onlyRole(ADMIN_ROLE) {\n    for (uint256 i = 0; i < _amountToWithdraw.length; ++i) {\n      IDCAHub.AmountOfToken memory _amountOfToken = _amountToWithdraw[i];\n      if (_amountOfToken.amount == type(uint256).max) {\n        _sendBalanceOnContractToRecipient(_amountOfToken.token, _recipient);\n      } else {\n        _sendToRecipient(_amountOfToken.token, _amountOfToken.amount, _recipient);\n      }\n    }\n  }\n\n  /// @inheritdoc IDCAFeeManager\n  function revokeAllowances(RevokeAction[] calldata _revokeActions) external onlyRole(ADMIN_ROLE) {\n    _revokeAllowances(_revokeActions);\n  }\n\n  /// @inheritdoc IDCAFeeManager\n  function availableBalances(IDCAHub _hub, address[] calldata _tokens) external view returns (AvailableBalance[] memory _balances) {\n    _balances = new AvailableBalance[](_tokens.length);\n    for (uint256 i = 0; i < _tokens.length; i++) {\n      address _token = _tokens[i];\n      _balances[i] = AvailableBalance({\n        token: _token,\n        platformBalance: _hub.platformBalance(_token),\n        feeManagerBalance: IERC20(_token).balanceOf(address(this))\n      });\n    }\n  }\n\n  function supportsInterface(bytes4 _interfaceId) public view virtual override(AccessControl, SimulationAdapter) returns (bool) {\n    return SimulationAdapter.supportsInterface(_interfaceId) || AccessControl.supportsInterface(_interfaceId);\n  }\n\n  function getPositionKey(address _from, address _to) public pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_from, _to));\n  }\n\n  /// @dev This version does not check the swapper registry at all\n  function _maxApproveSpender(IERC20 _token, address _spender) internal {\n    _token.forceApprove(_spender, type(uint256).max);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport './DCAHubCompanionLibrariesHandler.sol';\nimport './DCAHubCompanionHubProxyHandler.sol';\nimport '../utils/BaseCompanion.sol';\n\ncontract DCAHubCompanion is DCAHubCompanionLibrariesHandler, DCAHubCompanionHubProxyHandler, BaseCompanion, IDCAHubCompanion {\n  constructor(\n    address _swapper,\n    address _allowanceTarget,\n    address _governor,\n    IPermit2 _permit2\n  ) BaseCompanion(_swapper, _allowanceTarget, _governor, _permit2) {}\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanionHubProxyHandler.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '../interfaces/IDCAHubCompanion.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n/// @dev All public functions are payable, so that they can be multicalled together with other payable functions when msg.value > 0\nabstract contract DCAHubCompanionHubProxyHandler is IDCAHubCompanionHubProxyHandler {\n  using SafeERC20 for IERC20;\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function permissionPermit(\n    IDCAPermissionManager _permissionManager,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions,\n    uint256 _tokenId,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external payable {\n    _permissionManager.permissionPermit(_permissions, _tokenId, _deadline, _v, _r, _s);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function multiPermissionPermit(\n    IDCAPermissionManager _permissionManager,\n    IDCAPermissionManager.PositionPermissions[] calldata _permissions,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external payable {\n    _permissionManager.multiPermissionPermit(_permissions, _deadline, _v, _r, _s);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function deposit(\n    IDCAHub _hub,\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _amountOfSwaps,\n    uint32 _swapInterval,\n    address _owner,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions,\n    bytes calldata _miscellaneous\n  ) public payable virtual returns (uint256 _positionId) {\n    _approveHub(address(_from), _hub, _amount);\n    _positionId = _miscellaneous.length > 0\n      ? _hub.deposit(_from, _to, _amount, _amountOfSwaps, _swapInterval, _owner, _permissions, _miscellaneous)\n      : _hub.deposit(_from, _to, _amount, _amountOfSwaps, _swapInterval, _owner, _permissions);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function depositWithBalanceOnContract(\n    IDCAHub _hub,\n    address _from,\n    address _to,\n    uint32 _amountOfSwaps,\n    uint32 _swapInterval,\n    address _owner,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions,\n    bytes calldata _miscellaneous\n  ) external payable returns (uint256 _positionId) {\n    uint256 _amount = IERC20(_from).balanceOf(address(this));\n    return deposit(_hub, _from, _to, _amount, _amountOfSwaps, _swapInterval, _owner, _permissions, _miscellaneous);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function withdrawSwapped(\n    IDCAHub _hub,\n    uint256 _positionId,\n    address _recipient\n  ) external payable verifyPermission(_hub, _positionId, IDCAPermissionManager.Permission.WITHDRAW) returns (uint256 _swapped) {\n    _swapped = _hub.withdrawSwapped(_positionId, _recipient);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function withdrawSwappedMany(\n    IDCAHub _hub,\n    IDCAHub.PositionSet[] calldata _positions,\n    address _recipient\n  ) external payable returns (uint256[] memory _withdrawn) {\n    for (uint256 i = 0; i < _positions.length; ++i) {\n      uint256[] memory _positionIds = _positions[i].positionIds;\n      for (uint256 j = 0; j < _positionIds.length; ++j) {\n        _checkPermissionOrFail(_hub, _positionIds[j], IDCAPermissionManager.Permission.WITHDRAW);\n      }\n    }\n    _withdrawn = _hub.withdrawSwappedMany(_positions, _recipient);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function increasePosition(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint256 _amount,\n    uint32 _newSwaps\n  ) external payable verifyPermission(_hub, _positionId, IDCAPermissionManager.Permission.INCREASE) {\n    IERC20Metadata _from = _hub.userPosition(_positionId).from;\n    _approveHub(address(_from), _hub, _amount);\n    _hub.increasePosition(_positionId, _amount, _newSwaps);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function increasePositionWithBalanceOnContract(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint32 _newSwaps\n  ) external payable verifyPermission(_hub, _positionId, IDCAPermissionManager.Permission.INCREASE) {\n    IERC20Metadata _from = _hub.userPosition(_positionId).from;\n    uint256 _amount = _from.balanceOf(address(this));\n    _approveHub(address(_from), _hub, _amount);\n    _hub.increasePosition(_positionId, _amount, _newSwaps);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function reducePosition(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint256 _amount,\n    uint32 _newSwaps,\n    address _recipient\n  ) external payable verifyPermission(_hub, _positionId, IDCAPermissionManager.Permission.REDUCE) {\n    _hub.reducePosition(_positionId, _amount, _newSwaps, _recipient);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function terminate(\n    IDCAHub _hub,\n    uint256 _positionId,\n    address _recipientUnswapped,\n    address _recipientSwapped\n  )\n    external\n    payable\n    verifyPermission(_hub, _positionId, IDCAPermissionManager.Permission.TERMINATE)\n    returns (uint256 _unswapped, uint256 _swapped)\n  {\n    (_unswapped, _swapped) = _hub.terminate(_positionId, _recipientUnswapped, _recipientSwapped);\n  }\n\n  function _approveHub(\n    address _token,\n    IDCAHub _hub,\n    uint256 _amount\n  ) internal {\n    uint256 _allowance = IERC20(_token).allowance(address(this), address(_hub));\n    if (_allowance < _amount) {\n      IERC20(_token).forceApprove(address(_hub), type(uint256).max);\n    }\n  }\n\n  function _checkPermissionOrFail(\n    IDCAHub _hub,\n    uint256 _positionId,\n    IDCAPermissionManager.Permission _permission\n  ) internal view {\n    if (!_hub.permissionManager().hasPermission(_positionId, msg.sender, _permission)) revert UnauthorizedCaller();\n  }\n\n  modifier verifyPermission(\n    IDCAHub _hub,\n    uint256 _positionId,\n    IDCAPermissionManager.Permission _permission\n  ) {\n    _checkPermissionOrFail(_hub, _positionId, _permission);\n    _;\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanionLibrariesHandler.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '../libraries/InputBuilding.sol';\nimport '../libraries/SecondsUntilNextSwap.sol';\nimport '../interfaces/IDCAHubCompanion.sol';\n\nabstract contract DCAHubCompanionLibrariesHandler is IDCAHubCompanionLibrariesHandler {\n  /// @inheritdoc IDCAHubCompanionLibrariesHandler\n  function getNextSwapInfo(\n    IDCAHub _hub,\n    Pair[] calldata _pairs,\n    bool _calculatePrivilegedAvailability,\n    bytes calldata _oracleData\n  ) external view returns (IDCAHub.SwapInfo memory) {\n    (address[] memory _tokens, IDCAHub.PairIndexes[] memory _indexes) = InputBuilding.buildGetNextSwapInfoInput(_pairs);\n    return _hub.getNextSwapInfo(_tokens, _indexes, _calculatePrivilegedAvailability, _oracleData);\n  }\n\n  /// @inheritdoc IDCAHubCompanionLibrariesHandler\n  function legacyGetNextSwapInfo(ILegacyDCAHub _hub, Pair[] calldata _pairs) external view returns (ILegacyDCAHub.SwapInfo memory) {\n    (address[] memory _tokens, IDCAHub.PairIndexes[] memory _indexes) = InputBuilding.buildGetNextSwapInfoInput(_pairs);\n    return _hub.getNextSwapInfo(_tokens, _indexes);\n  }\n\n  /// @inheritdoc IDCAHubCompanionLibrariesHandler\n  function secondsUntilNextSwap(\n    IDCAHub _hub,\n    Pair[] calldata _pairs,\n    bool _calculatePrivilegedAvailability\n  ) external view returns (uint256[] memory) {\n    return SecondsUntilNextSwap.secondsUntilNextSwap(_hub, _pairs, _calculatePrivilegedAvailability);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/CallerOnlyDCAHubSwapper.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '../interfaces/ICallerOnlyDCAHubSwapper.sol';\nimport './utils/DeadlineValidation.sol';\n\ncontract CallerOnlyDCAHubSwapper is DeadlineValidation, ICallerOnlyDCAHubSwapper {\n  using SafeERC20 for IERC20;\n  using Address for address;\n\n  /// @notice Thrown when the caller tries to execute a swap, but they are not the privileged swapper\n  error NotPrivilegedSwapper();\n\n  bytes32 public constant PRIVILEGED_SWAPPER_ROLE = keccak256('PRIVILEGED_SWAPPER_ROLE');\n\n  /// @notice Represents the lack of an executor. We are not using the zero address so that it's cheaper to modify\n  address internal constant _NO_EXECUTOR = 0x000000000000000000000000000000000000dEaD;\n  /// @notice The caller who initiated a swap execution\n  address internal _swapExecutor = _NO_EXECUTOR;\n\n  /// @inheritdoc ICallerOnlyDCAHubSwapper\n  function swapForCaller(SwapForCallerParams calldata _parameters)\n    external\n    payable\n    checkDeadline(_parameters.deadline)\n    returns (IDCAHub.SwapInfo memory _swapInfo)\n  {\n    if (!_parameters.hub.hasRole(PRIVILEGED_SWAPPER_ROLE, msg.sender)) {\n      revert NotPrivilegedSwapper();\n    }\n\n    // Set the swap's executor\n    _swapExecutor = msg.sender;\n\n    // Execute swap\n    _swapInfo = _parameters.hub.swap(\n      _parameters.tokens,\n      _parameters.pairsToSwap,\n      _parameters.recipient,\n      address(this),\n      new uint256[](_parameters.tokens.length),\n      '',\n      _parameters.oracleData\n    );\n\n    // Check that limits were met\n    for (uint256 i = 0; i < _swapInfo.tokens.length; ++i) {\n      IDCAHub.TokenInSwap memory _tokenInSwap = _swapInfo.tokens[i];\n      if (_tokenInSwap.reward < _parameters.minimumOutput[i]) {\n        revert RewardNotEnough();\n      } else if (_tokenInSwap.toProvide > _parameters.maximumInput[i]) {\n        revert ToProvideIsTooMuch();\n      }\n    }\n\n    // Clear the swap executor\n    _swapExecutor = _NO_EXECUTOR;\n  }\n\n  // solhint-disable-next-line func-name-mixedcase\n  function DCAHubSwapCall(\n    address,\n    IDCAHub.TokenInSwap[] calldata _tokens,\n    uint256[] calldata,\n    bytes calldata\n  ) external {\n    // Load to mem to avoid reading storage multiple times\n    address _swapExecutorMem = _swapExecutor;\n    for (uint256 i = 0; i < _tokens.length; ++i) {\n      IDCAHub.TokenInSwap memory _token = _tokens[i];\n      if (_token.toProvide > 0) {\n        // We assume that msg.sender is the DCAHub\n        IERC20(_token.token).safeTransferFrom(_swapExecutorMem, msg.sender, _token.toProvide);\n      }\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/ThirdPartyDCAHubSwapper.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/access/IAccessControl.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHubSwapCallee.sol';\n\ncontract ThirdPartyDCAHubSwapper is IDCAHubSwapCallee {\n  /// @notice A target we want to give allowance to\n  struct Allowance {\n    IERC20 token;\n    address spender;\n  }\n\n  /// @notice The data necessary for a swap to be executed\n  struct SwapExecution {\n    address swapper;\n    uint256 value;\n    bytes swapData;\n  }\n\n  /// @notice Data used for the callback\n  struct SwapWithDexesCallbackData {\n    // If this is a test check\n    bool isTest;\n    // Timestamp where the tx is no longer valid\n    uint256 deadline;\n    // Targets to set allowance to\n    Allowance[] allowanceTargets;\n    // The different swaps to execute\n    SwapExecution[] executions;\n    // A list of tokens to check for unspent balance (should not be reward/to provide)\n    IERC20[] intermediateTokensToCheck;\n    // The address that will receive the unspent tokens\n    address leftoverRecipient;\n  }\n\n  /// @notice An amount of certain token\n  struct AmountOfToken {\n    address token;\n    uint256 amount;\n  }\n\n  /// @notice Thrown when the swap is a test. It reports the amount of tokens help by the swapper\n  error SwapResults(AmountOfToken[] amounts);\n\n  /// @notice Thrown when deadline has passed\n  error TransactionTooOld();\n\n  /// @notice Thrown when the caller tries to execute a swap, but they are not the privileged swapper\n  error NotPrivilegedSwapper();\n\n  using SafeERC20 for IERC20;\n  using Address for address;\n\n  bytes32 public constant PRIVILEGED_SWAPPER_ROLE = keccak256('PRIVILEGED_SWAPPER_ROLE');\n\n  // solhint-disable-next-line func-name-mixedcase\n  function DCAHubSwapCall(\n    address,\n    IDCAHub.TokenInSwap[] calldata _tokens,\n    uint256[] calldata,\n    bytes calldata _data\n  ) external {\n    SwapWithDexesCallbackData memory _callbackData = abi.decode(_data, (SwapWithDexesCallbackData));\n    if (block.timestamp > _callbackData.deadline) revert TransactionTooOld();\n    _approveAllowances(_callbackData.allowanceTargets);\n    _executeSwaps(_callbackData.executions);\n    if (_callbackData.isTest) {\n      _revertWithResults(_tokens, _callbackData.intermediateTokensToCheck);\n    }\n    _handleSwapTokens(_tokens, _callbackData.leftoverRecipient);\n    _handleIntermediateTokens(_callbackData.intermediateTokensToCheck, _callbackData.leftoverRecipient);\n  }\n\n  /**\n   * @notice Executed a DCA swap\n   * @dev There are some cases where the oracles differ from what the markets can offer, so a swap can't be executed. But\n   *      it could happen that even if the amounts being swap are really big, the difference between oracle and market is\n   *      only a few dollars. In that case, it would be nice if someone could just pay for the difference.\n   *      The idea here is that instead of calling the hub directly, someone could call the swapper with some native token,\n   *      so that when the swapper gets called, they can use that native token balance as part of the swap, and cover the\n   *      difference\n   */\n  function executeSwap(\n    IDCAHubWithAccessControl _hub,\n    address[] calldata _tokens,\n    IDCAHub.PairIndexes[] calldata _pairsToSwap,\n    uint256[] calldata _borrow,\n    bytes calldata _callbackData,\n    bytes calldata _oracleData\n  ) external payable {\n    if (!_hub.hasRole(PRIVILEGED_SWAPPER_ROLE, msg.sender)) {\n      revert NotPrivilegedSwapper();\n    }\n    _hub.swap(_tokens, _pairsToSwap, address(this), address(this), _borrow, _callbackData, _oracleData);\n  }\n\n  function _approveAllowances(Allowance[] memory _allowanceTargets) internal {\n    for (uint256 i = 0; i < _allowanceTargets.length; ++i) {\n      Allowance memory _target = _allowanceTargets[i];\n      _target.token.forceApprove(_target.spender, type(uint256).max);\n    }\n  }\n\n  function _executeSwaps(SwapExecution[] memory _executions) internal {\n    for (uint256 i = 0; i < _executions.length; ++i) {\n      SwapExecution memory _execution = _executions[i];\n      _execution.swapper.functionCallWithValue(_execution.swapData, _execution.value);\n    }\n  }\n\n  function _handleSwapTokens(IDCAHub.TokenInSwap[] calldata _tokens, address _leftoverRecipient) internal {\n    for (uint256 i = 0; i < _tokens.length; ++i) {\n      IERC20 _token = IERC20(_tokens[i].token);\n      uint256 _balance = _token.balanceOf(address(this));\n      if (_balance > 0) {\n        uint256 _toProvide = _tokens[i].toProvide;\n        if (_toProvide > 0) {\n          // Send everything to hub (we assume the hub is msg.sender)\n          _token.safeTransfer(msg.sender, _balance);\n        } else {\n          // Send reward to the leftover recipient\n          _token.safeTransfer(_leftoverRecipient, _balance);\n        }\n      }\n    }\n  }\n\n  function _handleIntermediateTokens(IERC20[] memory _intermediateTokens, address _leftoverRecipient) internal {\n    for (uint256 i = 0; i < _intermediateTokens.length; ++i) {\n      uint256 _balance = _intermediateTokens[i].balanceOf(address(this));\n      if (_balance > 0) {\n        _intermediateTokens[i].safeTransfer(_leftoverRecipient, _balance);\n      }\n    }\n  }\n\n  function _revertWithResults(IDCAHub.TokenInSwap[] calldata _tokens, IERC20[] memory _intermediateTokens) internal view {\n    AmountOfToken[] memory _amounts = new AmountOfToken[](_tokens.length + _intermediateTokens.length);\n    for (uint256 i; i < _tokens.length; i++) {\n      address _token = _tokens[i].token;\n      _amounts[i] = AmountOfToken({token: _token, amount: IERC20(_token).balanceOf(address(this))});\n    }\n    for (uint256 i; i < _intermediateTokens.length; i++) {\n      _amounts[i + _tokens.length] = AmountOfToken({\n        token: address(_intermediateTokens[i]),\n        amount: _intermediateTokens[i].balanceOf(address(this))\n      });\n    }\n    revert SwapResults(_amounts);\n  }\n}\n\ninterface IDCAHubWithAccessControl is IDCAHub, IAccessControl {}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/utils/DeadlineValidation.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nabstract contract DeadlineValidation {\n  modifier checkDeadline(uint256 deadline) {\n    require(_blockTimestamp() <= deadline, 'Transaction too old');\n    _;\n  }\n\n  /// @dev Method that exists purely to be overridden for tests\n  /// @return The current block timestamp\n  function _blockTimestamp() internal view virtual returns (uint256) {\n    return block.timestamp;\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAKeep3rJob/DCAKeep3rJob.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/access/AccessControl.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\nimport '@openzeppelin/contracts/utils/cryptography/EIP712.sol';\nimport '../interfaces/IDCAKeep3rJob.sol';\n\ncontract DCAKeep3rJob is AccessControl, EIP712, IDCAKeep3rJob {\n  using Address for address;\n\n  bytes32 public constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN_ROLE');\n  bytes32 public constant CAN_SIGN_ROLE = keccak256('CAN_SIGN_ROLE');\n  bytes32 public constant WORK_TYPEHASH = keccak256('Work(address swapper,bytes data,uint256 nonce)');\n\n  /// @inheritdoc IDCAKeep3rJob\n  IKeep3r public immutable keep3r;\n  /// @inheritdoc IDCAKeep3rJob\n  SwapperAndNonce public swapperAndNonce; // Note: data grouped in struct to reduce SLOADs\n\n  constructor(\n    IKeep3r _keep3r,\n    address _swapper,\n    address _superAdmin,\n    address[] memory _initialCanSign\n  ) EIP712('Mean Finance - DCA Keep3r Job', '1') {\n    if (address(_keep3r) == address(0)) revert ZeroAddress();\n    if (_swapper == address(0)) revert ZeroAddress();\n    if (_superAdmin == address(0)) revert ZeroAddress();\n\n    keep3r = _keep3r;\n    swapperAndNonce.swapper = _swapper;\n\n    // We are setting the super admin role as its own admin so we can transfer it\n    _setRoleAdmin(SUPER_ADMIN_ROLE, SUPER_ADMIN_ROLE);\n    _setRoleAdmin(CAN_SIGN_ROLE, SUPER_ADMIN_ROLE);\n    _grantRole(SUPER_ADMIN_ROLE, _superAdmin);\n\n    for (uint256 i = 0; i < _initialCanSign.length; ++i) {\n      _grantRole(CAN_SIGN_ROLE, _initialCanSign[i]);\n    }\n  }\n\n  /// @inheritdoc IDCAKeep3rJob\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32) {\n    return _domainSeparatorV4();\n  }\n\n  /// @inheritdoc IDCAKeep3rJob\n  function setSwapper(address _swapper) external onlyRole(SUPER_ADMIN_ROLE) {\n    if (address(_swapper) == address(0)) revert ZeroAddress();\n    swapperAndNonce.swapper = _swapper;\n    emit NewSwapperSet(_swapper);\n  }\n\n  /// @inheritdoc IDCAKeep3rJob\n  function work(\n    bytes calldata _call,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external {\n    if (!keep3r.isKeeper(msg.sender)) revert NotAKeeper();\n\n    SwapperAndNonce memory _swapperAndNonce = swapperAndNonce;\n    bytes32 _structHash = keccak256(abi.encode(WORK_TYPEHASH, _swapperAndNonce.swapper, keccak256(_call), _swapperAndNonce.nonce));\n    bytes32 _hash = _hashTypedDataV4(_structHash);\n    address _signer = ECDSA.recover(_hash, _v, _r, _s);\n    if (!hasRole(CAN_SIGN_ROLE, _signer)) revert SignerCannotSignWork();\n\n    swapperAndNonce.nonce = _swapperAndNonce.nonce + 1;\n    _swapperAndNonce.swapper.functionCall(_call);\n\n    keep3r.worked(msg.sender);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ICallerOnlyDCAHubSwapper.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport '@openzeppelin/contracts/access/IAccessControl.sol';\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHubSwapCallee.sol';\n\ninterface ICallerOnlyDCAHubSwapper is IDCAHubSwapCallee {\n  /// @notice Parameters to execute a swap for caller\n  struct SwapForCallerParams {\n    // The address of the DCAHub\n    IDCAHubWithAccessControl hub;\n    // The tokens involved in the swap\n    address[] tokens;\n    // The pairs to swap\n    IDCAHub.PairIndexes[] pairsToSwap;\n    // Bytes to send to the oracle when executing a quote\n    bytes oracleData;\n    // The minimum amount of tokens to receive as part of the swap\n    uint256[] minimumOutput;\n    // The maximum amount of tokens to provide as part of the swap\n    uint256[] maximumInput;\n    // Address that will receive all the tokens from the swap\n    address recipient;\n    // Deadline when the swap becomes invalid\n    uint256 deadline;\n  }\n\n  /// @notice Thrown when the reward is less that the specified minimum\n  error RewardNotEnough();\n\n  /// @notice Thrown when the amount to provide is more than the specified maximum\n  error ToProvideIsTooMuch();\n\n  /**\n   * @notice Executes a swap for the caller, by sending them the reward, and taking from them the needed tokens\n   * @dev Can only be called by user with appropriate role\n   *      Will revert:\n   *      - With RewardNotEnough if the minimum output is not met\n   *      - With ToProvideIsTooMuch if the hub swap requires more than the given maximum input\n   * @return The information about the executed swap\n   */\n  function swapForCaller(SwapForCallerParams calldata parameters) external payable returns (IDCAHub.SwapInfo memory);\n}\n\ninterface IDCAHubWithAccessControl is IDCAHub, IAccessControl {}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAFeeManager.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport {IDCAHub, IERC20} from '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\nimport {SwapAdapter} from '../utils/SwapAdapter.sol';\nimport {SwapContext} from '../utils/types/SwapContext.sol';\nimport {TransferOutBalance} from '../utils/types/TransferOutBalance.sol';\n\n/**\n * @title DCA Fee Manager\n * @notice This contract will manage all platform fees. Since fees come in different tokens, this manager\n *         will be in charge of taking them and converting them to different tokens, for example ETH/MATIC\n *         or stablecoins. Allowed users will to withdraw fees as generated, or DCA them into tokens\n *         of their choosing\n */\ninterface IDCAFeeManager {\n  /// @notice The parameters to execute the call\n  struct RunSwapsAndTransferManyParams {\n    // The accounts that should be approved for spending\n    AllowanceTarget[] allowanceTargets;\n    // The different swappers involved in the swap\n    address[] swappers;\n    // The different swapps to execute\n    bytes[] swaps;\n    // Context necessary for the swap execution\n    SwapContext[] swapContext;\n    // Tokens to transfer after swaps have been executed\n    TransferOutBalance[] transferOutBalance;\n  }\n\n  /// @notice An allowance to provide for the swaps to work\n  struct AllowanceTarget {\n    // The token that should be approved\n    IERC20 token;\n    // The spender\n    address allowanceTarget;\n  }\n\n  /// @notice Represents how much is available for withdraw, for a specific token\n  struct AvailableBalance {\n    address token;\n    uint256 platformBalance;\n    uint256 feeManagerBalance;\n  }\n\n  /// @notice Thrown when one of the parameters is a zero address\n  error ZeroAddress();\n\n  /**\n   * @notice Executes multiple swaps\n   * @dev Can only be executed by admins\n   * @param parameters The parameters for the swap\n   */\n  function runSwapsAndTransferMany(RunSwapsAndTransferManyParams calldata parameters) external payable;\n\n  /**\n   * @notice Withdraws tokens from the platform balance, and sends them to the given recipient\n   * @dev Can only be executed by admins\n   * @param hub The address of the DCA Hub\n   * @param amountToWithdraw The tokens to withdraw, and their amounts\n   * @param recipient The address of the recipient\n   */\n  function withdrawFromPlatformBalance(\n    IDCAHub hub,\n    IDCAHub.AmountOfToken[] calldata amountToWithdraw,\n    address recipient\n  ) external;\n\n  /**\n   * @notice Withdraws tokens from the contract's balance, and sends them to the given recipient\n   * @dev Can only be executed by admins\n   * @param amountToWithdraw The tokens to withdraw, and their amounts\n   * @param recipient The address of the recipient\n   */\n  function withdrawFromBalance(IDCAHub.AmountOfToken[] calldata amountToWithdraw, address recipient) external;\n\n  /**\n   * @notice Revokes ERC20 allowances for the given spenders\n   * @dev Can only be executed by admins\n   * @param revokeActions The spenders and tokens to revoke\n   */\n  function revokeAllowances(SwapAdapter.RevokeAction[] calldata revokeActions) external;\n\n  /**\n   * @notice Returns how much is available for withdraw, for the given tokens\n   * @dev This is meant for off-chan purposes\n   * @param hub The address of the DCA Hub\n   * @param tokens The tokens to check the balance for\n   * @return How much is available for withdraw, for the given tokens\n   */\n  function availableBalances(IDCAHub hub, address[] calldata tokens) external view returns (AvailableBalance[] memory);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAHubCompanion.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol';\nimport './ILegacyDCAHub.sol';\nimport './ISharedTypes.sol';\n\n/**\n * @notice This contract exposes many utils that are also available through libraries. The idea is to make\n *         these functions available here, so others don't need to deploy new contracts\n */\ninterface IDCAHubCompanionLibrariesHandler {\n  /**\n   * @notice Takes a list of pairs and returns how it would look like to execute a swap for all of them\n   * @dev Please note that this function is very expensive. Ideally, it would be used for off-chain purposes\n   * @param hub The address of the DCAHub\n   * @param pairs The pairs to be involved in the swap\n   * @param calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\n   *        the possibility to calculate the next swap information for privileged and non-privileged accounts\n   * @param oracleData Bytes to send to the oracle when executing a quote\n   * @return How executing a swap for all the given pairs would look like\n   */\n  function getNextSwapInfo(\n    IDCAHub hub,\n    Pair[] calldata pairs,\n    bool calculatePrivilegedAvailability,\n    bytes calldata oracleData\n  ) external view returns (IDCAHub.SwapInfo memory);\n\n  /**\n   * @notice Takes a list of pairs and returns how it would look like to execute a swap for all of them\n   * @dev Please note that this function is very expensive. Ideally, it would be used for off-chain purposes\n   * @param hub The address of the DCAHub\n   * @param pairs The pairs to be involved in the swap\n   * @return How executing a swap for all the given pairs would look like\n   */\n  function legacyGetNextSwapInfo(ILegacyDCAHub hub, Pair[] calldata pairs) external view returns (ILegacyDCAHub.SwapInfo memory);\n\n  /**\n   * @notice Returns how many seconds left until the next swap is available for a list of pairs\n   * @dev Tokens in pairs may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param hub The address of the DCAHub\n   * @param pairs Pairs to check\n   * @param calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\n   *        the possibility to calculate the seconds until next swap for privileged and non-privileged accounts\n   * @return The amount of seconds until next swap for each of the pairs\n   */\n  function secondsUntilNextSwap(\n    IDCAHub hub,\n    Pair[] calldata pairs,\n    bool calculatePrivilegedAvailability\n  ) external view returns (uint256[] memory);\n}\n\ninterface IDCAHubCompanionHubProxyHandler {\n  /// @notice Thrown when a user tries operate on a position that they don't have access to\n  error UnauthorizedCaller();\n\n  /**\n   * @notice Creates a new position\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param from The address of the \"from\" token\n   * @param to The address of the \"to\" token\n   * @param amount How many \"from\" tokens will be swapped in total\n   * @param amountOfSwaps How many swaps to execute for this position\n   * @param swapInterval How frequently the position's swaps should be executed\n   * @param owner The address of the owner of the position being created\n   * @param miscellaneous Bytes that will be emitted, and associated with the position. If empty, no event will be emitted\n   * @return positionId The id of the created position\n   */\n  function deposit(\n    IDCAHub hub,\n    address from,\n    address to,\n    uint256 amount,\n    uint32 amountOfSwaps,\n    uint32 swapInterval,\n    address owner,\n    IDCAPermissionManager.PermissionSet[] calldata permissions,\n    bytes calldata miscellaneous\n  ) external payable returns (uint256 positionId);\n\n  /**\n   * @notice Creates a new position using the entire balance available on the contract\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param from The address of the \"from\" token\n   * @param to The address of the \"to\" token\n   * @param amountOfSwaps How many swaps to execute for this position\n   * @param swapInterval How frequently the position's swaps should be executed\n   * @param owner The address of the owner of the position being created\n   * @param miscellaneous Bytes that will be emitted, and associated with the position. If empty, no event will be emitted\n   * @return positionId The id of the created position\n   */\n  function depositWithBalanceOnContract(\n    IDCAHub hub,\n    address from,\n    address to,\n    uint32 amountOfSwaps,\n    uint32 swapInterval,\n    address owner,\n    IDCAPermissionManager.PermissionSet[] calldata permissions,\n    bytes calldata miscellaneous\n  ) external payable returns (uint256 positionId);\n\n  /**\n   * @notice Call the hub and withdraws all swapped tokens from a position to a recipient\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positionId The position's id\n   * @param recipient The address to withdraw swapped tokens to\n   * @return swapped How much was withdrawn\n   */\n  function withdrawSwapped(\n    IDCAHub hub,\n    uint256 positionId,\n    address recipient\n  ) external payable returns (uint256 swapped);\n\n  /**\n   * @notice Call the hub and withdraws all swapped tokens from multiple positions\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positions A list positions, grouped by `to` token\n   * @param recipient The address to withdraw swapped tokens to\n   * @return withdrawn How much was withdrawn for each token\n   */\n  function withdrawSwappedMany(\n    IDCAHub hub,\n    IDCAHub.PositionSet[] calldata positions,\n    address recipient\n  ) external payable returns (uint256[] memory withdrawn);\n\n  /**\n   * @notice Call the hub and takes the unswapped balance, adds the new deposited funds and modifies the position so that\n   * it is executed in `newSwaps` swaps\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positionId The position's id\n   * @param amount Amount of funds to add to the position\n   * @param newSwaps The new amount of swaps\n   */\n  function increasePosition(\n    IDCAHub hub,\n    uint256 positionId,\n    uint256 amount,\n    uint32 newSwaps\n  ) external payable;\n\n  /**\n   * @notice Call the hub and takes the unswapped balance, adds the Companion's current balance and modifies the position so that\n   * it is executed in `newSwaps` swaps\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positionId The position's id\n   * @param newSwaps The new amount of swaps\n   */\n  function increasePositionWithBalanceOnContract(\n    IDCAHub hub,\n    uint256 positionId,\n    uint32 newSwaps\n  ) external payable;\n\n  /**\n   * @notice Call the hub and withdraws the specified amount from the unswapped balance and modifies the position so that\n   * it is executed in newSwaps swaps\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positionId The position's id\n   * @param amount Amount of funds to withdraw from the position\n   * @param newSwaps The new amount of swaps\n   * @param recipient The address to send tokens to\n   */\n  function reducePosition(\n    IDCAHub hub,\n    uint256 positionId,\n    uint256 amount,\n    uint32 newSwaps,\n    address recipient\n  ) external payable;\n\n  /**\n   * @notice Calls the hub and terminates the position and sends all unswapped and swapped balance to the specified recipients\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positionId The position's id\n   * @param recipientUnswapped The address to withdraw unswapped tokens to\n   * @param recipientSwapped The address to withdraw swapped tokens to\n   * @return unswapped The unswapped balance sent to `recipientUnswapped`\n   * @return swapped The swapped balance sent to `recipientSwapped`\n   */\n  function terminate(\n    IDCAHub hub,\n    uint256 positionId,\n    address recipientUnswapped,\n    address recipientSwapped\n  ) external payable returns (uint256 unswapped, uint256 swapped);\n\n  /**\n   * @notice Calls the permission manager and sets multiple permissions via signature\n   * @param permissionManager The address of the permission manager\n   * @param permissions The permissions to set\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function multiPermissionPermit(\n    IDCAPermissionManager permissionManager,\n    IDCAPermissionManager.PositionPermissions[] calldata permissions,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable;\n\n  /**\n   * @notice Calls the permission manager and sets permissions via signature\n   * @param permissionManager The address of the permission manager\n   * @param permissions The permissions to set\n   * @param tokenId The token's id\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function permissionPermit(\n    IDCAPermissionManager permissionManager,\n    IDCAPermissionManager.PermissionSet[] calldata permissions,\n    uint256 tokenId,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable;\n}\n\ninterface IDCAHubCompanion is IDCAHubCompanionLibrariesHandler, IDCAHubCompanionHubProxyHandler {}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAKeep3rJob.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport 'keep3r-v2/solidity/interfaces/IKeep3r.sol';\n\ninterface IDCAKeep3rJob {\n  /// @notice A struct that contains the swapper and nonce to use\n  struct SwapperAndNonce {\n    address swapper;\n    uint96 nonce;\n  }\n\n  /// @notice Thrown when one of the parameters is a zero address\n  error ZeroAddress();\n\n  /// @notice Thrown when a user tries to execute work but the signature is invalid\n  error SignerCannotSignWork();\n\n  /// @notice Thrown when a non keep3r address tries to execute work\n  error NotAKeeper();\n\n  /**\n   * @notice Emitted when a new swapper is set\n   * @param newSwapper The new swapper\n   */\n  event NewSwapperSet(address newSwapper);\n\n  /**\n   * @notice The domain separator used for the work signature\n   * @return The domain separator used for the work signature\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  /**\n   * @notice Returns the swapper address\n   * @return swapper The swapper's address\n   * @return nonce The next nonce to use\n   */\n  function swapperAndNonce() external returns (address swapper, uint96 nonce);\n\n  /**\n   * @notice Returns the Keep3r address\n   * @return The Keep3r address address\n   */\n  function keep3r() external returns (IKeep3r);\n\n  /**\n   * @notice Sets a new swapper address\n   * @dev Will revert with ZeroAddress if the zero address is passed\n   *      Can only be called by an admin\n   * @param swapper The new swapper address\n   */\n  function setSwapper(address swapper) external;\n\n  /**\n   * @notice Takes an encoded call and executes it against the swapper\n   * @dev Will revert with:\n   *      - NotAKeeper if the caller is not a keep3r\n   *      - SignerCannotSignWork if the address who signed the message cannot sign work\n   * @param call The call to execut against the swapper\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function work(\n    bytes calldata call,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ILegacyDCAHub.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\n\ninterface ILegacyDCAHub {\n  /// @notice Information about a swap\n  struct SwapInfo {\n    // The tokens involved in the swap\n    TokenInSwap[] tokens;\n    // The pairs involved in the swap\n    PairInSwap[] pairs;\n  }\n\n  /// @notice Information about a token's role in a swap\n  struct TokenInSwap {\n    // The token's address\n    address token;\n    // How much will be given of this token as a reward\n    uint256 reward;\n    // How much of this token needs to be provided by swapper\n    uint256 toProvide;\n    // How much of this token will be paid to the platform\n    uint256 platformFee;\n  }\n\n  /// @notice Information about a pair in a swap\n  struct PairInSwap {\n    // The address of one of the tokens\n    address tokenA;\n    // The address of the other token\n    address tokenB;\n    // How much is 1 unit of token A when converted to B\n    uint256 ratioAToB;\n    // How much is 1 unit of token B when converted to A\n    uint256 ratioBToA;\n    // The swap intervals involved in the swap, represented as a byte\n    bytes1 intervalsInSwap;\n  }\n\n  /**\n   * @notice Returns all information related to the next swap\n   * @dev Will revert with:\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\n   * @param tokens The tokens involved in the next swap\n   * @param pairs The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\n   * @return swapInformation The information about the next swap\n   */\n  function getNextSwapInfo(address[] calldata tokens, IDCAHub.PairIndexes[] calldata pairs)\n    external\n    view\n    returns (SwapInfo memory swapInformation);\n\n  /**\n   * @notice Executes a flash swap\n   * @dev Will revert with:\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\n   *      - With Paused if swaps are paused by protocol\n   *      - With NoSwapsToExecute if there are no swaps to execute for the given pairs\n   *      - With LiquidityNotReturned if the required tokens were not back during the callback\n   * @param tokens The tokens involved in the next swap\n   * @param pairsToSwap The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\n   * @param rewardRecipient The address to send the reward to\n   * @param callbackHandler Address to call for callback (and send the borrowed tokens to)\n   * @param borrow How much to borrow of each of the tokens in tokens. The amount must match the position of the token in the tokens array\n   * @param callbackData Bytes to send to the caller during the callback\n   * @return Information about the executed swap\n   */\n  function swap(\n    address[] calldata tokens,\n    IDCAHub.PairIndexes[] calldata pairsToSwap,\n    address rewardRecipient,\n    address callbackHandler,\n    uint256[] calldata borrow,\n    bytes calldata callbackData\n  ) external returns (SwapInfo memory);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ISharedTypes.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\n/// @notice A pair of tokens\nstruct Pair {\n  address tokenA;\n  address tokenB;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/external/IPermit2.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n// Minimal Permit2 interface, derived from\n// https://github.com/Uniswap/permit2/blob/main/src/interfaces/ISignatureTransfer.sol\ninterface IPermit2 {\n  struct TokenPermissions {\n    address token;\n    uint256 amount;\n  }\n\n  struct PermitTransferFrom {\n    TokenPermissions permitted;\n    uint256 nonce;\n    uint256 deadline;\n  }\n\n  struct PermitBatchTransferFrom {\n    TokenPermissions[] permitted;\n    uint256 nonce;\n    uint256 deadline;\n  }\n\n  struct SignatureTransferDetails {\n    address to;\n    uint256 requestedAmount;\n  }\n\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  function permitTransferFrom(\n    PermitTransferFrom calldata permit,\n    SignatureTransferDetails calldata transferDetails,\n    address owner,\n    bytes calldata signature\n  ) external;\n\n  function permitTransferFrom(\n    PermitBatchTransferFrom memory permit,\n    SignatureTransferDetails[] calldata transferDetails,\n    address owner,\n    bytes calldata signature\n  ) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/InputBuilding.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\nimport '../interfaces/ISharedTypes.sol';\n\n/// @title Input Building Library\n/// @notice Provides functions to build input for swap related actions\n/// @dev Please note that these functions are very expensive. Ideally, these would be used for off-chain purposes\nlibrary InputBuilding {\n  /// @notice Takes a list of pairs and returns the input necessary to check the next swap\n  /// @dev Even though this function allows it, the DCAHub will fail if duplicated pairs are used\n  /// @return _tokens A sorted list of all the tokens involved in the swap\n  /// @return _pairsToSwap A sorted list of indexes that represent the pairs involved in the swap\n  function buildGetNextSwapInfoInput(Pair[] calldata _pairs)\n    internal\n    pure\n    returns (address[] memory _tokens, IDCAHub.PairIndexes[] memory _pairsToSwap)\n  {\n    (_tokens, _pairsToSwap, ) = buildSwapInput(_pairs, new IDCAHub.AmountOfToken[](0));\n  }\n\n  /// @notice Takes a list of pairs and a list of tokens to borrow and returns the input necessary to execute a swap\n  /// @dev Even though this function allows it, the DCAHub will fail if duplicated pairs are used\n  /// @return _tokens A sorted list of all the tokens involved in the swap\n  /// @return _pairsToSwap A sorted list of indexes that represent the pairs involved in the swap\n  /// @return _borrow A list of amounts to borrow, based on the sorted token list\n  function buildSwapInput(Pair[] calldata _pairs, IDCAHub.AmountOfToken[] memory _toBorrow)\n    internal\n    pure\n    returns (\n      address[] memory _tokens,\n      IDCAHub.PairIndexes[] memory _pairsToSwap,\n      uint256[] memory _borrow\n    )\n  {\n    _tokens = _calculateUniqueTokens(_pairs, _toBorrow);\n    _pairsToSwap = _calculatePairIndexes(_pairs, _tokens);\n    _borrow = _calculateTokensToBorrow(_toBorrow, _tokens);\n  }\n\n  /// @dev Given a list of token pairs and tokens to borrow, returns a list of all the tokens involved, sorted\n  function _calculateUniqueTokens(Pair[] memory _pairs, IDCAHub.AmountOfToken[] memory _toBorrow)\n    private\n    pure\n    returns (address[] memory _tokens)\n  {\n    uint256 _uniqueTokens;\n    address[] memory _tokensPlaceholder = new address[](_pairs.length * 2 + _toBorrow.length);\n\n    // Load tokens in pairs onto placeholder\n    for (uint256 i; i < _pairs.length; i++) {\n      bool _foundA = false;\n      bool _foundB = false;\n      for (uint256 j; j < _uniqueTokens && !(_foundA && _foundB); j++) {\n        if (!_foundA && _tokensPlaceholder[j] == _pairs[i].tokenA) _foundA = true;\n        if (!_foundB && _tokensPlaceholder[j] == _pairs[i].tokenB) _foundB = true;\n      }\n\n      if (!_foundA) _tokensPlaceholder[_uniqueTokens++] = _pairs[i].tokenA;\n      if (!_foundB) _tokensPlaceholder[_uniqueTokens++] = _pairs[i].tokenB;\n    }\n\n    // Load tokens to borrow onto placeholder\n    for (uint256 i; i < _toBorrow.length; i++) {\n      bool _found = false;\n      for (uint256 j; j < _uniqueTokens && !_found; j++) {\n        if (_tokensPlaceholder[j] == _toBorrow[i].token) _found = true;\n      }\n      if (!_found) _tokensPlaceholder[_uniqueTokens++] = _toBorrow[i].token;\n    }\n\n    // Load sorted into new array\n    _tokens = new address[](_uniqueTokens);\n    for (uint256 i; i < _uniqueTokens; i++) {\n      address _token = _tokensPlaceholder[i];\n\n      // Find index where the token should be\n      uint256 _tokenIndex;\n      while (_tokens[_tokenIndex] < _token && _tokens[_tokenIndex] != address(0)) _tokenIndex++;\n\n      // Move everything one place back\n      for (uint256 j = i; j > _tokenIndex; j--) {\n        _tokens[j] = _tokens[j - 1];\n      }\n\n      // Set token on the correct index\n      _tokens[_tokenIndex] = _token;\n    }\n  }\n\n  /// @dev Given a list of pairs, and a list of sorted tokens, it translates the first list into indexes of the second list. This list of indexes will\n  /// be sorted. For example, if pairs are [{ tokenA, tokenB }, { tokenC, tokenB }] and tokens are: [ tokenA, tokenB, tokenC ], the following is returned\n  /// [ { 0, 1 }, { 1, 1 }, { 1, 2 } ]\n  function _calculatePairIndexes(Pair[] calldata _pairs, address[] memory _tokens)\n    private\n    pure\n    returns (IDCAHub.PairIndexes[] memory _pairIndexes)\n  {\n    _pairIndexes = new IDCAHub.PairIndexes[](_pairs.length);\n    uint256 _count;\n\n    for (uint8 i; i < _tokens.length; i++) {\n      for (uint8 j = i + 1; j < _tokens.length; j++) {\n        for (uint256 k; k < _pairs.length; k++) {\n          if (\n            (_tokens[i] == _pairs[k].tokenA && _tokens[j] == _pairs[k].tokenB) ||\n            (_tokens[i] == _pairs[k].tokenB && _tokens[j] == _pairs[k].tokenA)\n          ) {\n            _pairIndexes[_count++] = IDCAHubSwapHandler.PairIndexes({indexTokenA: i, indexTokenB: j});\n          }\n        }\n      }\n    }\n  }\n\n  /// @dev Given a list of tokens to borrow and a list of sorted tokens, it translated the first list into a list of amounts, sorted by the indexed of\n  /// the seconds list. For example, if `toBorrow` are [{ tokenA, 100 }, { tokenC, 200 }, { tokenB, 500 }] and tokens are [ tokenA, tokenB, tokenC], the\n  /// following is returned [100, 500, 200]\n  function _calculateTokensToBorrow(IDCAHub.AmountOfToken[] memory _toBorrow, address[] memory _tokens)\n    private\n    pure\n    returns (uint256[] memory _borrow)\n  {\n    _borrow = new uint256[](_tokens.length);\n\n    for (uint256 i; i < _toBorrow.length; i++) {\n      uint256 j;\n      while (_tokens[j] != _toBorrow[i].token) j++;\n      _borrow[j] = _toBorrow[i].amount;\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/ModifyPositionWithRate.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\n\n/// @title Modify Position With Rate Library\n/// @notice Provides functions modify a position by using rate/amount of swaps\nlibrary ModifyPositionWithRate {\n  /// @notice Modifies the rate of a position. Could request more funds or return deposited funds\n  /// depending on whether the new rate is greater than the previous one.\n  /// @param _hub The address of the DCA Hub\n  /// @param _positionId The position's id\n  /// @param _newRate The new rate to set\n  function modifyRate(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint120 _newRate\n  ) internal {\n    IDCAHub.UserPosition memory _position = _hub.userPosition(_positionId);\n    if (_newRate != _position.rate) {\n      _modify(_hub, _positionId, _position, _newRate, _position.swapsLeft);\n    }\n  }\n\n  /// @notice Modifies the amount of swaps of a position. Could request more funds or return\n  /// deposited funds depending on whether the new amount of swaps is greater than the swaps left.\n  /// @param _hub The address of the DCA Hub\n  /// @param _positionId The position's id\n  /// @param _newSwaps The new amount of swaps\n  function modifySwaps(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint32 _newSwaps\n  ) internal {\n    IDCAHub.UserPosition memory _position = _hub.userPosition(_positionId);\n    if (_newSwaps != _position.swapsLeft) {\n      _modify(_hub, _positionId, _position, _position.rate, _newSwaps);\n    }\n  }\n\n  /// @notice Modifies both the rate and amount of swaps of a position. Could request more funds or return\n  /// deposited funds depending on whether the new parameters require more or less than the current unswapped funds.\n  /// @param _hub The address of the DCA Hub\n  /// @param _positionId The position's id\n  /// @param _newRate The new rate to set\n  /// @param _newSwaps The new amount of swaps\n  function modifyRateAndSwaps(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint120 _newRate,\n    uint32 _newSwaps\n  ) internal {\n    IDCAHub.UserPosition memory _position = _hub.userPosition(_positionId);\n    if (_position.rate != _newRate && _newSwaps != _position.swapsLeft) {\n      _modify(_hub, _positionId, _position, _newRate, _newSwaps);\n    }\n  }\n\n  function _modify(\n    IDCAHub _hub,\n    uint256 _positionId,\n    IDCAHub.UserPosition memory _position,\n    uint120 _newRate,\n    uint32 _newAmountOfSwaps\n  ) private {\n    uint256 _totalNecessary = uint256(_newRate) * _newAmountOfSwaps;\n    if (_totalNecessary >= _position.remaining) {\n      _hub.increasePosition(_positionId, _totalNecessary - _position.remaining, _newAmountOfSwaps);\n    } else {\n      _hub.reducePosition(_positionId, _position.remaining - _totalNecessary, _newAmountOfSwaps, msg.sender);\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/Permit2Transfers.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\n\n/**\n * @title Permit2 Transfers Library\n * @author Sam Bugs\n * @notice A small library to call Permit2's transfer from methods\n */\nlibrary Permit2Transfers {\n  /**\n   * @notice Executes a transfer from using Permit2\n   * @param _permit2 The Permit2 contract\n   * @param _token The token to transfer\n   * @param _amount The amount to transfer\n   * @param _nonce The owner's nonce\n   * @param _deadline The signature's expiration deadline\n   * @param _signature The signature that allows the transfer\n   * @param _recipient The address that will receive the funds\n   */\n  function takeFromCaller(\n    IPermit2 _permit2,\n    address _token,\n    uint256 _amount,\n    uint256 _nonce,\n    uint256 _deadline,\n    bytes calldata _signature,\n    address _recipient\n  ) internal {\n    _permit2.permitTransferFrom(\n      // The permit message.\n      IPermit2.PermitTransferFrom({permitted: IPermit2.TokenPermissions({token: _token, amount: _amount}), nonce: _nonce, deadline: _deadline}),\n      // The transfer recipient and amount.\n      IPermit2.SignatureTransferDetails({to: _recipient, requestedAmount: _amount}),\n      // The owner of the tokens, which must also be\n      // the signer of the message, otherwise this call\n      // will fail.\n      msg.sender,\n      // The packed signature that was the result of signing\n      // the EIP712 hash of `permit`.\n      _signature\n    );\n  }\n\n  /**\n   * @notice Executes a batch transfer from using Permit2\n   * @param _permit2 The Permit2 contract\n   * @param _tokens The amount of tokens to transfer\n   * @param _nonce The owner's nonce\n   * @param _deadline The signature's expiration deadline\n   * @param _signature The signature that allows the transfer\n   * @param _recipient The address that will receive the funds\n   */\n  function batchTakeFromCaller(\n    IPermit2 _permit2,\n    IPermit2.TokenPermissions[] calldata _tokens,\n    uint256 _nonce,\n    uint256 _deadline,\n    bytes calldata _signature,\n    address _recipient\n  ) internal {\n    if (_tokens.length > 0) {\n      _permit2.permitTransferFrom(\n        // The permit message.\n        IPermit2.PermitBatchTransferFrom({permitted: _tokens, nonce: _nonce, deadline: _deadline}),\n        // The transfer recipients and amounts.\n        _buildTransferDetails(_tokens, _recipient),\n        // The owner of the tokens, which must also be\n        // the signer of the message, otherwise this call\n        // will fail.\n        msg.sender,\n        // The packed signature that was the result of signing\n        // the EIP712 hash of `permit`.\n        _signature\n      );\n    }\n  }\n\n  function _buildTransferDetails(IPermit2.TokenPermissions[] calldata _tokens, address _recipient)\n    private\n    pure\n    returns (IPermit2.SignatureTransferDetails[] memory _details)\n  {\n    _details = new IPermit2.SignatureTransferDetails[](_tokens.length);\n    for (uint256 i; i < _details.length; ++i) {\n      _details[i] = IPermit2.SignatureTransferDetails({to: _recipient, requestedAmount: _tokens[i].amount});\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/SecondsUntilNextSwap.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\nimport '@mean-finance/dca-v2-core/contracts/libraries/TokenSorting.sol';\nimport '@mean-finance/dca-v2-core/contracts/libraries/Intervals.sol';\nimport '../interfaces/ISharedTypes.sol';\n\n/**\n * @title Seconds Until Next Swap Library\n * @notice Provides functions to calculate how long users have to wait until a pair's next swap is available\n */\nlibrary SecondsUntilNextSwap {\n  /**\n   * @notice Returns how many seconds left until the next swap is available for a specific pair\n   * @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param _hub The address of the DCA Hub\n   * @param _tokenA One of the pair's tokens\n   * @param _tokenB The other of the pair's tokens\n   * @param _calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\n   *        the possibility to calculate the seconds until next swap for privileged and non-privileged accounts\n   * @return The amount of seconds until next swap. Returns 0 if a swap can already be executed and max(uint256) if there is nothing to swap\n   */\n  function secondsUntilNextSwap(\n    IDCAHub _hub,\n    address _tokenA,\n    address _tokenB,\n    bool _calculatePrivilegedAvailability\n  ) internal view returns (uint256) {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    bytes1 _activeIntervals = _hub.activeSwapIntervals(__tokenA, __tokenB);\n    bytes1 _mask = 0x01;\n    uint256 _smallerIntervalBlocking;\n    while (_activeIntervals >= _mask && _mask > 0) {\n      if (_activeIntervals & _mask == _mask) {\n        (, uint224 _nextAmountToSwapAToB, uint32 _lastSwappedAt, uint224 _nextAmountToSwapBToA) = _hub.swapData(_tokenA, _tokenB, _mask);\n        uint32 _swapInterval = Intervals.maskToInterval(_mask);\n        uint256 _nextAvailable = ((_lastSwappedAt / _swapInterval) + 1) * _swapInterval;\n        if (!_calculatePrivilegedAvailability) {\n          // If the caller does not have privileges, then they will have to wait a little more to execute swaps\n          _nextAvailable += _swapInterval / 3;\n        }\n        if (_nextAmountToSwapAToB > 0 || _nextAmountToSwapBToA > 0) {\n          if (_nextAvailable <= block.timestamp) {\n            return _smallerIntervalBlocking;\n          } else {\n            return _nextAvailable - block.timestamp;\n          }\n        } else if (_nextAvailable > block.timestamp) {\n          _smallerIntervalBlocking = _smallerIntervalBlocking == 0 ? _nextAvailable - block.timestamp : _smallerIntervalBlocking;\n        }\n      }\n      _mask <<= 1;\n    }\n    return type(uint256).max;\n  }\n\n  /**\n   * @notice Returns how many seconds left until the next swap is available for a list of pairs\n   * @dev Tokens in pairs may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param _hub The address of the DCA Hub\n   * @param _pairs Pairs to check\n   * @return _seconds The amount of seconds until next swap for each of the pairs\n   * @param _calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\n   *        the possibility to calculate the seconds until next swap for privileged and non-privileged accounts\n   */\n  function secondsUntilNextSwap(\n    IDCAHub _hub,\n    Pair[] calldata _pairs,\n    bool _calculatePrivilegedAvailability\n  ) internal view returns (uint256[] memory _seconds) {\n    _seconds = new uint256[](_pairs.length);\n    for (uint256 i; i < _pairs.length; i++) {\n      _seconds[i] = secondsUntilNextSwap(_hub, _pairs[i].tokenA, _pairs[i].tokenB, _calculatePrivilegedAvailability);\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/DCAFeeManager/DCAFeeManager.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.22;\n\nimport '../../DCAFeeManager/DCAFeeManager.sol';\n\ncontract DCAFeeManagerMock is DCAFeeManager {\n  struct SendToRecipientCall {\n    address token;\n    uint256 amount;\n    address recipient;\n  }\n\n  struct SendBalanceOnContractToRecipientCall {\n    address token;\n    address recipient;\n  }\n\n  SendToRecipientCall[] internal _sendToRecipientCalls;\n  SendBalanceOnContractToRecipientCall[] internal _sendBalanceOnContractToRecipientCalls;\n  RevokeAction[][] internal _revokeCalls;\n\n  constructor(address _superAdmin, address[] memory _initialAdmins) DCAFeeManager(_superAdmin, _initialAdmins) {}\n\n  function sendBalanceOnContractToRecipientCalls() external view returns (SendBalanceOnContractToRecipientCall[] memory) {\n    return _sendBalanceOnContractToRecipientCalls;\n  }\n\n  function sendToRecipientCalls() external view returns (SendToRecipientCall[] memory) {\n    return _sendToRecipientCalls;\n  }\n\n  function revokeAllowancesCalls() external view returns (RevokeAction[][] memory) {\n    return _revokeCalls;\n  }\n\n  function _sendBalanceOnContractToRecipient(address _token, address _recipient) internal override {\n    _sendBalanceOnContractToRecipientCalls.push(SendBalanceOnContractToRecipientCall(_token, _recipient));\n  }\n\n  function _sendToRecipient(\n    address _token,\n    uint256 _amount,\n    address _recipient\n  ) internal override {\n    _sendToRecipientCalls.push(SendToRecipientCall(_token, _amount, _recipient));\n  }\n\n  function _revokeAllowances(RevokeAction[] calldata _revokeActions) internal override {\n    _revokeCalls.push();\n    uint256 _currentCall = _revokeCalls.length - 1;\n    for (uint256 i; i < _revokeActions.length; i++) {\n      _revokeCalls[_currentCall].push(_revokeActions[i]);\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/DCAHubCompanion/DCAHubCompanionHubProxyHandler.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.22;\n\nimport '../../DCAHubCompanion/DCAHubCompanionHubProxyHandler.sol';\n\ncontract DCAHubCompanionHubProxyHandlerMock is DCAHubCompanionHubProxyHandler {\n  struct DepositCall {\n    IDCAHub hub;\n    address from;\n    address to;\n    uint256 amount;\n    uint32 amountOfSwaps;\n    uint32 swapInterval;\n    address owner;\n    IDCAPermissionManager.PermissionSet[] permissions;\n    bytes miscellaneous;\n  }\n\n  DepositCall[] private _depositCalls;\n\n  function depositCalls() external view returns (DepositCall[] memory) {\n    return _depositCalls;\n  }\n\n  function deposit(\n    IDCAHub _hub,\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _amountOfSwaps,\n    uint32 _swapInterval,\n    address _owner,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions,\n    bytes calldata _miscellaneous\n  ) public payable override returns (uint256 _positionId) {\n    _depositCalls.push();\n    DepositCall storage _ref = _depositCalls[_depositCalls.length - 1];\n    _ref.hub = _hub;\n    _ref.from = _from;\n    _ref.to = _to;\n    _ref.amount = _amount;\n    _ref.amountOfSwaps = _amountOfSwaps;\n    _ref.swapInterval = _swapInterval;\n    _ref.owner = _owner;\n    _ref.miscellaneous = _miscellaneous;\n    for (uint256 i = 0; i < _permissions.length; i++) {\n      _ref.permissions.push(_permissions[i]);\n    }\n    return super.deposit(_hub, _from, _to, _amount, _amountOfSwaps, _swapInterval, _owner, _permissions, _miscellaneous);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/DCAHubSwapper/CallerOnlyDCAHubSwapper.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.22;\n\nimport '../../DCAHubSwapper/CallerOnlyDCAHubSwapper.sol';\n\ncontract CallerOnlyDCAHubSwapperMock is CallerOnlyDCAHubSwapper {\n  function isSwapExecutorEmpty() external view returns (bool) {\n    return _swapExecutor == _NO_EXECUTOR;\n  }\n\n  function setSwapExecutor(address _newSwapExecutor) external {\n    _swapExecutor = _newSwapExecutor;\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/ISwapper.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.22;\n\n/// @notice Simply used for tests with Smock\ninterface ISwapper {\n  function swap(\n    address tokenIn,\n    uint256 amountIn,\n    address tokenOut\n  ) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/LegacyDCASwapper.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '../interfaces/ILegacyDCAHub.sol';\n\ncontract LegacyDCASwapper {\n  using SafeERC20 for IERC20;\n\n  address internal _swapExecutor;\n\n  function swapForCaller(\n    ILegacyDCAHub _hub,\n    address[] calldata _tokens,\n    IDCAHub.PairIndexes[] calldata _pairsToSwap,\n    address _recipient\n  ) external {\n    // Set the executor\n    _swapExecutor = msg.sender;\n\n    // Execute swap\n    _hub.swap(_tokens, _pairsToSwap, _recipient, address(this), new uint256[](_tokens.length), '');\n\n    // Clear the swap executor\n    _swapExecutor = address(0);\n  }\n\n  // solhint-disable-next-line func-name-mixedcase\n  function DCAHubSwapCall(\n    address,\n    IDCAHub.TokenInSwap[] calldata _tokens,\n    uint256[] calldata,\n    bytes calldata\n  ) external {\n    address _swapExecutorMem = _swapExecutor;\n    for (uint256 i = 0; i < _tokens.length; ++i) {\n      IDCAHub.TokenInSwap memory _token = _tokens[i];\n      if (_token.toProvide > 0) {\n        // We assume that msg.sender is the DCAHub\n        IERC20(_token.token).safeTransferFrom(_swapExecutorMem, msg.sender, _token.toProvide);\n      }\n    }\n  }\n\n  function _handleSwapForCallerCallback(IDCAHub.TokenInSwap[] calldata _tokens) internal {\n    // Load to mem to avoid reading storage multiple times\n    address _swapExecutorMem = _swapExecutor;\n    for (uint256 i = 0; i < _tokens.length; ++i) {\n      IDCAHub.TokenInSwap memory _token = _tokens[i];\n      if (_token.toProvide > 0) {\n        // We assume that msg.sender is the DCAHub\n        IERC20(_token.token).safeTransferFrom(_swapExecutorMem, msg.sender, _token.toProvide);\n      }\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/libraries/InputBuilding.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.22;\n\nimport '../../libraries/InputBuilding.sol';\n\ncontract InputBuildingMock {\n  function buildGetNextSwapInfoInput(Pair[] calldata _pairs)\n    external\n    pure\n    returns (address[] memory _tokens, IDCAHub.PairIndexes[] memory _pairsToSwap)\n  {\n    return InputBuilding.buildGetNextSwapInfoInput(_pairs);\n  }\n\n  function buildSwapInput(Pair[] calldata _pairs, IDCAHub.AmountOfToken[] memory _toBorrow)\n    external\n    pure\n    returns (\n      address[] memory _tokens,\n      IDCAHub.PairIndexes[] memory _pairsToSwap,\n      uint256[] memory _borrow\n    )\n  {\n    return InputBuilding.buildSwapInput(_pairs, _toBorrow);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/libraries/ModifyPositionWithRate.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.22;\n\nimport '../../libraries/ModifyPositionWithRate.sol';\n\ncontract ModifyPositionWithRateMock {\n  function modifyRate(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint120 _newRate\n  ) external {\n    ModifyPositionWithRate.modifyRate(_hub, _positionId, _newRate);\n  }\n\n  function modifySwaps(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint32 _newSwaps\n  ) external {\n    ModifyPositionWithRate.modifySwaps(_hub, _positionId, _newSwaps);\n  }\n\n  function modifyRateAndSwaps(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint120 _newRate,\n    uint32 _newSwaps\n  ) external {\n    ModifyPositionWithRate.modifyRateAndSwaps(_hub, _positionId, _newRate, _newSwaps);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/libraries/SecondsUntilNextSwap.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.22;\n\nimport '../../libraries/SecondsUntilNextSwap.sol';\n\ncontract SecondsUntilNextSwapMock {\n  function secondsUntilNextSwap(\n    IDCAHub _hub,\n    address _tokenA,\n    address _tokenB,\n    bool _calculatePrivilegedAvailability\n  ) external view returns (uint256) {\n    return SecondsUntilNextSwap.secondsUntilNextSwap(_hub, _tokenA, _tokenB, _calculatePrivilegedAvailability);\n  }\n\n  function secondsUntilNextSwap(\n    IDCAHub _hub,\n    Pair[] calldata _pairs,\n    bool _calculatePrivilegedAvailability\n  ) external view returns (uint256[] memory) {\n    return SecondsUntilNextSwap.secondsUntilNextSwap(_hub, _pairs, _calculatePrivilegedAvailability);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/utils/BaseCompanion.sol": {
            "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.22;\n\nimport '../../utils/BaseCompanion.sol';\n\ncontract BaseCompanionMock is BaseCompanion {\n  constructor(\n    address _swapper,\n    address _allowanceTarget,\n    address _governor,\n    IPermit2 _permit2\n  ) BaseCompanion(_swapper, _allowanceTarget, _governor, _permit2) {}\n\n  struct TakeFromMsgSenderCall {\n    IERC20 token;\n    uint256 amount;\n  }\n\n  struct SendBalanceOnContractToRecipientCall {\n    address token;\n    address recipient;\n  }\n\n  struct SendToRecipientCall {\n    address token;\n    uint256 amount;\n    address recipient;\n  }\n\n  TakeFromMsgSenderCall[] internal _takeFromMsgSenderCalls;\n  SendBalanceOnContractToRecipientCall[] internal _sendBalanceOnContractToRecipientCalls;\n  SendToRecipientCall[] internal _sendToRecipientCalls;\n\n  function takeFromMsgSenderCalls() external view returns (TakeFromMsgSenderCall[] memory) {\n    return _takeFromMsgSenderCalls;\n  }\n\n  function sendBalanceOnContractToRecipientCalls() external view returns (SendBalanceOnContractToRecipientCall[] memory) {\n    return _sendBalanceOnContractToRecipientCalls;\n  }\n\n  function sendToRecipientCalls() external view returns (SendToRecipientCall[] memory) {\n    return _sendToRecipientCalls;\n  }\n\n  function _takeFromMsgSender(IERC20 _token, uint256 _amount) internal override {\n    _takeFromMsgSenderCalls.push(TakeFromMsgSenderCall(_token, _amount));\n    super._takeFromMsgSender(_token, _amount);\n  }\n\n  function _sendBalanceOnContractToRecipient(address _token, address _recipient) internal override {\n    _sendBalanceOnContractToRecipientCalls.push(SendBalanceOnContractToRecipientCall(_token, _recipient));\n    super._sendBalanceOnContractToRecipient(_token, _recipient);\n  }\n\n  function _sendToRecipient(\n    address _token,\n    uint256 _amount,\n    address _recipient\n  ) internal override {\n    _sendToRecipientCalls.push(SendToRecipientCall(_token, _amount, _recipient));\n    super._sendToRecipient(_token, _amount, _recipient);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/BaseCompanion.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport './SwapAdapter.sol';\nimport './PayableMulticall.sol';\nimport {SimulationAdapter} from '@mean-finance/call-simulation/contracts/SimulationAdapter.sol';\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\nimport {Permit2Transfers} from '../libraries/Permit2Transfers.sol';\nimport './Governable.sol';\n\n/**\n * @notice This contract will work as base companion for all our contracts. It will extend the capabilities of our companion\n *         contracts so that they can execute multicalls, swaps, revokes and more\n * @dev All public functions are payable, so that they can be multicalled together with other payable functions when msg.value > 0\n */\nabstract contract BaseCompanion is SimulationAdapter, Governable, SwapAdapter, PayableMulticall {\n  using Permit2Transfers for IPermit2;\n  using SafeERC20 for IERC20;\n\n  /**\n   * @notice Returns the address of the Permit2 contract\n   * @dev This value is constant and cannot change\n   * @return The address of the Permit2 contract\n   */\n  // solhint-disable-next-line var-name-mixedcase\n  IPermit2 public immutable PERMIT2;\n\n  /// @notice The address of the swapper\n  address public swapper;\n\n  /// @notice The address of the allowance target\n  address public allowanceTarget;\n\n  constructor(\n    address _swapper,\n    address _allowanceTarget,\n    address _governor,\n    IPermit2 _permit2\n  ) SwapAdapter() Governable(_governor) {\n    swapper = _swapper;\n    allowanceTarget = _allowanceTarget;\n    PERMIT2 = _permit2;\n  }\n\n  receive() external payable {}\n\n  /**\n   * @notice Sends the specified amount of the given token to the recipient\n   * @param _token The token to transfer\n   * @param _amount The amount to transfer\n   * @param _recipient The recipient of the token balance\n   */\n  function sendToRecipient(\n    address _token,\n    uint256 _amount,\n    address _recipient\n  ) external payable {\n    _sendToRecipient(_token, _amount, _recipient);\n  }\n\n  /**\n   * @notice Takes the given amount of tokens from the caller and transfers it to this contract\n   * @param _token The token to take\n   * @param _amount The amount to take\n   */\n  function takeFromCaller(\n    IERC20 _token,\n    uint256 _amount,\n    address _recipient\n  ) external payable {\n    _token.safeTransferFrom(msg.sender, _recipient, _amount);\n  }\n\n  /**\n   * @notice Executes a swap against the swapper\n   * @param _allowanceToken The token to set allowance for (can be set to zero address to ignore)\n   * @param _value The value to send to the swapper as part of the swap\n   * @param _swapData The swap data\n   * @param _tokenOut The token that will be bought as part of the swap\n   */\n  function runSwap(\n    address _allowanceToken,\n    uint256 _value,\n    bytes calldata _swapData,\n    address _tokenOut\n  ) external payable returns (uint256 _amountOut) {\n    if (_allowanceToken != address(0)) {\n      IERC20(_allowanceToken).forceApprove(allowanceTarget, type(uint256).max);\n    }\n\n    _executeSwap(swapper, _swapData, _value);\n\n    _amountOut = _tokenOut == PROTOCOL_TOKEN ? address(this).balance : IERC20(_tokenOut).balanceOf(address(this));\n  }\n\n  /**\n   * @notice Takes the given amount of tokens from the caller with Permit2 and transfers it to this contract\n   * @param _token The token to take\n   * @param _amount The amount to take\n   * @param _nonce The signed nonce\n   * @param _deadline The signature's deadline\n   * @param _signature The owner's signature\n   * @param _recipient The address that will receive the funds\n   */\n  function permitTakeFromCaller(\n    address _token,\n    uint256 _amount,\n    uint256 _nonce,\n    uint256 _deadline,\n    bytes calldata _signature,\n    address _recipient\n  ) external payable {\n    PERMIT2.takeFromCaller(_token, _amount, _nonce, _deadline, _signature, _recipient);\n  }\n\n  /**\n   * @notice Takes the a batch of tokens from the caller with Permit2 and transfers it to this contract\n   * @param _tokens The tokens to take\n   * @param _nonce The signed nonce\n   * @param _deadline The signature's deadline\n   * @param _signature The owner's signature\n   * @param _recipient The address that will receive the funds\n   */\n  function batchPermitTakeFromCaller(\n    IPermit2.TokenPermissions[] calldata _tokens,\n    uint256 _nonce,\n    uint256 _deadline,\n    bytes calldata _signature,\n    address _recipient\n  ) external payable {\n    PERMIT2.batchTakeFromCaller(_tokens, _nonce, _deadline, _signature, _recipient);\n  }\n\n  /**\n   * @notice Checks if the contract has any balance of the given token, and if it does,\n   *         it sends it to the given recipient\n   * @param _token The token to check\n   * @param _recipient The recipient of the token balance\n   */\n  function sendBalanceOnContractToRecipient(address _token, address _recipient) external payable {\n    _sendBalanceOnContractToRecipient(_token, _recipient);\n  }\n\n  /**\n   * @notice Sets a new swapper and allowance target\n   * @param _newSwapper The address of the new swapper\n   * @param _newAllowanceTarget The address of the new allowance target\n   */\n  function setSwapper(address _newSwapper, address _newAllowanceTarget) external onlyGovernor {\n    swapper = _newSwapper;\n    allowanceTarget = _newAllowanceTarget;\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/Governable.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport './interfaces/IGovernable.sol';\n\n/**\n * @notice This contract is meant to be used in other contracts. By using this contract,\n *         a specific address will be given a \"governor\" role, which basically will be able to\n *         control certains aspects of the contract. There are other contracts that do the same,\n *         but this contract forces a new governor to accept the role before it's transferred.\n *         This is a basically a safety measure to prevent losing access to the contract.\n */\nabstract contract Governable is IGovernable {\n  /// @inheritdoc IGovernable\n  address public governor;\n\n  /// @inheritdoc IGovernable\n  address public pendingGovernor;\n\n  constructor(address _governor) {\n    if (_governor == address(0)) revert GovernorIsZeroAddress();\n    governor = _governor;\n  }\n\n  /// @inheritdoc IGovernable\n  function isGovernor(address _account) public view returns (bool) {\n    return _account == governor;\n  }\n\n  /// @inheritdoc IGovernable\n  function isPendingGovernor(address _account) public view returns (bool) {\n    return _account == pendingGovernor;\n  }\n\n  /// @inheritdoc IGovernable\n  function setPendingGovernor(address _pendingGovernor) external onlyGovernor {\n    pendingGovernor = _pendingGovernor;\n    emit PendingGovernorSet(_pendingGovernor);\n  }\n\n  /// @inheritdoc IGovernable\n  function acceptPendingGovernor() external onlyPendingGovernor {\n    governor = pendingGovernor;\n    pendingGovernor = address(0);\n    emit PendingGovernorAccepted();\n  }\n\n  modifier onlyGovernor() {\n    if (!isGovernor(msg.sender)) revert OnlyGovernor();\n    _;\n  }\n\n  modifier onlyPendingGovernor() {\n    if (!isPendingGovernor(msg.sender)) revert OnlyPendingGovernor();\n    _;\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/PayableMulticall.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\n\n/**\n * @dev Adding this contract will enable batching calls. This is basically the same as Open Zeppelin's\n *      Multicall contract, but we have made it payable. It supports both payable and non payable\n *      functions. However, if `msg.value` is not zero, then non payable functions cannot be called.\n *      Any contract that uses this Multicall version should be very careful when using msg.value.\n *      For more context, read: https://github.com/Uniswap/v3-periphery/issues/52\n */\nabstract contract PayableMulticall {\n  /**\n   * @notice Receives and executes a batch of function calls on this contract.\n   * @param _data A list of different function calls to execute\n   * @return _results The result of executing each of those calls\n   */\n  function multicall(bytes[] calldata _data) external payable returns (bytes[] memory _results) {\n    _results = new bytes[](_data.length);\n    for (uint256 i = 0; i < _data.length; ) {\n      _results[i] = Address.functionDelegateCall(address(this), _data[i]);\n      unchecked {\n        i++;\n      }\n    }\n    return _results;\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/SwapAdapter.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nabstract contract SwapAdapter {\n  using SafeERC20 for IERC20;\n  using Address for address;\n  using Address for address payable;\n\n  /// @notice Describes how the allowance should be revoked for the given spender\n  struct RevokeAction {\n    address spender;\n    IERC20[] tokens;\n  }\n\n  address public constant PROTOCOL_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /**\n   * @notice Takes the given amount of tokens from the caller\n   * @param _token The token to check\n   * @param _amount The amount to take\n   */\n  function _takeFromMsgSender(IERC20 _token, uint256 _amount) internal virtual {\n    _token.safeTransferFrom(msg.sender, address(this), _amount);\n  }\n\n  /**\n   * @notice Executes a swap for the given swapper\n   * @param _swapper The actual swapper\n   * @param _swapData The swap execution data\n   */\n  function _executeSwap(\n    address _swapper,\n    bytes calldata _swapData,\n    uint256 _value\n  ) internal virtual {\n    _swapper.functionCallWithValue(_swapData, _value);\n  }\n\n  /**\n   * @notice Transfers the given amount of tokens from the contract to the recipient\n   * @param _token The token to check\n   * @param _amount The amount to send\n   * @param _recipient The recipient\n   */\n  function _sendToRecipient(\n    address _token,\n    uint256 _amount,\n    address _recipient\n  ) internal virtual {\n    if (_recipient == address(0)) _recipient = msg.sender;\n    if (_token == PROTOCOL_TOKEN) {\n      payable(_recipient).sendValue(_amount);\n    } else {\n      IERC20(_token).safeTransfer(_recipient, _amount);\n    }\n  }\n\n  /**\n   * @notice Checks if the contract has any balance of the given token, and if it does,\n   *         it sends it to the given recipient\n   * @param _token The token to check\n   * @param _recipient The recipient of the token balance\n   */\n  function _sendBalanceOnContractToRecipient(address _token, address _recipient) internal virtual {\n    uint256 _balance = _token == PROTOCOL_TOKEN ? address(this).balance : IERC20(_token).balanceOf(address(this));\n    if (_balance > 0) {\n      _sendToRecipient(_token, _balance, _recipient);\n    }\n  }\n\n  /**\n   * @notice Revokes ERC20 allowances for the given spenders\n   * @dev If exposed, then it should be permissioned\n   * @param _revokeActions The spenders and tokens to revoke\n   */\n  function _revokeAllowances(RevokeAction[] calldata _revokeActions) internal virtual {\n    for (uint256 i = 0; i < _revokeActions.length; ) {\n      RevokeAction memory _action = _revokeActions[i];\n      for (uint256 j = 0; j < _action.tokens.length; ) {\n        _action.tokens[j].forceApprove(_action.spender, 0);\n        unchecked {\n          j++;\n        }\n      }\n      unchecked {\n        i++;\n      }\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/interfaces/IGovernable.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\n/**\n * @title A contract that manages a \"governor\" role\n */\ninterface IGovernable {\n  /// @notice Thrown when trying to set the zero address as governor\n  error GovernorIsZeroAddress();\n\n  /// @notice Thrown when trying to execute an action that only the governor an execute\n  error OnlyGovernor();\n\n  /// @notice Thrown when trying to execute an action that only the pending governor an execute\n  error OnlyPendingGovernor();\n\n  /**\n   * @notice Emitted when a new pending governor is set\n   * @param newPendingGovernor The new pending governor\n   */\n  event PendingGovernorSet(address newPendingGovernor);\n\n  /**\n   * @notice Emitted when the pending governor accepts the role and becomes the governor\n   */\n  event PendingGovernorAccepted();\n\n  /**\n   * @notice Returns the address of the governor\n   * @return The address of the governor\n   */\n  function governor() external view returns (address);\n\n  /**\n   * @notice Returns the address of the pending governor\n   * @return The address of the pending governor\n   */\n  function pendingGovernor() external view returns (address);\n\n  /**\n   * @notice Returns whether the given account is the current governor\n   * @param account The account to check\n   * @return Whether it is the current governor or not\n   */\n  function isGovernor(address account) external view returns (bool);\n\n  /**\n   * @notice Returns whether the given account is the pending governor\n   * @param account The account to check\n   * @return Whether it is the pending governor or not\n   */\n  function isPendingGovernor(address account) external view returns (bool);\n\n  /**\n   * @notice Sets a new pending governor\n   * @dev Only the current governor can execute this action\n   * @param pendingGovernor The new pending governor\n   */\n  function setPendingGovernor(address pendingGovernor) external;\n\n  /**\n   * @notice Sets the pending governor as the governor\n   * @dev Only the pending governor can execute this action\n   */\n  function acceptPendingGovernor() external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/types/SwapContext.sol": {
            "content": "/// @notice Context necessary for the swap execution\nstruct SwapContext {\n  // The index of the swapper that should execute each swap. This might look strange but it's way cheaper than alternatives\n  uint8 swapperIndex;\n  // The ETH/MATIC/BNB to send as part of the swap\n  uint256 value;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/types/TransferOutBalance.sol": {
            "content": "/// @notice A token that was left on the contract and should be transferred out\nstruct TransferOutBalance {\n  // The token to transfer\n  address token;\n  // The recipient of those tokens\n  address recipient;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/AccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/IAccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Multicall.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\n\npragma solidity ^0.8.20;\n\nimport {Address} from \"./Address.sol\";\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\n * selectors won't filter calls nested within a {multicall} operation.\n *\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\n * {_msgSender} are not propagated to subcalls.\n */\nabstract contract Multicall is Context {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        bytes memory context = msg.sender == _msgSender()\n            ? new bytes(0)\n            : msg.data[msg.data.length - _contextSuffixLength():];\n\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\n        }\n        return results;\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/ShortStrings.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Strings.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\n/**\n * @title The interface for generating a description for a position in a DCA Hub\n * @notice Contracts that implement this interface must return a base64 JSON with the entire description\n */\ninterface IDCAHubPositionDescriptor {\n  /**\n   * @notice Generates a positions's description, both the JSON and the image inside\n   * @param hub The address of the DCA Hub\n   * @param positionId The token/position id\n   * @return description The position's description\n   */\n  function tokenURI(address hub, uint256 positionId) external view returns (string memory description);\n}\n"
          },
          "node_modules/@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/**\n * @title The interface for an oracle that provides price quotes\n * @notice These methods allow users to add support for pairs, and then ask for quotes\n */\ninterface ITokenPriceOracle {\n  /// @notice Thrown when trying to add support for a pair that cannot be supported\n  error PairCannotBeSupported(address tokenA, address tokenB);\n\n  /// @notice Thrown when trying to execute a quote with a pair that isn't supported yet\n  error PairNotSupportedYet(address tokenA, address tokenB);\n\n  /**\n   * @notice Returns whether this oracle can support the given pair of tokens\n   * @dev tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param tokenA One of the pair's tokens\n   * @param tokenB The other of the pair's tokens\n   * @return Whether the given pair of tokens can be supported by the oracle\n   */\n  function canSupportPair(address tokenA, address tokenB) external view returns (bool);\n\n  /**\n   * @notice Returns whether this oracle is already supporting the given pair of tokens\n   * @dev tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param tokenA One of the pair's tokens\n   * @param tokenB The other of the pair's tokens\n   * @return Whether the given pair of tokens is already being supported by the oracle\n   */\n  function isPairAlreadySupported(address tokenA, address tokenB) external view returns (bool);\n\n  /**\n   * @notice Returns a quote, based on the given tokens and amount\n   * @dev Will revert if pair isn't supported\n   * @param tokenIn The token that will be provided\n   * @param amountIn The amount that will be provided\n   * @param tokenOut The token we would like to quote\n   * @param data Custom data that the oracle might need to operate\n   * @return amountOut How much `tokenOut` will be returned in exchange for `amountIn` amount of `tokenIn`\n   */\n  function quote(\n    address tokenIn,\n    uint256 amountIn,\n    address tokenOut,\n    bytes calldata data\n  ) external view returns (uint256 amountOut);\n\n  /**\n   * @notice Add or reconfigures the support for a given pair. This function will let the oracle take some actions\n   *         to configure the pair, in preparation for future quotes. Can be called many times in order to let the oracle\n   *         re-configure for a new context\n   * @dev Will revert if pair cannot be supported. tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param tokenA One of the pair's tokens\n   * @param tokenB The other of the pair's tokens\n   * @param data Custom data that the oracle might need to operate\n   */\n  function addOrModifySupportForPair(\n    address tokenA,\n    address tokenB,\n    bytes calldata data\n  ) external;\n\n  /**\n   * @notice Adds support for a given pair if the oracle didn't support it already. If called for a pair that is already supported,\n   *         then nothing will happen. This function will let the oracle take some actions to configure the pair, in preparation\n   *         for future quotes\n   * @dev Will revert if pair cannot be supported. tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param tokenA One of the pair's tokens\n   * @param tokenB The other of the pair's tokens\n   * @param data Custom data that the oracle might need to operate\n   */\n  function addSupportForPairIfNeeded(\n    address tokenA,\n    address tokenB,\n    bytes calldata data\n  ) external;\n}\n"
          },
          "node_modules/keep3r-v2/solidity/interfaces/IKeep3r.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './peripherals/IKeep3rJobs.sol';\nimport './peripherals/IKeep3rKeepers.sol';\nimport './peripherals/IKeep3rAccountance.sol';\nimport './peripherals/IKeep3rRoles.sol';\nimport './peripherals/IKeep3rParameters.sol';\n\n// solhint-disable-next-line no-empty-blocks\n\n/// @title Keep3rV2 contract\n/// @notice This contract inherits all the functionality of Keep3rV2\ninterface IKeep3r is IKeep3rJobs, IKeep3rKeepers, IKeep3rAccountance, IKeep3rRoles, IKeep3rParameters {\n\n}\n"
          },
          "node_modules/keep3r-v2/solidity/interfaces/peripherals/IBaseErrors.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IBaseErrors {\n  /// @notice Throws if a variable is assigned to the zero address\n  error ZeroAddress();\n}\n"
          },
          "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rAccountance.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rDisputable contract\n/// @notice Disputes keepers, or if they're already disputed, it can resolve the case\n/// @dev Argument `bonding` can be the address of either a token or a liquidity\ninterface IKeep3rAccountance {\n  // Events\n\n  /// @notice Emitted when the bonding process of a new keeper begins\n  /// @param _keeper The caller of Keep3rKeeperFundable#bond function\n  /// @param _bonding The asset the keeper has bonded\n  /// @param _amount The amount the keeper has bonded\n  event Bonding(address indexed _keeper, address indexed _bonding, uint256 _amount);\n\n  /// @notice Emitted when a keeper or job begins the unbonding process to withdraw the funds\n  /// @param _keeperOrJob The keeper or job that began the unbonding process\n  /// @param _unbonding The liquidity pair or asset being unbonded\n  /// @param _amount The amount being unbonded\n  event Unbonding(address indexed _keeperOrJob, address indexed _unbonding, uint256 _amount);\n\n  // Variables\n\n  /// @notice Tracks the total KP3R earnings of a keeper since it started working\n  /// @return _workCompleted Total KP3R earnings of a keeper since it started working\n  function workCompleted(address _keeper) external view returns (uint256 _workCompleted);\n\n  /// @notice Tracks when a keeper was first registered\n  /// @return timestamp The time at which the keeper was first registered\n  function firstSeen(address _keeper) external view returns (uint256 timestamp);\n\n  /// @notice Tracks if a keeper or job has a pending dispute\n  /// @return _disputed Whether a keeper or job has a pending dispute\n  function disputes(address _keeperOrJob) external view returns (bool _disputed);\n\n  /// @notice Tracks how much a keeper has bonded of a certain token\n  /// @return _bonds Amount of a certain token that a keeper has bonded\n  function bonds(address _keeper, address _bond) external view returns (uint256 _bonds);\n\n  /// @notice The current token credits available for a job\n  /// @return _amount The amount of token credits available for a job\n  function jobTokenCredits(address _job, address _token) external view returns (uint256 _amount);\n\n  /// @notice Tracks the amount of assets deposited in pending bonds\n  /// @return _pendingBonds Amount of a certain asset a keeper has unbonding\n  function pendingBonds(address _keeper, address _bonding) external view returns (uint256 _pendingBonds);\n\n  /// @notice Tracks when a bonding for a keeper can be activated\n  /// @return _timestamp Time at which the bonding for a keeper can be activated\n  function canActivateAfter(address _keeper, address _bonding) external view returns (uint256 _timestamp);\n\n  /// @notice Tracks when keeper bonds are ready to be withdrawn\n  /// @return _timestamp Time at which the keeper bonds are ready to be withdrawn\n  function canWithdrawAfter(address _keeper, address _bonding) external view returns (uint256 _timestamp);\n\n  /// @notice Tracks how much keeper bonds are to be withdrawn\n  /// @return _pendingUnbonds The amount of keeper bonds that are to be withdrawn\n  function pendingUnbonds(address _keeper, address _bonding) external view returns (uint256 _pendingUnbonds);\n\n  /// @notice Checks whether the address has ever bonded an asset\n  /// @return _hasBonded Whether the address has ever bonded an asset\n  function hasBonded(address _keeper) external view returns (bool _hasBonded);\n\n  // Methods\n  /// @notice Lists all jobs\n  /// @return _jobList Array with all the jobs in _jobs\n  function jobs() external view returns (address[] memory _jobList);\n\n  /// @notice Lists all keepers\n  /// @return _keeperList Array with all the jobs in keepers\n  function keepers() external view returns (address[] memory _keeperList);\n\n  // Errors\n\n  /// @notice Throws when an address is passed as a job, but that address is not a job\n  error JobUnavailable();\n\n  /// @notice Throws when an action that requires an undisputed job is applied on a disputed job\n  error JobDisputed();\n}\n"
          },
          "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rJobs.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rJobFundableCredits contract\n/// @notice Handles the addition and withdrawal of credits from a job\ninterface IKeep3rJobFundableCredits {\n  // Events\n\n  /// @notice Emitted when Keep3rJobFundableCredits#addTokenCreditsToJob is called\n  /// @param _job The address of the job being credited\n  /// @param _token The address of the token being provided\n  /// @param _provider The user that calls the function\n  /// @param _amount The amount of credit being added to the job\n  event TokenCreditAddition(address indexed _job, address indexed _token, address indexed _provider, uint256 _amount);\n\n  /// @notice Emitted when Keep3rJobFundableCredits#withdrawTokenCreditsFromJob is called\n  /// @param _job The address of the job from which the credits are withdrawn\n  /// @param _token The credit being withdrawn from the job\n  /// @param _receiver The user that receives the tokens\n  /// @param _amount The amount of credit withdrawn\n  event TokenCreditWithdrawal(address indexed _job, address indexed _token, address indexed _receiver, uint256 _amount);\n\n  // Errors\n\n  /// @notice Throws when the token is KP3R, as it should not be used for direct token payments\n  error TokenUnallowed();\n\n  /// @notice Throws when the token withdraw cooldown has not yet passed\n  error JobTokenCreditsLocked();\n\n  /// @notice Throws when the user tries to withdraw more tokens than it has\n  error InsufficientJobTokenCredits();\n\n  // Variables\n\n  /// @notice Last block where tokens were added to the job [job => token => timestamp]\n  /// @return _timestamp The last block where tokens were added to the job\n  function jobTokenCreditsAddedAt(address _job, address _token) external view returns (uint256 _timestamp);\n\n  // Methods\n\n  /// @notice Add credit to a job to be paid out for work\n  /// @param _job The address of the job being credited\n  /// @param _token The address of the token being credited\n  /// @param _amount The amount of credit being added\n  function addTokenCreditsToJob(\n    address _job,\n    address _token,\n    uint256 _amount\n  ) external;\n\n  /// @notice Withdraw credit from a job\n  /// @param _job The address of the job from which the credits are withdrawn\n  /// @param _token The address of the token being withdrawn\n  /// @param _amount The amount of token to be withdrawn\n  /// @param _receiver The user that will receive tokens\n  function withdrawTokenCreditsFromJob(\n    address _job,\n    address _token,\n    uint256 _amount,\n    address _receiver\n  ) external;\n}\n\n/// @title  Keep3rJobFundableLiquidity contract\n/// @notice Handles the funding of jobs through specific liquidity pairs\ninterface IKeep3rJobFundableLiquidity {\n  // Events\n\n  /// @notice Emitted when Keep3rJobFundableLiquidity#approveLiquidity function is called\n  /// @param _liquidity The address of the liquidity pair being approved\n  event LiquidityApproval(address _liquidity);\n\n  /// @notice Emitted when Keep3rJobFundableLiquidity#revokeLiquidity function is called\n  /// @param _liquidity The address of the liquidity pair being revoked\n  event LiquidityRevocation(address _liquidity);\n\n  /// @notice Emitted when IKeep3rJobFundableLiquidity#addLiquidityToJob function is called\n  /// @param _job The address of the job to which liquidity will be added\n  /// @param _liquidity The address of the liquidity being added\n  /// @param _provider The user that calls the function\n  /// @param _amount The amount of liquidity being added\n  event LiquidityAddition(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _amount);\n\n  /// @notice Emitted when IKeep3rJobFundableLiquidity#withdrawLiquidityFromJob function is called\n  /// @param _job The address of the job of which liquidity will be withdrawn from\n  /// @param _liquidity The address of the liquidity being withdrawn\n  /// @param _receiver The receiver of the liquidity tokens\n  /// @param _amount The amount of liquidity being withdrawn from the job\n  event LiquidityWithdrawal(address indexed _job, address indexed _liquidity, address indexed _receiver, uint256 _amount);\n\n  /// @notice Emitted when Keep3rJobFundableLiquidity#addLiquidityToJob function is called\n  /// @param _job The address of the job whose credits will be updated\n  /// @param _rewardedAt The time at which the job was last rewarded\n  /// @param _currentCredits The current credits of the job\n  /// @param _periodCredits The credits of the job for the current period\n  event LiquidityCreditsReward(address indexed _job, uint256 _rewardedAt, uint256 _currentCredits, uint256 _periodCredits);\n\n  /// @notice Emitted when Keep3rJobFundableLiquidity#forceLiquidityCreditsToJob function is called\n  /// @param _job The address of the job whose credits will be updated\n  /// @param _rewardedAt The time at which the job was last rewarded\n  /// @param _currentCredits The current credits of the job\n  event LiquidityCreditsForced(address indexed _job, uint256 _rewardedAt, uint256 _currentCredits);\n\n  // Errors\n\n  /// @notice Throws when the liquidity being approved has already been approved\n  error LiquidityPairApproved();\n\n  /// @notice Throws when the liquidity being removed has not been approved\n  error LiquidityPairUnexistent();\n\n  /// @notice Throws when trying to add liquidity to an unapproved pool\n  error LiquidityPairUnapproved();\n\n  /// @notice Throws when the job doesn't have the requested liquidity\n  error JobLiquidityUnexistent();\n\n  /// @notice Throws when trying to remove more liquidity than the job has\n  error JobLiquidityInsufficient();\n\n  /// @notice Throws when trying to add less liquidity than the minimum liquidity required\n  error JobLiquidityLessThanMin();\n\n  // Structs\n\n  /// @notice Stores the tick information of the different liquidity pairs\n  struct TickCache {\n    int56 current; // Tracks the current tick\n    int56 difference; // Stores the difference between the current tick and the last tick\n    uint256 period; // Stores the period at which the last observation was made\n  }\n\n  // Variables\n\n  /// @notice Lists liquidity pairs\n  /// @return _list An array of addresses with all the approved liquidity pairs\n  function approvedLiquidities() external view returns (address[] memory _list);\n\n  /// @notice Amount of liquidity in a specified job\n  /// @param _job The address of the job being checked\n  /// @param _liquidity The address of the liquidity we are checking\n  /// @return _amount Amount of liquidity in the specified job\n  function liquidityAmount(address _job, address _liquidity) external view returns (uint256 _amount);\n\n  /// @notice Last time the job was rewarded liquidity credits\n  /// @param _job The address of the job being checked\n  /// @return _timestamp Timestamp of the last time the job was rewarded liquidity credits\n  function rewardedAt(address _job) external view returns (uint256 _timestamp);\n\n  /// @notice Last time the job was worked\n  /// @param _job The address of the job being checked\n  /// @return _timestamp Timestamp of the last time the job was worked\n  function workedAt(address _job) external view returns (uint256 _timestamp);\n\n  // Methods\n\n  /// @notice Returns the liquidity credits of a given job\n  /// @param _job The address of the job of which we want to know the liquidity credits\n  /// @return _amount The liquidity credits of a given job\n  function jobLiquidityCredits(address _job) external view returns (uint256 _amount);\n\n  /// @notice Returns the credits of a given job for the current period\n  /// @param _job The address of the job of which we want to know the period credits\n  /// @return _amount The credits the given job has at the current period\n  function jobPeriodCredits(address _job) external view returns (uint256 _amount);\n\n  /// @notice Calculates the total credits of a given job\n  /// @param _job The address of the job of which we want to know the total credits\n  /// @return _amount The total credits of the given job\n  function totalJobCredits(address _job) external view returns (uint256 _amount);\n\n  /// @notice Calculates how many credits should be rewarded periodically for a given liquidity amount\n  /// @dev _periodCredits = underlying KP3Rs for given liquidity amount * rewardPeriod / inflationPeriod\n  /// @param _liquidity The liquidity to provide\n  /// @param _amount The amount of liquidity to provide\n  /// @return _periodCredits The amount of KP3R periodically minted for the given liquidity\n  function quoteLiquidity(address _liquidity, uint256 _amount) external view returns (uint256 _periodCredits);\n\n  /// @notice Observes the current state of the liquidity pair being observed and updates TickCache with the information\n  /// @param _liquidity The liquidity pair being observed\n  /// @return _tickCache The updated TickCache\n  function observeLiquidity(address _liquidity) external view returns (TickCache memory _tickCache);\n\n  /// @notice Gifts liquidity credits to the specified job\n  /// @param _job The address of the job being credited\n  /// @param _amount The amount of liquidity credits to gift\n  function forceLiquidityCreditsToJob(address _job, uint256 _amount) external;\n\n  /// @notice Approve a liquidity pair for being accepted in future\n  /// @param _liquidity The address of the liquidity accepted\n  function approveLiquidity(address _liquidity) external;\n\n  /// @notice Revoke a liquidity pair from being accepted in future\n  /// @param _liquidity The liquidity no longer accepted\n  function revokeLiquidity(address _liquidity) external;\n\n  /// @notice Allows anyone to fund a job with liquidity\n  /// @param _job The address of the job to assign liquidity to\n  /// @param _liquidity The liquidity being added\n  /// @param _amount The amount of liquidity tokens to add\n  function addLiquidityToJob(\n    address _job,\n    address _liquidity,\n    uint256 _amount\n  ) external;\n\n  /// @notice Unbond liquidity for a job\n  /// @dev Can only be called by the job's owner\n  /// @param _job The address of the job being unbound from\n  /// @param _liquidity The liquidity being unbound\n  /// @param _amount The amount of liquidity being removed\n  function unbondLiquidityFromJob(\n    address _job,\n    address _liquidity,\n    uint256 _amount\n  ) external;\n\n  /// @notice Withdraw liquidity from a job\n  /// @param _job The address of the job being withdrawn from\n  /// @param _liquidity The liquidity being withdrawn\n  /// @param _receiver The address that will receive the withdrawn liquidity\n  function withdrawLiquidityFromJob(\n    address _job,\n    address _liquidity,\n    address _receiver\n  ) external;\n}\n\n/// @title Keep3rJobManager contract\n/// @notice Handles the addition and withdrawal of credits from a job\ninterface IKeep3rJobManager {\n  // Events\n\n  /// @notice Emitted when Keep3rJobManager#addJob is called\n  /// @param _job The address of the job to add\n  /// @param _jobOwner The job's owner\n  event JobAddition(address indexed _job, address indexed _jobOwner);\n\n  // Errors\n\n  /// @notice Throws when trying to add a job that has already been added\n  error JobAlreadyAdded();\n\n  /// @notice Throws when the address that is trying to register as a keeper is already a keeper\n  error AlreadyAKeeper();\n\n  // Methods\n\n  /// @notice Allows any caller to add a new job\n  /// @param _job Address of the contract for which work should be performed\n  function addJob(address _job) external;\n}\n\n/// @title Keep3rJobWorkable contract\n/// @notice Handles the mechanisms jobs can pay keepers with along with the restrictions jobs can put on keepers before they can work on jobs\ninterface IKeep3rJobWorkable {\n  // Events\n\n  /// @notice Emitted when a keeper is validated before a job\n  /// @param _gasLeft The amount of gas that the transaction has left at the moment of keeper validation\n  event KeeperValidation(uint256 _gasLeft);\n\n  /// @notice Emitted when a keeper works a job\n  /// @param _credit The address of the asset in which the keeper is paid\n  /// @param _job The address of the job the keeper has worked\n  /// @param _keeper The address of the keeper that has worked the job\n  /// @param _amount The amount that has been paid out to the keeper in exchange for working the job\n  /// @param _gasLeft The amount of gas that the transaction has left at the moment of payment\n  event KeeperWork(address indexed _credit, address indexed _job, address indexed _keeper, uint256 _amount, uint256 _gasLeft);\n\n  // Errors\n\n  /// @notice Throws if the address claiming to be a job is not in the list of approved jobs\n  error JobUnapproved();\n\n  /// @notice Throws if the amount of funds in the job is less than the payment that must be paid to the keeper that works that job\n  error InsufficientFunds();\n\n  // Methods\n\n  /// @notice Confirms if the current keeper is registered, can be used for general (non critical) functions\n  /// @param _keeper The keeper being investigated\n  /// @return _isKeeper Whether the address passed as a parameter is a keeper or not\n  function isKeeper(address _keeper) external returns (bool _isKeeper);\n\n  /// @notice Confirms if the current keeper is registered and has a minimum bond of any asset. Should be used for protected functions\n  /// @param _keeper The keeper to check\n  /// @param _bond The bond token being evaluated\n  /// @param _minBond The minimum amount of bonded tokens\n  /// @param _earned The minimum funds earned in the keepers lifetime\n  /// @param _age The minimum keeper age required\n  /// @return _isBondedKeeper Whether the `_keeper` meets the given requirements\n  function isBondedKeeper(\n    address _keeper,\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age\n  ) external returns (bool _isBondedKeeper);\n\n  /// @notice Implemented by jobs to show that a keeper performed work\n  /// @dev Automatically calculates the payment for the keeper\n  /// @param _keeper Address of the keeper that performed the work\n  function worked(address _keeper) external;\n\n  /// @notice Implemented by jobs to show that a keeper performed work\n  /// @dev Pays the keeper that performs the work with KP3R\n  /// @param _keeper Address of the keeper that performed the work\n  /// @param _payment The reward that should be allocated for the job\n  function bondedPayment(address _keeper, uint256 _payment) external;\n\n  /// @notice Implemented by jobs to show that a keeper performed work\n  /// @dev Pays the keeper that performs the work with a specific token\n  /// @param _token The asset being awarded to the keeper\n  /// @param _keeper Address of the keeper that performed the work\n  /// @param _amount The reward that should be allocated\n  function directTokenPayment(\n    address _token,\n    address _keeper,\n    uint256 _amount\n  ) external;\n}\n\n/// @title Keep3rJobOwnership contract\n/// @notice Handles the ownership of the jobs\ninterface IKeep3rJobOwnership {\n  // Events\n\n  /// @notice Emitted when Keep3rJobOwnership#changeJobOwnership is called\n  /// @param _job The address of the job proposed to have a change of owner\n  /// @param _owner The current owner of the job\n  /// @param _pendingOwner The new address proposed to be the owner of the job\n  event JobOwnershipChange(address indexed _job, address indexed _owner, address indexed _pendingOwner);\n\n  /// @notice Emitted when Keep3rJobOwnership#JobOwnershipAssent is called\n  /// @param _job The address of the job which the proposed owner will now own\n  /// @param _previousOwner The previous owner of the job\n  /// @param _newOwner The newowner of the job\n  event JobOwnershipAssent(address indexed _job, address indexed _previousOwner, address indexed _newOwner);\n\n  // Errors\n\n  /// @notice Throws when the caller of the function is not the job owner\n  error OnlyJobOwner();\n\n  /// @notice Throws when the caller of the function is not the pending job owner\n  error OnlyPendingJobOwner();\n\n  // Variables\n\n  /// @notice Maps the job to the owner of the job (job => user)\n  /// @return _owner The addres of the owner of the job\n  function jobOwner(address _job) external view returns (address _owner);\n\n  /// @notice Maps the owner of the job to its pending owner (job => user)\n  /// @return _pendingOwner The address of the pending owner of the job\n  function jobPendingOwner(address _job) external view returns (address _pendingOwner);\n\n  // Methods\n\n  /// @notice Proposes a new address to be the owner of the job\n  function changeJobOwnership(address _job, address _newOwner) external;\n\n  /// @notice The proposed address accepts to be the owner of the job\n  function acceptJobOwnership(address _job) external;\n}\n\n/// @title Keep3rJobMigration contract\n/// @notice Handles the migration process of jobs to different addresses\ninterface IKeep3rJobMigration {\n  // Events\n\n  /// @notice Emitted when Keep3rJobMigration#migrateJob function is called\n  /// @param _fromJob The address of the job that requests to migrate\n  /// @param _toJob The address at which the job requests to migrate\n  event JobMigrationRequested(address indexed _fromJob, address _toJob);\n\n  /// @notice Emitted when Keep3rJobMigration#acceptJobMigration function is called\n  /// @param _fromJob The address of the job that requested to migrate\n  /// @param _toJob The address at which the job had requested to migrate\n  event JobMigrationSuccessful(address _fromJob, address indexed _toJob);\n\n  // Errors\n\n  /// @notice Throws when the address of the job that requests to migrate wants to migrate to its same address\n  error JobMigrationImpossible();\n\n  /// @notice Throws when the _toJob address differs from the address being tracked in the pendingJobMigrations mapping\n  error JobMigrationUnavailable();\n\n  /// @notice Throws when cooldown between migrations has not yet passed\n  error JobMigrationLocked();\n\n  // Variables\n\n  /// @notice Maps the jobs that have requested a migration to the address they have requested to migrate to\n  /// @return _toJob The address to which the job has requested to migrate to\n  function pendingJobMigrations(address _fromJob) external view returns (address _toJob);\n\n  // Methods\n\n  /// @notice Initializes the migration process for a job by adding the request to the pendingJobMigrations mapping\n  /// @param _fromJob The address of the job that is requesting to migrate\n  /// @param _toJob The address at which the job is requesting to migrate\n  function migrateJob(address _fromJob, address _toJob) external;\n\n  /// @notice Completes the migration process for a job\n  /// @dev Unbond/withdraw process doesn't get migrated\n  /// @param _fromJob The address of the job that requested to migrate\n  /// @param _toJob The address to which the job wants to migrate to\n  function acceptJobMigration(address _fromJob, address _toJob) external;\n}\n\n/// @title Keep3rJobDisputable contract\n/// @notice Handles the actions that can be taken on a disputed job\ninterface IKeep3rJobDisputable is IKeep3rJobFundableCredits, IKeep3rJobFundableLiquidity {\n  // Events\n\n  /// @notice Emitted when Keep3rJobDisputable#slashTokenFromJob is called\n  /// @param _job The address of the job from which the token will be slashed\n  /// @param _token The address of the token being slashed\n  /// @param _slasher The user that slashes the token\n  /// @param _amount The amount of the token being slashed\n  event JobSlashToken(address indexed _job, address _token, address indexed _slasher, uint256 _amount);\n\n  /// @notice Emitted when Keep3rJobDisputable#slashLiquidityFromJob is called\n  /// @param _job The address of the job from which the liquidity will be slashed\n  /// @param _liquidity The address of the liquidity being slashed\n  /// @param _slasher The user that slashes the liquidity\n  /// @param _amount The amount of the liquidity being slashed\n  event JobSlashLiquidity(address indexed _job, address _liquidity, address indexed _slasher, uint256 _amount);\n\n  // Errors\n\n  /// @notice Throws when the token trying to be slashed doesn't exist\n  error JobTokenUnexistent();\n\n  /// @notice Throws when someone tries to slash more tokens than the job has\n  error JobTokenInsufficient();\n\n  // Methods\n\n  /// @notice Allows governance or slasher to slash a job specific token\n  /// @param _job The address of the job from which the token will be slashed\n  /// @param _token The address of the token that will be slashed\n  /// @param _amount The amount of the token that will be slashed\n  function slashTokenFromJob(\n    address _job,\n    address _token,\n    uint256 _amount\n  ) external;\n\n  /// @notice Allows governance or a slasher to slash liquidity from a job\n  /// @param _job The address being slashed\n  /// @param _liquidity The address of the liquidity that will be slashed\n  /// @param _amount The amount of liquidity that will be slashed\n  function slashLiquidityFromJob(\n    address _job,\n    address _liquidity,\n    uint256 _amount\n  ) external;\n}\n\n// solhint-disable-next-line no-empty-blocks\ninterface IKeep3rJobs is IKeep3rJobOwnership, IKeep3rJobDisputable, IKeep3rJobMigration, IKeep3rJobManager, IKeep3rJobWorkable {\n\n}\n"
          },
          "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rKeepers.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rKeeperFundable contract\n/// @notice Handles the actions required to become a keeper\ninterface IKeep3rKeeperFundable {\n  // Events\n\n  /// @notice Emitted when Keep3rKeeperFundable#activate is called\n  /// @param _keeper The keeper that has been activated\n  /// @param _bond The asset the keeper has bonded\n  /// @param _amount The amount of the asset the keeper has bonded\n  event Activation(address indexed _keeper, address indexed _bond, uint256 _amount);\n\n  /// @notice Emitted when Keep3rKeeperFundable#withdraw is called\n  /// @param _keeper The caller of Keep3rKeeperFundable#withdraw function\n  /// @param _bond The asset to withdraw from the bonding pool\n  /// @param _amount The amount of funds withdrawn\n  event Withdrawal(address indexed _keeper, address indexed _bond, uint256 _amount);\n\n  // Errors\n\n  /// @notice Throws when the address that is trying to register as a job is already a job\n  error AlreadyAJob();\n\n  // Methods\n\n  /// @notice Beginning of the bonding process\n  /// @param _bonding The asset being bound\n  /// @param _amount The amount of bonding asset being bound\n  function bond(address _bonding, uint256 _amount) external;\n\n  /// @notice Beginning of the unbonding process\n  /// @param _bonding The asset being unbound\n  /// @param _amount Allows for partial unbonding\n  function unbond(address _bonding, uint256 _amount) external;\n\n  /// @notice End of the bonding process after bonding time has passed\n  /// @param _bonding The asset being activated as bond collateral\n  function activate(address _bonding) external;\n\n  /// @notice Withdraw funds after unbonding has finished\n  /// @param _bonding The asset to withdraw from the bonding pool\n  function withdraw(address _bonding) external;\n}\n\n/// @title Keep3rKeeperDisputable contract\n/// @notice Handles the actions that can be taken on a disputed keeper\ninterface IKeep3rKeeperDisputable {\n  // Events\n\n  /// @notice Emitted when Keep3rKeeperDisputable#slash is called\n  /// @param _keeper The slashed keeper\n  /// @param _slasher The user that called Keep3rKeeperDisputable#slash\n  /// @param _amount The amount of credits slashed from the keeper\n  event KeeperSlash(address indexed _keeper, address indexed _slasher, uint256 _amount);\n\n  /// @notice Emitted when Keep3rKeeperDisputable#revoke is called\n  /// @param _keeper The revoked keeper\n  /// @param _slasher The user that called Keep3rKeeperDisputable#revoke\n  event KeeperRevoke(address indexed _keeper, address indexed _slasher);\n\n  /// @notice Keeper revoked\n\n  // Methods\n\n  /// @notice Allows governance to slash a keeper based on a dispute\n  /// @param _keeper The address being slashed\n  /// @param _bonded The asset being slashed\n  /// @param _amount The amount being slashed\n  function slash(\n    address _keeper,\n    address _bonded,\n    uint256 _amount\n  ) external;\n\n  /// @notice Blacklists a keeper from participating in the network\n  /// @param _keeper The address being slashed\n  function revoke(address _keeper) external;\n}\n\n// solhint-disable-next-line no-empty-blocks\n\n/// @title Keep3rKeepers contract\ninterface IKeep3rKeepers is IKeep3rKeeperDisputable {\n\n}\n"
          },
          "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rParameters.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './IBaseErrors.sol';\n\n/// @title Keep3rParameters contract\n/// @notice Handles and sets all the required parameters for Keep3r\n\ninterface IKeep3rParameters is IBaseErrors {\n  // Events\n\n  /// @notice Emitted when the Keep3rHelper address is changed\n  /// @param _keep3rHelper The address of Keep3rHelper's contract\n  event Keep3rHelperChange(address _keep3rHelper);\n\n  /// @notice Emitted when the Keep3rV1 address is changed\n  /// @param _keep3rV1 The address of Keep3rV1's contract\n  event Keep3rV1Change(address _keep3rV1);\n\n  /// @notice Emitted when the Keep3rV1Proxy address is changed\n  /// @param _keep3rV1Proxy The address of Keep3rV1Proxy's contract\n  event Keep3rV1ProxyChange(address _keep3rV1Proxy);\n\n  /// @notice Emitted when the KP3R-WETH pool address is changed\n  /// @param _kp3rWethPool The address of the KP3R-WETH pool\n  event Kp3rWethPoolChange(address _kp3rWethPool);\n\n  /// @notice Emitted when bondTime is changed\n  /// @param _bondTime The new bondTime\n  event BondTimeChange(uint256 _bondTime);\n\n  /// @notice Emitted when _liquidityMinimum is changed\n  /// @param _liquidityMinimum The new _liquidityMinimum\n  event LiquidityMinimumChange(uint256 _liquidityMinimum);\n\n  /// @notice Emitted when _unbondTime is changed\n  /// @param _unbondTime The new _unbondTime\n  event UnbondTimeChange(uint256 _unbondTime);\n\n  /// @notice Emitted when _rewardPeriodTime is changed\n  /// @param _rewardPeriodTime The new _rewardPeriodTime\n  event RewardPeriodTimeChange(uint256 _rewardPeriodTime);\n\n  /// @notice Emitted when the inflationPeriod is changed\n  /// @param _inflationPeriod The new inflationPeriod\n  event InflationPeriodChange(uint256 _inflationPeriod);\n\n  /// @notice Emitted when the fee is changed\n  /// @param _fee The new token credits fee\n  event FeeChange(uint256 _fee);\n\n  // Variables\n\n  /// @notice Address of Keep3rHelper's contract\n  /// @return _keep3rHelper The address of Keep3rHelper's contract\n  function keep3rHelper() external view returns (address _keep3rHelper);\n\n  /// @notice Address of Keep3rV1's contract\n  /// @return _keep3rV1 The address of Keep3rV1's contract\n  function keep3rV1() external view returns (address _keep3rV1);\n\n  /// @notice Address of Keep3rV1Proxy's contract\n  /// @return _keep3rV1Proxy The address of Keep3rV1Proxy's contract\n  function keep3rV1Proxy() external view returns (address _keep3rV1Proxy);\n\n  /// @notice Address of the KP3R-WETH pool\n  /// @return _kp3rWethPool The address of KP3R-WETH pool\n  function kp3rWethPool() external view returns (address _kp3rWethPool);\n\n  /// @notice The amount of time required to pass after a keeper has bonded assets for it to be able to activate\n  /// @return _days The required bondTime in days\n  function bondTime() external view returns (uint256 _days);\n\n  /// @notice The amount of time required to pass before a keeper can unbond what he has bonded\n  /// @return _days The required unbondTime in days\n  function unbondTime() external view returns (uint256 _days);\n\n  /// @notice The minimum amount of liquidity required to fund a job per liquidity\n  /// @return _amount The minimum amount of liquidity in KP3R\n  function liquidityMinimum() external view returns (uint256 _amount);\n\n  /// @notice The amount of time between each scheduled credits reward given to a job\n  /// @return _days The reward period in days\n  function rewardPeriodTime() external view returns (uint256 _days);\n\n  /// @notice The inflation period is the denominator used to regulate the emission of KP3R\n  /// @return _period The denominator used to regulate the emission of KP3R\n  function inflationPeriod() external view returns (uint256 _period);\n\n  /// @notice The fee to be sent to governance when a user adds liquidity to a job\n  /// @return _amount The fee amount to be sent to governance when a user adds liquidity to a job\n  function fee() external view returns (uint256 _amount);\n\n  // solhint-disable func-name-mixedcase\n  /// @notice The base that will be used to calculate the fee\n  /// @return _base The base that will be used to calculate the fee\n  function BASE() external view returns (uint256 _base);\n\n  /// @notice The minimum rewardPeriodTime value to be set\n  /// @return _minPeriod The minimum reward period in seconds\n  function MIN_REWARD_PERIOD_TIME() external view returns (uint256 _minPeriod);\n\n  // solhint-enable func-name-mixedcase\n\n  // Errors\n\n  /// @notice Throws if the reward period is less than the minimum reward period time\n  error MinRewardPeriod();\n\n  /// @notice Throws if either a job or a keeper is disputed\n  error Disputed();\n\n  /// @notice Throws if there are no bonded assets\n  error BondsUnexistent();\n\n  /// @notice Throws if the time required to bond an asset has not passed yet\n  error BondsLocked();\n\n  /// @notice Throws if there are no bonds to withdraw\n  error UnbondsUnexistent();\n\n  /// @notice Throws if the time required to withdraw the bonds has not passed yet\n  error UnbondsLocked();\n\n  // Methods\n\n  /// @notice Sets the Keep3rHelper address\n  /// @param _keep3rHelper The Keep3rHelper address\n  function setKeep3rHelper(address _keep3rHelper) external;\n\n  /// @notice Sets the Keep3rV1 address\n  /// @param _keep3rV1 The Keep3rV1 address\n  function setKeep3rV1(address _keep3rV1) external;\n\n  /// @notice Sets the Keep3rV1Proxy address\n  /// @param _keep3rV1Proxy The Keep3rV1Proxy address\n  function setKeep3rV1Proxy(address _keep3rV1Proxy) external;\n\n  /// @notice Sets the KP3R-WETH pool address\n  /// @param _kp3rWethPool The KP3R-WETH pool address\n  function setKp3rWethPool(address _kp3rWethPool) external;\n\n  /// @notice Sets the bond time required to activate as a keeper\n  /// @param _bond The new bond time\n  function setBondTime(uint256 _bond) external;\n\n  /// @notice Sets the unbond time required unbond what has been bonded\n  /// @param _unbond The new unbond time\n  function setUnbondTime(uint256 _unbond) external;\n\n  /// @notice Sets the minimum amount of liquidity required to fund a job\n  /// @param _liquidityMinimum The new minimum amount of liquidity\n  function setLiquidityMinimum(uint256 _liquidityMinimum) external;\n\n  /// @notice Sets the time required to pass between rewards for jobs\n  /// @param _rewardPeriodTime The new amount of time required to pass between rewards\n  function setRewardPeriodTime(uint256 _rewardPeriodTime) external;\n\n  /// @notice Sets the new inflation period\n  /// @param _inflationPeriod The new inflation period\n  function setInflationPeriod(uint256 _inflationPeriod) external;\n\n  /// @notice Sets the new fee\n  /// @param _fee The new fee\n  function setFee(uint256 _fee) external;\n}\n"
          },
          "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rRoles.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rRoles contract\n/// @notice Manages the Keep3r specific roles\ninterface IKeep3rRoles {\n  // Events\n\n  /// @notice Emitted when a slasher is added\n  /// @param _slasher Address of the added slasher\n  event SlasherAdded(address _slasher);\n\n  /// @notice Emitted when a slasher is removed\n  /// @param _slasher Address of the removed slasher\n  event SlasherRemoved(address _slasher);\n\n  /// @notice Emitted when a disputer is added\n  /// @param _disputer Address of the added disputer\n  event DisputerAdded(address _disputer);\n\n  /// @notice Emitted when a disputer is removed\n  /// @param _disputer Address of the removed disputer\n  event DisputerRemoved(address _disputer);\n\n  // Variables\n\n  /// @notice Maps an address to a boolean to determine whether the address is a slasher or not.\n  /// @return _isSlasher Whether the address is a slasher or not\n  function slashers(address _slasher) external view returns (bool _isSlasher);\n\n  /// @notice Maps an address to a boolean to determine whether the address is a disputer or not.\n  /// @return _isDisputer Whether the address is a disputer or not\n  function disputers(address _disputer) external view returns (bool _isDisputer);\n\n  // Errors\n\n  /// @notice Throws if the address is already a registered slasher\n  error SlasherExistent();\n\n  /// @notice Throws if caller is not a registered slasher\n  error SlasherUnexistent();\n\n  /// @notice Throws if the address is already a registered disputer\n  error DisputerExistent();\n\n  /// @notice Throws if caller is not a registered disputer\n  error DisputerUnexistent();\n\n  /// @notice Throws if the msg.sender is not a slasher or is not a part of governance\n  error OnlySlasher();\n\n  /// @notice Throws if the msg.sender is not a disputer or is not a part of governance\n  error OnlyDisputer();\n\n  // Methods\n\n  /// @notice Registers a slasher by updating the slashers mapping\n  function addSlasher(address _slasher) external;\n\n  /// @notice Removes a slasher by updating the slashers mapping\n  function removeSlasher(address _slasher) external;\n\n  /// @notice Registers a disputer by updating the disputers mapping\n  function addDisputer(address _disputer) external;\n\n  /// @notice Removes a disputer by updating the disputers mapping\n  function removeDisputer(address _disputer) external;\n}\n"
          }
        },
        "settings": {
          "viaIR": false,
          "optimizer": {
            "runs": 9999,
            "enabled": true
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "none",
            "appendCBOR": false
          },
          "outputSelection": {
            "node_modules/@mean-finance/call-simulation/src/SimulationAdapter.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/call-simulation/src/interfaces/ISimulationAdapter.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/call-simulation/src/interfaces/external/IERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHubSwapCallee.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/libraries/Intervals.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/libraries/TokenSorting.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanionHubProxyHandler.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanionLibrariesHandler.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/CallerOnlyDCAHubSwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/ThirdPartyDCAHubSwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/utils/DeadlineValidation.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAKeep3rJob/DCAKeep3rJob.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ICallerOnlyDCAHubSwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAFeeManager.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAHubCompanion.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAKeep3rJob.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ILegacyDCAHub.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ISharedTypes.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/external/IPermit2.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/InputBuilding.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/ModifyPositionWithRate.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/Permit2Transfers.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/SecondsUntilNextSwap.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/DCAFeeManager/DCAFeeManager.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/DCAHubCompanion/DCAHubCompanionHubProxyHandler.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/DCAHubSwapper/CallerOnlyDCAHubSwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/ISwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/LegacyDCASwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/libraries/InputBuilding.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/libraries/ModifyPositionWithRate.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/libraries/SecondsUntilNextSwap.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/utils/BaseCompanion.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/BaseCompanion.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/Governable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/PayableMulticall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/SwapAdapter.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/interfaces/IGovernable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/types/SwapContext.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/types/TransferOutBalance.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/AccessControl.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/IAccessControl.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Address.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Context.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Multicall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/ShortStrings.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Strings.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/IKeep3r.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IBaseErrors.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rAccountance.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rJobs.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rKeepers.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rParameters.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rRoles.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {},
          "remappings": [
            "@openzeppelin/contracts/=node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/",
            "@mean-finance/oracles/=node_modules/@mean-finance/oracles/",
            "@mean-finance/nft-descriptors/=node_modules/@mean-finance/nft-descriptors/",
            "@mean-finance/call-simulation/contracts/=node_modules/@mean-finance/call-simulation/src/",
            "@mean-finance/swappers/=node_modules/@mean-finance/swappers/",
            "@mean-finance/dca-v2-core/=node_modules/@mean-finance/dca-v2-core/",
            "@mean-finance/permit2-adapter/=node_modules/@mean-finance/permit2-adapter/src/",
            "@mean-finance/transformers/=node_modules/@mean-finance/transformers/solidity/contracts/transformers/",
            "@mean-finance/dca-v2-periphery/=node_modules/@mean-finance/dca-v2-periphery/",
            "@mean-finance/uniswap-v3-oracle/=node_modules/@mean-finance/uniswap-v3-oracle/",
            "@call-simulation/=node_modules/@mean-finance/call-simulation/src/",
            "@chainlink/=node_modules/@chainlink/",
            "@api3/=node_modules/@api3/",
            "@uniswap/=node_modules/@uniswap/",
            "keep3r-v2/=node_modules/keep3r-v2/",
            "base64-sol/=node_modules/base64-sol/",
            "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
            "forge-std/=lib/forge-std/src/",
            "@rari-capital/solmate/=lib/solmate/",
            "ds-test/=lib/solmate/lib/ds-test/src/",
            "solmate/=lib/solmate/src/",
            "sphinx/=lib/sphinx/packages/contracts/contracts/forge-std/src/"
          ]
        }
      }
    }
  },
  "inputs": [
    {
      "solcVersion": "0.8.22",
      "solcLongVersion": "0.8.22+commit.4fc1097e",
      "id": "ac2e129c3735bebff89875131ed89a3e",
      "input": {
        "language": "Solidity",
        "settings": {
          "viaIR": false,
          "optimizer": {
            "runs": 9999,
            "enabled": true
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "none",
            "appendCBOR": false
          },
          "outputSelection": {
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/IERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/Address.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/Context.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/TransformerRegistry.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/test/ERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/test/ITransformerERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/test/utils/Governable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/test/utils/Multicall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/transformers/BaseTransformer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ERC4626Transformer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ProtocolTokenWrapperTransformer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/transformers/wstETHTransformer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/utils/Governable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/utils/Multicall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/ITransformer.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/ITransformerRegistry.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/utils/ICollectableDust.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/utils/IGovernable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/utils/IMulticall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {},
          "remappings": [
            "@openzeppelin/contracts/=node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/",
            "@mean-finance/oracles/=node_modules/@mean-finance/oracles/",
            "@mean-finance/nft-descriptors/=node_modules/@mean-finance/nft-descriptors/",
            "@mean-finance/call-simulation/contracts/=node_modules/@mean-finance/call-simulation/src/",
            "@mean-finance/swappers/=node_modules/@mean-finance/swappers/",
            "@mean-finance/dca-v2-core/=node_modules/@mean-finance/dca-v2-core/",
            "@mean-finance/permit2-adapter/=node_modules/@mean-finance/permit2-adapter/src/",
            "@mean-finance/transformers/=node_modules/@mean-finance/transformers/solidity/contracts/transformers/",
            "@mean-finance/dca-v2-periphery/=node_modules/@mean-finance/dca-v2-periphery/",
            "@mean-finance/uniswap-v3-oracle/=node_modules/@mean-finance/uniswap-v3-oracle/",
            "@call-simulation/=node_modules/@mean-finance/call-simulation/src/",
            "@chainlink/=node_modules/@chainlink/",
            "@api3/=node_modules/@api3/",
            "@uniswap/=node_modules/@uniswap/",
            "keep3r-v2/=node_modules/keep3r-v2/",
            "base64-sol/=node_modules/base64-sol/",
            "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
            "forge-std/=lib/forge-std/src/",
            "@rari-capital/solmate/=lib/solmate/",
            "ds-test/=lib/solmate/lib/ds-test/src/",
            "solmate/=lib/solmate/src/",
            "sphinx/=lib/sphinx/packages/contracts/contracts/forge-std/src/"
          ]
        },
        "sources": {
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
          },
          "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/transformers/BaseTransformer.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\nimport '../../interfaces/ITransformer.sol';\n\n/// @title A base implementation of `ITransformer` that implements ERC-165\nabstract contract BaseTransformer is ERC165, ITransformer {\n  /// @inheritdoc IERC165\n  function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n    return _interfaceId == type(ITransformer).interfaceId || super.supportsInterface(_interfaceId);\n  }\n\n  modifier checkDeadline(uint256 _deadline) {\n    if (block.timestamp > _deadline) revert TransactionExpired();\n    _;\n  }\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ERC4626Transformer.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/interfaces/IERC4626.sol';\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport './BaseTransformer.sol';\n\n/// @title An implementaton of `ITransformer` for tokens that implement `ERC4626`\ncontract ERC4626Transformer is BaseTransformer {\n  using SafeERC20 for IERC20;\n\n  /// @inheritdoc ITransformer\n  function getUnderlying(address _dependent) external view returns (address[] memory) {\n    return _toSingletonArray(IERC4626(_dependent).asset());\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateTransformToUnderlying(address _dependent, uint256 _amountDependent) external view returns (UnderlyingAmount[] memory) {\n    address _underlying = IERC4626(_dependent).asset();\n    uint256 _amount = IERC4626(_dependent).previewRedeem(_amountDependent);\n    return _toSingletonArray(_underlying, _amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateTransformToDependent(address _dependent, UnderlyingAmount[] calldata _underlying)\n    external\n    view\n    returns (uint256 _amountDependent)\n  {\n    if (_underlying.length != 1) revert InvalidUnderlyingInput();\n    _amountDependent = IERC4626(_dependent).previewDeposit(_underlying[0].amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateNeededToTransformToUnderlying(address _dependent, UnderlyingAmount[] calldata _expectedUnderlying)\n    external\n    view\n    returns (uint256 _neededDependent)\n  {\n    if (_expectedUnderlying.length != 1) revert InvalidUnderlyingInput();\n    _neededDependent = IERC4626(_dependent).previewWithdraw(_expectedUnderlying[0].amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function calculateNeededToTransformToDependent(address _dependent, uint256 _expectedDependent)\n    external\n    view\n    returns (UnderlyingAmount[] memory _neededUnderlying)\n  {\n    address _underlying = IERC4626(_dependent).asset();\n    uint256 _amount = IERC4626(_dependent).previewMint(_expectedDependent);\n    return _toSingletonArray(_underlying, _amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToUnderlying(\n    address _dependent,\n    uint256 _amountDependent,\n    address _recipient,\n    UnderlyingAmount[] calldata _minAmountOut,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (UnderlyingAmount[] memory) {\n    if (_minAmountOut.length != 1) revert InvalidUnderlyingInput();\n    address _underlying = IERC4626(_dependent).asset();\n    uint256 _amount = IERC4626(_dependent).redeem(_amountDependent, _recipient, msg.sender);\n    if (_minAmountOut[0].amount > _amount) revert ReceivedLessThanExpected(_amount);\n    return _toSingletonArray(_underlying, _amount);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToDependent(\n    address _dependent,\n    UnderlyingAmount[] calldata _underlying,\n    address _recipient,\n    uint256 _minAmountOut,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (uint256 _amountDependent) {\n    if (_underlying.length != 1) revert InvalidUnderlyingInput();\n    IERC20 _underlyingToken = IERC20(_underlying[0].underlying);\n    uint256 _underlyingAmount = _underlying[0].amount;\n    // We need to take the tokens from the sender, and approve them so that the vault can take it from us\n    _underlyingToken.safeTransferFrom(msg.sender, address(this), _underlyingAmount);\n    _underlyingToken.forceApprove(_dependent, _underlyingAmount);\n    _amountDependent = IERC4626(_dependent).deposit(_underlyingAmount, _recipient);\n    if (_minAmountOut > _amountDependent) revert ReceivedLessThanExpected(_amountDependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToExpectedUnderlying(\n    address _dependent,\n    UnderlyingAmount[] calldata _expectedUnderlying,\n    address _recipient,\n    uint256 _maxAmountIn,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (uint256 _spentDependent) {\n    if (_expectedUnderlying.length != 1) revert InvalidUnderlyingInput();\n    _spentDependent = IERC4626(_dependent).withdraw(_expectedUnderlying[0].amount, _recipient, msg.sender);\n    if (_maxAmountIn < _spentDependent) revert NeededMoreThanExpected(_spentDependent);\n  }\n\n  /// @inheritdoc ITransformer\n  function transformToExpectedDependent(\n    address _dependent,\n    uint256 _expectedDependent,\n    address _recipient,\n    UnderlyingAmount[] calldata _maxAmountIn,\n    uint256 _deadline\n  ) external payable checkDeadline(_deadline) returns (UnderlyingAmount[] memory) {\n    if (_maxAmountIn.length != 1) revert InvalidUnderlyingInput();\n    // Check how much underlying would be needed to mint the vault tokens\n    uint256 _neededUnderlying = IERC4626(_dependent).previewMint(_expectedDependent);\n    // Take the needed underlying tokens from the caller, and approve the vault\n    IERC20 _underlying = IERC20(IERC4626(_dependent).asset());\n    _underlying.safeTransferFrom(msg.sender, address(this), _neededUnderlying);\n    _underlying.forceApprove(_dependent, _neededUnderlying);\n    // Mint the vault tokens\n    uint256 _spentUnderlying = IERC4626(_dependent).mint(_expectedDependent, _recipient);\n    if (_maxAmountIn[0].amount < _spentUnderlying) revert NeededMoreThanExpected(_spentUnderlying);\n    // If some tokens were left unspent, then return to caller\n    if (_spentUnderlying < _neededUnderlying) {\n      unchecked {\n        _underlying.safeTransfer(msg.sender, _neededUnderlying - _spentUnderlying);\n      }\n      _underlying.forceApprove(_dependent, 0);\n    }\n    return _toSingletonArray(address(_underlying), _spentUnderlying);\n  }\n\n  function _toSingletonArray(address _underlying) internal pure returns (address[] memory _underlyingArray) {\n    _underlyingArray = new address[](1);\n    _underlyingArray[0] = _underlying;\n  }\n\n  function _toSingletonArray(address _underlying, uint256 _amount) internal pure returns (UnderlyingAmount[] memory _amounts) {\n    _amounts = new UnderlyingAmount[](1);\n    _amounts[0] = UnderlyingAmount({underlying: _underlying, amount: _amount});\n  }\n}\n"
          },
          "node_modules/@mean-finance/transformers/solidity/interfaces/ITransformer.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/**\n * @title A contract that can map between one token and their underlying counterparts, and vice-versa\n * @notice This contract defines the concept of dependent tokens. These are tokens that depend on one or more underlying tokens,\n *         they can't exist on their own. This concept can apply to some known types of tokens, such as:\n *           - Wrappers (WETH/WMATIC/WBNB)\n *           - ERC-4626 tokens\n *           - LP tokens\n *         Now, transformers are smart contract that knows how to map dependent tokens into their underlying counterparts,\n *         and vice-versa. We are doing this so that we can abstract the way tokens can be transformed between each other\n * @dev All non-view functions were made payable, so that they could be multicalled when msg.value > 0\n */\ninterface ITransformer {\n  /// @notice An amount of an underlying token\n  struct UnderlyingAmount {\n    address underlying;\n    uint256 amount;\n  }\n\n  /// @notice Thrown when the underlying input is not valid for the used transformer\n  error InvalidUnderlyingInput();\n\n  /// @notice Thrown when the transformation provides less output than expected\n  error ReceivedLessThanExpected(uint256 received);\n\n  /// @notice Thrown when the transformation needs more input than expected\n  error NeededMoreThanExpected(uint256 needed);\n\n  /// @notice Thrown when a transaction is executed after the deadline has passed\n  error TransactionExpired();\n\n  /**\n   * @notice Returns the addresses of all the underlying tokens, for the given dependent\n   * @dev This function must be unaware of context. The returned values must be the same,\n   *      regardless of who the caller is\n   * @param dependent The address of the dependent token\n   * @return The addresses of all the underlying tokens\n   */\n  function getUnderlying(address dependent) external view returns (address[] memory);\n\n  /**\n   * @notice Calculates how much would the transformation to the underlying tokens return\n   * @dev This function must be unaware of context. The returned values must be the same,\n   *      regardless of who the caller is\n   * @param dependent The address of the dependent token\n   * @param amountDependent The amount to transform\n   * @return The transformed amount in each of the underlying tokens\n   */\n  function calculateTransformToUnderlying(address dependent, uint256 amountDependent) external view returns (UnderlyingAmount[] memory);\n\n  /**\n   * @notice Calculates how much would the transformation to the dependent token return\n   * @dev This function must be unaware of context. The returned values must be the same,\n   *      regardless of who the caller is\n   * @param dependent The address of the dependent token\n   * @param underlying The amounts of underlying tokens to transform\n   * @return amountDependent The transformed amount in the dependent token\n   */\n  function calculateTransformToDependent(address dependent, UnderlyingAmount[] calldata underlying)\n    external\n    view\n    returns (uint256 amountDependent);\n\n  /**\n   * @notice Calculates how many dependent tokens are needed to transform to the expected\n   *         amount of underlying\n   * @dev This function must be unaware of context. The returned values must be the same,\n   *      regardless of who the caller is\n   * @param dependent The address of the dependent token\n   * @param expectedUnderlying The expected amounts of underlying tokens\n   * @return neededDependent The amount of dependent needed\n   */\n  function calculateNeededToTransformToUnderlying(address dependent, UnderlyingAmount[] calldata expectedUnderlying)\n    external\n    view\n    returns (uint256 neededDependent);\n\n  /**\n   * @notice Calculates how many underlying tokens are needed to transform to the expected\n   *         amount of dependent\n   * @dev This function must be unaware of context. The returned values must be the same,\n   *      regardless of who the caller is\n   * @param dependent The address of the dependent token\n   * @param expectedDependent The expected amount of dependent tokens\n   * @return neededUnderlying The amount of underlying tokens needed\n   */\n  function calculateNeededToTransformToDependent(address dependent, uint256 expectedDependent)\n    external\n    view\n    returns (UnderlyingAmount[] memory neededUnderlying);\n\n  /**\n   * @notice Executes the transformation to the underlying tokens\n   * @param dependent The address of the dependent token\n   * @param amountDependent The amount to transform\n   * @param recipient The address that would receive the underlying tokens\n   * @param minAmountOut The minimum amount of underlying that the caller expects to get. Will fail\n   *                     if less is received. As a general rule, the underlying tokens should\n   *                     be provided in the same order as `getUnderlying` returns them\n   * @param deadline A deadline when the transaction becomes invalid\n   * @return The transformed amount in each of the underlying tokens\n   */\n  function transformToUnderlying(\n    address dependent,\n    uint256 amountDependent,\n    address recipient,\n    UnderlyingAmount[] calldata minAmountOut,\n    uint256 deadline\n  ) external payable returns (UnderlyingAmount[] memory);\n\n  /**\n   * @notice Executes the transformation to the dependent token\n   * @param dependent The address of the dependent token\n   * @param underlying The amounts of underlying tokens to transform\n   * @param recipient The address that would receive the dependent tokens\n   * @param minAmountOut The minimum amount of dependent that the caller expects to get. Will fail\n   *                     if less is received\n   * @param deadline A deadline when the transaction becomes invalid\n   * @return amountDependent The transformed amount in the dependent token\n   */\n  function transformToDependent(\n    address dependent,\n    UnderlyingAmount[] calldata underlying,\n    address recipient,\n    uint256 minAmountOut,\n    uint256 deadline\n  ) external payable returns (uint256 amountDependent);\n\n  /**\n   * @notice Transforms dependent tokens to an expected amount of underlying tokens\n   * @param dependent The address of the dependent token\n   * @param expectedUnderlying The expected amounts of underlying tokens\n   * @param recipient The address that would receive the underlying tokens\n   * @param maxAmountIn The maximum amount of dependent that the caller is willing to spend.\n   *                    Will fail more is needed\n   * @param deadline A deadline when the transaction becomes invalid\n   * @return spentDependent The amount of spent dependent tokens\n   */\n  function transformToExpectedUnderlying(\n    address dependent,\n    UnderlyingAmount[] calldata expectedUnderlying,\n    address recipient,\n    uint256 maxAmountIn,\n    uint256 deadline\n  ) external payable returns (uint256 spentDependent);\n\n  /**\n   * @notice Transforms underlying tokens to an expected amount of dependent tokens\n   * @param dependent The address of the dependent token\n   * @param expectedDependent The expected amounts of dependent tokens\n   * @param recipient The address that would receive the underlying tokens\n   * @param maxAmountIn The maximum amount of underlying that the caller is willing to spend.\n   *                    Will fail more is needed. As a general rule, the underlying tokens should\n   *                    be provided in the same order as `getUnderlying` returns them\n   * @param deadline A deadline when the transaction becomes invalid\n   * @return spentUnderlying The amount of spent underlying tokens\n   */\n  function transformToExpectedDependent(\n    address dependent,\n    uint256 expectedDependent,\n    address recipient,\n    UnderlyingAmount[] calldata maxAmountIn,\n    uint256 deadline\n  ) external payable returns (UnderlyingAmount[] memory spentUnderlying);\n}\n"
          }
        }
      }
    },
    {
      "solcVersion": "0.8.22",
      "solcLongVersion": "0.8.22+commit.4fc1097e",
      "id": "25dc9d3d421f903049c2209282739291",
      "input": {
        "language": "Solidity",
        "settings": {
          "viaIR": false,
          "optimizer": {
            "runs": 9999,
            "enabled": true
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "none",
            "appendCBOR": false
          },
          "outputSelection": {
            "node_modules/@mean-finance/call-simulation/src/SimulationAdapter.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/call-simulation/src/interfaces/ISimulationAdapter.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/call-simulation/src/interfaces/external/IERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHubSwapCallee.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/libraries/Intervals.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/libraries/TokenSorting.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanionHubProxyHandler.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanionLibrariesHandler.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/CallerOnlyDCAHubSwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/ThirdPartyDCAHubSwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/utils/DeadlineValidation.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAKeep3rJob/DCAKeep3rJob.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ICallerOnlyDCAHubSwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAFeeManager.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAHubCompanion.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAKeep3rJob.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ILegacyDCAHub.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ISharedTypes.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/external/IPermit2.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/InputBuilding.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/ModifyPositionWithRate.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/Permit2Transfers.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/SecondsUntilNextSwap.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/DCAFeeManager/DCAFeeManager.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/DCAHubCompanion/DCAHubCompanionHubProxyHandler.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/DCAHubSwapper/CallerOnlyDCAHubSwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/ISwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/LegacyDCASwapper.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/libraries/InputBuilding.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/libraries/ModifyPositionWithRate.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/libraries/SecondsUntilNextSwap.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/mocks/utils/BaseCompanion.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/BaseCompanion.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/Governable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/PayableMulticall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/SwapAdapter.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/interfaces/IGovernable.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/types/SwapContext.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/types/TransferOutBalance.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/AccessControl.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/IAccessControl.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Address.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Context.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Multicall.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/ShortStrings.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Strings.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/IKeep3r.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IBaseErrors.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rAccountance.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rJobs.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rKeepers.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rParameters.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            },
            "node_modules/keep3r-v2/solidity/interfaces/peripherals/IKeep3rRoles.sol": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata",
                "storageLayout"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {},
          "remappings": [
            "@openzeppelin/contracts/=node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/",
            "@mean-finance/oracles/=node_modules/@mean-finance/oracles/",
            "@mean-finance/nft-descriptors/=node_modules/@mean-finance/nft-descriptors/",
            "@mean-finance/call-simulation/contracts/=node_modules/@mean-finance/call-simulation/src/",
            "@mean-finance/swappers/=node_modules/@mean-finance/swappers/",
            "@mean-finance/dca-v2-core/=node_modules/@mean-finance/dca-v2-core/",
            "@mean-finance/permit2-adapter/=node_modules/@mean-finance/permit2-adapter/src/",
            "@mean-finance/transformers/=node_modules/@mean-finance/transformers/solidity/contracts/transformers/",
            "@mean-finance/dca-v2-periphery/=node_modules/@mean-finance/dca-v2-periphery/",
            "@mean-finance/uniswap-v3-oracle/=node_modules/@mean-finance/uniswap-v3-oracle/",
            "@call-simulation/=node_modules/@mean-finance/call-simulation/src/",
            "@chainlink/=node_modules/@chainlink/",
            "@api3/=node_modules/@api3/",
            "@uniswap/=node_modules/@uniswap/",
            "keep3r-v2/=node_modules/keep3r-v2/",
            "base64-sol/=node_modules/base64-sol/",
            "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
            "forge-std/=lib/forge-std/src/",
            "@rari-capital/solmate/=lib/solmate/",
            "ds-test/=lib/solmate/lib/ds-test/src/",
            "solmate/=lib/solmate/src/",
            "sphinx/=lib/sphinx/packages/contracts/contracts/forge-std/src/"
          ]
        },
        "sources": {
          "node_modules/@mean-finance/call-simulation/src/SimulationAdapter.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\nimport { IERC165 } from \"./interfaces/external/IERC165.sol\";\nimport { ISimulationAdapter } from \"./interfaces/ISimulationAdapter.sol\";\n\n/**\n * @title Simulation Adapter\n * @author Sam Bugs\n * @notice This contracts adds off-chain simulation capabilities to existing contracts. It works similarly to a\n *         multicall, but the state is not modified in each subcall.\n */\nabstract contract SimulationAdapter is IERC165, ISimulationAdapter {\n  /// @notice An error that contains a simulation's result\n  error SimulatedCall(SimulationResult result);\n\n  /// @inheritdoc IERC165\n  function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n    return _interfaceId == type(ISimulationAdapter).interfaceId || _interfaceId == type(IERC165).interfaceId;\n  }\n\n  /// @inheritdoc ISimulationAdapter\n  function simulate(bytes[] calldata _calls) external payable returns (SimulationResult[] memory _results) {\n    _results = new SimulationResult[](_calls.length);\n    for (uint256 i = 0; i < _calls.length; i++) {\n      _results[i] = _simulate(_calls[i]);\n    }\n    return _results;\n  }\n\n  /**\n   * @notice Executes a simulation and returns the result\n   * @param _call The call to simulate\n   * @return _simulationResult The simulation's result\n   */\n  function _simulate(bytes calldata _call) internal returns (SimulationResult memory _simulationResult) {\n    (bool _success, bytes memory _result) =\n    // solhint-disable-next-line avoid-low-level-calls\n     address(this).delegatecall(abi.encodeWithSelector(this.simulateAndRevert.selector, _call));\n    require(!_success, \"WTF? Should have failed!\");\n    // Move pointer to ignore selector\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      _result := add(_result, 0x04)\n    }\n    (_simulationResult) = abi.decode(_result, (SimulationResult));\n  }\n\n  /**\n   * @notice Executes a call agains this contract and reverts with the result\n   * @dev This is meant to be used internally, do not call!\n   * @param _call The call to simulate\n   */\n  function simulateAndRevert(bytes calldata _call) external payable {\n    uint256 _gasAtStart = gasleft();\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool _success, bytes memory _result) = address(this).delegatecall(_call);\n    uint256 _gasSpent = _gasAtStart - gasleft();\n    revert SimulatedCall(SimulationResult({ success: _success, result: _result, gasSpent: _gasSpent }));\n  }\n}\n"
          },
          "node_modules/@mean-finance/call-simulation/src/interfaces/ISimulationAdapter.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\ninterface ISimulationAdapter {\n  /// @notice A simulation's result\n  struct SimulationResult {\n    bool success;\n    bytes result;\n    uint256 gasSpent;\n  }\n\n  /**\n   * @notice Executes individual simulations against this contract but doesn't modify the state when doing so\n   * @dev This function is meant to be used for off-chain simulation and should not be called on-chain\n   * @param calls The calls to simulate\n   * @return results Each simulation result\n   */\n  function simulate(bytes[] calldata calls) external payable returns (SimulationResult[] memory results);\n}\n"
          },
          "node_modules/@mean-finance/call-simulation/src/interfaces/external/IERC165.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol';\nimport './IDCAPermissionManager.sol';\n\n/**\n * @title The interface for all state related queries\n * @notice These methods allow users to read the hubs's current values\n */\ninterface IDCAHubParameters {\n  /**\n   * @notice Returns how much will the amount to swap differ from the previous swap. f.e. if the returned value is -100, then the amount to swap will be 100 less than the swap just before it\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\n   * @param tokenA One of the pair's token\n   * @param tokenB The other of the pair's token\n   * @param swapIntervalMask The byte representation of the swap interval to check\n   * @param swapNumber The swap number to check\n   * @return swapDeltaAToB How much less of token A will the following swap require\n   * @return swapDeltaBToA How much less of token B will the following swap require\n   */\n  function swapAmountDelta(\n    address tokenA,\n    address tokenB,\n    bytes1 swapIntervalMask,\n    uint32 swapNumber\n  ) external view returns (uint128 swapDeltaAToB, uint128 swapDeltaBToA);\n\n  /**\n   * @notice Returns the sum of the ratios reported in all swaps executed until the given swap number\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\n   * @param tokenA One of the pair's token\n   * @param tokenB The other of the pair's token\n   * @param swapIntervalMask The byte representation of the swap interval to check\n   * @param swapNumber The swap number to check\n   * @return accumRatioAToB The sum of all ratios from A to B\n   * @return accumRatioBToA The sum of all ratios from B to A\n   */\n  function accumRatio(\n    address tokenA,\n    address tokenB,\n    bytes1 swapIntervalMask,\n    uint32 swapNumber\n  ) external view returns (uint256 accumRatioAToB, uint256 accumRatioBToA);\n\n  /**\n   * @notice Returns swapping information about a specific pair\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\n   * @param tokenA One of the pair's token\n   * @param tokenB The other of the pair's token\n   * @param swapIntervalMask The byte representation of the swap interval to check\n   * @return performedSwaps How many swaps have been executed\n   * @return nextAmountToSwapAToB How much of token A will be swapped on the next swap\n   * @return lastSwappedAt Timestamp of the last swap\n   * @return nextAmountToSwapBToA How much of token B will be swapped on the next swap\n   */\n  function swapData(\n    address tokenA,\n    address tokenB,\n    bytes1 swapIntervalMask\n  )\n    external\n    view\n    returns (\n      uint32 performedSwaps,\n      uint224 nextAmountToSwapAToB,\n      uint32 lastSwappedAt,\n      uint224 nextAmountToSwapBToA\n    );\n\n  /**\n   * @notice Returns the byte representation of the set of actice swap intervals for the given pair\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\n   * @param tokenA The smaller of the pair's token\n   * @param tokenB The other of the pair's token\n   * @return The byte representation of the set of actice swap intervals\n   */\n  function activeSwapIntervals(address tokenA, address tokenB) external view returns (bytes1);\n\n  /**\n   * @notice Returns how much of the hub's token balance belongs to the platform\n   * @param token The token to check\n   * @return The amount that belongs to the platform\n   */\n  function platformBalance(address token) external view returns (uint256);\n}\n\n/**\n * @title The interface for all position related matters\n * @notice These methods allow users to create, modify and terminate their positions\n */\ninterface IDCAHubPositionHandler {\n  /// @notice The position of a certain user\n  struct UserPosition {\n    // The token that the user deposited and will be swapped in exchange for \"to\"\n    IERC20Metadata from;\n    // The token that the user will get in exchange for their \"from\" tokens in each swap\n    IERC20Metadata to;\n    // How frequently the position's swaps should be executed\n    uint32 swapInterval;\n    // How many swaps were executed since deposit, last modification, or last withdraw\n    uint32 swapsExecuted;\n    // How many \"to\" tokens can currently be withdrawn\n    uint256 swapped;\n    // How many swaps left the position has to execute\n    uint32 swapsLeft;\n    // How many \"from\" tokens there are left to swap\n    uint256 remaining;\n    // How many \"from\" tokens need to be traded in each swap\n    uint120 rate;\n  }\n\n  /// @notice A list of positions that all have the same `to` token\n  struct PositionSet {\n    // The `to` token\n    address token;\n    // The position ids\n    uint256[] positionIds;\n  }\n\n  /**\n   * @notice Emitted when a position is terminated\n   * @param user The address of the user that terminated the position\n   * @param recipientUnswapped The address of the user that will receive the unswapped tokens\n   * @param recipientSwapped The address of the user that will receive the swapped tokens\n   * @param positionId The id of the position that was terminated\n   * @param returnedUnswapped How many \"from\" tokens were returned to the caller\n   * @param returnedSwapped How many \"to\" tokens were returned to the caller\n   */\n  event Terminated(\n    address indexed user,\n    address indexed recipientUnswapped,\n    address indexed recipientSwapped,\n    uint256 positionId,\n    uint256 returnedUnswapped,\n    uint256 returnedSwapped\n  );\n\n  /**\n   * @notice Emitted when a position is created\n   * @param depositor The address of the user that creates the position\n   * @param owner The address of the user that will own the position\n   * @param positionId The id of the position that was created\n   * @param fromToken The address of the \"from\" token\n   * @param toToken The address of the \"to\" token\n   * @param swapInterval How frequently the position's swaps should be executed\n   * @param rate How many \"from\" tokens need to be traded in each swap\n   * @param startingSwap The number of the swap when the position will be executed for the first time\n   * @param lastSwap The number of the swap when the position will be executed for the last time\n   * @param permissions The permissions defined for the position\n   */\n  event Deposited(\n    address indexed depositor,\n    address indexed owner,\n    uint256 positionId,\n    address fromToken,\n    address toToken,\n    uint32 swapInterval,\n    uint120 rate,\n    uint32 startingSwap,\n    uint32 lastSwap,\n    IDCAPermissionManager.PermissionSet[] permissions\n  );\n\n  /**\n   * @notice Emitted when a position is created and extra data is provided\n   * @param positionId The id of the position that was created\n   * @param data The extra data that was provided\n   */\n  event Miscellaneous(uint256 positionId, bytes data);\n\n  /**\n   * @notice Emitted when a user withdraws all swapped tokens from a position\n   * @param withdrawer The address of the user that executed the withdraw\n   * @param recipient The address of the user that will receive the withdrawn tokens\n   * @param positionId The id of the position that was affected\n   * @param token The address of the withdrawn tokens. It's the same as the position's \"to\" token\n   * @param amount The amount that was withdrawn\n   */\n  event Withdrew(address indexed withdrawer, address indexed recipient, uint256 positionId, address token, uint256 amount);\n\n  /**\n   * @notice Emitted when a user withdraws all swapped tokens from many positions\n   * @param withdrawer The address of the user that executed the withdraws\n   * @param recipient The address of the user that will receive the withdrawn tokens\n   * @param positions The positions to withdraw from\n   * @param withdrew The total amount that was withdrawn from each token\n   */\n  event WithdrewMany(address indexed withdrawer, address indexed recipient, PositionSet[] positions, uint256[] withdrew);\n\n  /**\n   * @notice Emitted when a position is modified\n   * @param user The address of the user that modified the position\n   * @param positionId The id of the position that was modified\n   * @param rate How many \"from\" tokens need to be traded in each swap\n   * @param startingSwap The number of the swap when the position will be executed for the first time\n   * @param lastSwap The number of the swap when the position will be executed for the last time\n   */\n  event Modified(address indexed user, uint256 positionId, uint120 rate, uint32 startingSwap, uint32 lastSwap);\n\n  /// @notice Thrown when a user tries to create a position with the same `from` & `to`\n  error InvalidToken();\n\n  /// @notice Thrown when a user tries to create a position with a swap interval that is not allowed\n  error IntervalNotAllowed();\n\n  /// @notice Thrown when a user tries operate on a position that doesn't exist (it might have been already terminated)\n  error InvalidPosition();\n\n  /// @notice Thrown when a user tries operate on a position that they don't have access to\n  error UnauthorizedCaller();\n\n  /// @notice Thrown when a user tries to create a position with zero swaps\n  error ZeroSwaps();\n\n  /// @notice Thrown when a user tries to create a position with zero funds\n  error ZeroAmount();\n\n  /// @notice Thrown when a user tries to withdraw a position whose `to` token doesn't match the specified one\n  error PositionDoesNotMatchToken();\n\n  /// @notice Thrown when a user tries create or modify a position with an amount too big\n  error AmountTooBig();\n\n  /**\n   * @notice Returns the permission manager contract\n   * @return The contract itself\n   */\n  function permissionManager() external view returns (IDCAPermissionManager);\n\n  /**\n   * @notice Returns total created positions\n   * @return The total created positions\n   */\n  function totalCreatedPositions() external view returns (uint256);\n\n  /**\n   * @notice Returns a user position\n   * @param positionId The id of the position\n   * @return position The position itself\n   */\n  function userPosition(uint256 positionId) external view returns (UserPosition memory position);\n\n  /**\n   * @notice Creates a new position\n   * @dev Will revert:\n   *      - With ZeroAddress if from, to or owner are zero\n   *      - With InvalidToken if from == to\n   *      - With ZeroAmount if amount is zero\n   *      - With AmountTooBig if amount is too big\n   *      - With ZeroSwaps if amountOfSwaps is zero\n   *      - With IntervalNotAllowed if swapInterval is not allowed\n   * @param from The address of the \"from\" token\n   * @param to The address of the \"to\" token\n   * @param amount How many \"from\" tokens will be swapped in total\n   * @param amountOfSwaps How many swaps to execute for this position\n   * @param swapInterval How frequently the position's swaps should be executed\n   * @param owner The address of the owner of the position being created\n   * @param permissions Extra permissions to add to the position. Can be empty\n   * @return positionId The id of the created position\n   */\n  function deposit(\n    address from,\n    address to,\n    uint256 amount,\n    uint32 amountOfSwaps,\n    uint32 swapInterval,\n    address owner,\n    IDCAPermissionManager.PermissionSet[] calldata permissions\n  ) external returns (uint256 positionId);\n\n  /**\n   * @notice Creates a new position\n   * @dev Will revert:\n   *      - With ZeroAddress if from, to or owner are zero\n   *      - With InvalidToken if from == to\n   *      - With ZeroAmount if amount is zero\n   *      - With AmountTooBig if amount is too big\n   *      - With ZeroSwaps if amountOfSwaps is zero\n   *      - With IntervalNotAllowed if swapInterval is not allowed\n   * @param from The address of the \"from\" token\n   * @param to The address of the \"to\" token\n   * @param amount How many \"from\" tokens will be swapped in total\n   * @param amountOfSwaps How many swaps to execute for this position\n   * @param swapInterval How frequently the position's swaps should be executed\n   * @param owner The address of the owner of the position being created\n   * @param permissions Extra permissions to add to the position. Can be empty\n   * @param miscellaneous Bytes that will be emitted, and associated with the position\n   * @return positionId The id of the created position\n   */\n  function deposit(\n    address from,\n    address to,\n    uint256 amount,\n    uint32 amountOfSwaps,\n    uint32 swapInterval,\n    address owner,\n    IDCAPermissionManager.PermissionSet[] calldata permissions,\n    bytes calldata miscellaneous\n  ) external returns (uint256 positionId);\n\n  /**\n   * @notice Withdraws all swapped tokens from a position to a recipient\n   * @dev Will revert:\n   *      - With InvalidPosition if positionId is invalid\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\n   *      - With ZeroAddress if recipient is zero\n   * @param positionId The position's id\n   * @param recipient The address to withdraw swapped tokens to\n   * @return swapped How much was withdrawn\n   */\n  function withdrawSwapped(uint256 positionId, address recipient) external returns (uint256 swapped);\n\n  /**\n   * @notice Withdraws all swapped tokens from multiple positions\n   * @dev Will revert:\n   *      - With InvalidPosition if any of the position ids are invalid\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position to any of the given positions\n   *      - With ZeroAddress if recipient is zero\n   *      - With PositionDoesNotMatchToken if any of the positions do not match the token in their position set\n   * @param positions A list positions, grouped by `to` token\n   * @param recipient The address to withdraw swapped tokens to\n   * @return withdrawn How much was withdrawn for each token\n   */\n  function withdrawSwappedMany(PositionSet[] calldata positions, address recipient) external returns (uint256[] memory withdrawn);\n\n  /**\n   * @notice Takes the unswapped balance, adds the new deposited funds and modifies the position so that\n   * it is executed in newSwaps swaps\n   * @dev Will revert:\n   *      - With InvalidPosition if positionId is invalid\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\n   *      - With AmountTooBig if amount is too big\n   * @param positionId The position's id\n   * @param amount Amount of funds to add to the position\n   * @param newSwaps The new amount of swaps\n   */\n  function increasePosition(\n    uint256 positionId,\n    uint256 amount,\n    uint32 newSwaps\n  ) external;\n\n  /**\n   * @notice Withdraws the specified amount from the unswapped balance and modifies the position so that\n   * it is executed in newSwaps swaps\n   * @dev Will revert:\n   *      - With InvalidPosition if positionId is invalid\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\n   *      - With ZeroSwaps if newSwaps is zero and amount is not the total unswapped balance\n   * @param positionId The position's id\n   * @param amount Amount of funds to withdraw from the position\n   * @param newSwaps The new amount of swaps\n   * @param recipient The address to send tokens to\n   */\n  function reducePosition(\n    uint256 positionId,\n    uint256 amount,\n    uint32 newSwaps,\n    address recipient\n  ) external;\n\n  /**\n   * @notice Terminates the position and sends all unswapped and swapped balance to the specified recipients\n   * @dev Will revert:\n   *      - With InvalidPosition if positionId is invalid\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\n   *      - With ZeroAddress if recipientUnswapped or recipientSwapped is zero\n   * @param positionId The position's id\n   * @param recipientUnswapped The address to withdraw unswapped tokens to\n   * @param recipientSwapped The address to withdraw swapped tokens to\n   * @return unswapped The unswapped balance sent to `recipientUnswapped`\n   * @return swapped The swapped balance sent to `recipientSwapped`\n   */\n  function terminate(\n    uint256 positionId,\n    address recipientUnswapped,\n    address recipientSwapped\n  ) external returns (uint256 unswapped, uint256 swapped);\n}\n\n/**\n * @title The interface for all swap related matters\n * @notice These methods allow users to get information about the next swap, and how to execute it\n */\ninterface IDCAHubSwapHandler {\n  /// @notice Information about a swap\n  struct SwapInfo {\n    // The tokens involved in the swap\n    TokenInSwap[] tokens;\n    // The pairs involved in the swap\n    PairInSwap[] pairs;\n  }\n\n  /// @notice Information about a token's role in a swap\n  struct TokenInSwap {\n    // The token's address\n    address token;\n    // How much will be given of this token as a reward\n    uint256 reward;\n    // How much of this token needs to be provided by swapper\n    uint256 toProvide;\n    // How much of this token will be paid to the platform\n    uint256 platformFee;\n  }\n\n  /// @notice Information about a pair in a swap\n  struct PairInSwap {\n    // The address of one of the tokens\n    address tokenA;\n    // The address of the other token\n    address tokenB;\n    // The total amount of token A swapped in this pair\n    uint256 totalAmountToSwapTokenA;\n    // The total amount of token B swapped in this pair\n    uint256 totalAmountToSwapTokenB;\n    // How much is 1 unit of token A when converted to B\n    uint256 ratioAToB;\n    // How much is 1 unit of token B when converted to A\n    uint256 ratioBToA;\n    // The swap intervals involved in the swap, represented as a byte\n    bytes1 intervalsInSwap;\n  }\n\n  /// @notice A pair of tokens, represented by their indexes in an array\n  struct PairIndexes {\n    // The index of the token A\n    uint8 indexTokenA;\n    // The index of the token B\n    uint8 indexTokenB;\n  }\n\n  /**\n   * @notice Emitted when a swap is executed\n   * @param sender The address of the user that initiated the swap\n   * @param rewardRecipient The address that received the reward\n   * @param callbackHandler The address that executed the callback\n   * @param swapInformation All information related to the swap\n   * @param borrowed How much was borrowed\n   * @param fee The swap fee at the moment of the swap\n   */\n  event Swapped(\n    address indexed sender,\n    address indexed rewardRecipient,\n    address indexed callbackHandler,\n    SwapInfo swapInformation,\n    uint256[] borrowed,\n    uint32 fee\n  );\n\n  /// @notice Thrown when pairs indexes are not sorted correctly\n  error InvalidPairs();\n\n  /// @notice Thrown when trying to execute a swap, but there is nothing to swap\n  error NoSwapsToExecute();\n\n  /**\n   * @notice Returns all information related to the next swap\n   * @dev Will revert with:\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\n   * @param tokens The tokens involved in the next swap\n   * @param pairs The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\n   * @param calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\n   *        the possibility to calculate the next swap information for privileged and non-privileged accounts\n   * @param oracleData Bytes to send to the oracle when executing a quote\n   * @return swapInformation The information about the next swap\n   */\n  function getNextSwapInfo(\n    address[] calldata tokens,\n    PairIndexes[] calldata pairs,\n    bool calculatePrivilegedAvailability,\n    bytes calldata oracleData\n  ) external view returns (SwapInfo memory swapInformation);\n\n  /**\n   * @notice Executes a flash swap\n   * @dev Will revert with:\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\n   *      - With Paused if swaps are paused by protocol\n   *      - With NoSwapsToExecute if there are no swaps to execute for the given pairs\n   *      - With LiquidityNotReturned if the required tokens were not back during the callback\n   * @param tokens The tokens involved in the next swap\n   * @param pairsToSwap The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\n   * @param rewardRecipient The address to send the reward to\n   * @param callbackHandler Address to call for callback (and send the borrowed tokens to)\n   * @param borrow How much to borrow of each of the tokens in tokens. The amount must match the position of the token in the tokens array\n   * @param callbackData Bytes to send to the caller during the callback\n   * @param oracleData Bytes to send to the oracle when executing a quote\n   * @return Information about the executed swap\n   */\n  function swap(\n    address[] calldata tokens,\n    PairIndexes[] calldata pairsToSwap,\n    address rewardRecipient,\n    address callbackHandler,\n    uint256[] calldata borrow,\n    bytes calldata callbackData,\n    bytes calldata oracleData\n  ) external returns (SwapInfo memory);\n}\n\n/**\n * @title The interface for handling all configuration\n * @notice This contract will manage configuration that affects all pairs, swappers, etc\n */\ninterface IDCAHubConfigHandler {\n  /**\n   * @notice Emitted when a new oracle is set\n   * @param oracle The new oracle contract\n   */\n  event OracleSet(ITokenPriceOracle oracle);\n\n  /**\n   * @notice Emitted when a new swap fee is set\n   * @param feeSet The new swap fee\n   */\n  event SwapFeeSet(uint32 feeSet);\n\n  /**\n   * @notice Emitted when new swap intervals are allowed\n   * @param swapIntervals The new swap intervals\n   */\n  event SwapIntervalsAllowed(uint32[] swapIntervals);\n\n  /**\n   * @notice Emitted when some swap intervals are no longer allowed\n   * @param swapIntervals The swap intervals that are no longer allowed\n   */\n  event SwapIntervalsForbidden(uint32[] swapIntervals);\n\n  /**\n   * @notice Emitted when a new platform fee ratio is set\n   * @param platformFeeRatio The new platform fee ratio\n   */\n  event PlatformFeeRatioSet(uint16 platformFeeRatio);\n\n  /**\n   * @notice Emitted when allowed states of tokens are updated\n   * @param tokens Array of updated tokens\n   * @param allowed Array of new allow state per token were allowed[i] is the updated state of tokens[i]\n   */\n  event TokensAllowedUpdated(address[] tokens, bool[] allowed);\n\n  /// @notice Thrown when trying to interact with an unallowed token\n  error UnallowedToken();\n\n  /// @notice Thrown when set allowed tokens input is not valid\n  error InvalidAllowedTokensInput();\n\n  /// @notice Thrown when trying to set a fee higher than the maximum allowed\n  error HighFee();\n\n  /// @notice Thrown when trying to set a fee that is not multiple of 100\n  error InvalidFee();\n\n  /// @notice Thrown when trying to set a fee ratio that is higher that the maximum allowed\n  error HighPlatformFeeRatio();\n\n  /**\n   * @notice Returns the max fee ratio that can be set\n   * @dev Cannot be modified\n   * @return The maximum possible value\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function MAX_PLATFORM_FEE_RATIO() external view returns (uint16);\n\n  /**\n   * @notice Returns the fee charged on swaps\n   * @return swapFee The fee itself\n   */\n  function swapFee() external view returns (uint32 swapFee);\n\n  /**\n   * @notice Returns the price oracle contract\n   * @return oracle The contract itself\n   */\n  function oracle() external view returns (ITokenPriceOracle oracle);\n\n  /**\n   * @notice Returns how much will the platform take from the fees collected in swaps\n   * @return The current ratio\n   */\n  function platformFeeRatio() external view returns (uint16);\n\n  /**\n   * @notice Returns the max fee that can be set for swaps\n   * @dev Cannot be modified\n   * @return maxFee The maximum possible fee\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function MAX_FEE() external view returns (uint32 maxFee);\n\n  /**\n   * @notice Returns a byte that represents allowed swap intervals\n   * @return allowedSwapIntervals The allowed swap intervals\n   */\n  function allowedSwapIntervals() external view returns (bytes1 allowedSwapIntervals);\n\n  /**\n   * @notice Returns if a token is currently allowed or not\n   * @return Allowed state of token\n   */\n  function allowedTokens(address token) external view returns (bool);\n\n  /**\n   * @notice Returns token's magnitude (10**decimals)\n   * @return Stored magnitude for token\n   */\n  function tokenMagnitude(address token) external view returns (uint120);\n\n  /**\n   * @notice Returns whether swaps and deposits are currently paused\n   * @return isPaused Whether swaps and deposits are currently paused\n   */\n  function paused() external view returns (bool isPaused);\n\n  /**\n   * @notice Sets a new swap fee\n   * @dev Will revert with HighFee if the fee is higher than the maximum\n   * @dev Will revert with InvalidFee if the fee is not multiple of 100\n   * @param fee The new swap fee\n   */\n  function setSwapFee(uint32 fee) external;\n\n  /**\n   * @notice Sets a new price oracle\n   * @dev Will revert with ZeroAddress if the zero address is passed\n   * @param oracle The new oracle contract\n   */\n  function setOracle(ITokenPriceOracle oracle) external;\n\n  /**\n   * @notice Sets a new platform fee ratio\n   * @dev Will revert with HighPlatformFeeRatio if given ratio is too high\n   * @param platformFeeRatio The new ratio\n   */\n  function setPlatformFeeRatio(uint16 platformFeeRatio) external;\n\n  /**\n   * @notice Adds new swap intervals to the allowed list\n   * @param swapIntervals The new swap intervals\n   */\n  function addSwapIntervalsToAllowedList(uint32[] calldata swapIntervals) external;\n\n  /**\n   * @notice Removes some swap intervals from the allowed list\n   * @param swapIntervals The swap intervals to remove\n   */\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata swapIntervals) external;\n\n  /// @notice Pauses all swaps and deposits\n  function pause() external;\n\n  /// @notice Unpauses all swaps and deposits\n  function unpause() external;\n}\n\n/**\n * @title The interface for handling platform related actions\n * @notice This contract will handle all actions that affect the platform in some way\n */\ninterface IDCAHubPlatformHandler {\n  /**\n   * @notice Emitted when someone withdraws from the paltform balance\n   * @param sender The address of the user that initiated the withdraw\n   * @param recipient The address that received the withdraw\n   * @param amounts The tokens (and the amount) that were withdrawn\n   */\n  event WithdrewFromPlatform(address indexed sender, address indexed recipient, IDCAHub.AmountOfToken[] amounts);\n\n  /**\n   * @notice Withdraws tokens from the platform balance\n   * @param amounts The amounts to withdraw\n   * @param recipient The address that will receive the tokens\n   */\n  function withdrawFromPlatformBalance(IDCAHub.AmountOfToken[] calldata amounts, address recipient) external;\n}\n\ninterface IDCAHub is IDCAHubParameters, IDCAHubConfigHandler, IDCAHubSwapHandler, IDCAHubPositionHandler, IDCAHubPlatformHandler {\n  /// @notice Specifies an amount of a token. For example to determine how much to borrow from certain tokens\n  struct AmountOfToken {\n    // The tokens' address\n    address token;\n    // How much to borrow or withdraw of the specified token\n    uint256 amount;\n  }\n\n  /// @notice Thrown when one of the parameters is a zero address\n  error ZeroAddress();\n\n  /// @notice Thrown when the expected liquidity is not returned in flash swaps\n  error LiquidityNotReturned();\n\n  /// @notice Thrown when a list of token pairs is not sorted, or if there are duplicates\n  error InvalidTokens();\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol';\n\ninterface IERC721BasicEnumerable {\n  /**\n   * @notice Count NFTs tracked by this contract\n   * @return A count of valid NFTs tracked by this contract, where each one of\n   *         them has an assigned and queryable owner not equal to the zero address\n   */\n  function totalSupply() external view returns (uint256);\n}\n\n/**\n * @title The interface for all permission related matters\n * @notice These methods allow users to set and remove permissions to their positions\n */\ninterface IDCAPermissionManager is IERC721, IERC721BasicEnumerable {\n  /// @notice Set of possible permissions\n  enum Permission {\n    INCREASE,\n    REDUCE,\n    WITHDRAW,\n    TERMINATE\n  }\n\n  /// @notice A set of permissions for a specific operator\n  struct PermissionSet {\n    // The address of the operator\n    address operator;\n    // The permissions given to the overator\n    Permission[] permissions;\n  }\n\n  /// @notice A collection of permissions sets for a specific position\n  struct PositionPermissions {\n    // The id of the token\n    uint256 tokenId;\n    // The permissions to assign to the position\n    PermissionSet[] permissionSets;\n  }\n\n  /**\n   * @notice Emitted when permissions for a token are modified\n   * @param tokenId The id of the token\n   * @param permissions The set of permissions that were updated\n   */\n  event Modified(uint256 tokenId, PermissionSet[] permissions);\n\n  /**\n   * @notice Emitted when the address for a new descritor is set\n   * @param descriptor The new descriptor contract\n   */\n  event NFTDescriptorSet(IDCAHubPositionDescriptor descriptor);\n\n  /// @notice Thrown when a user tries to set the hub, once it was already set\n  error HubAlreadySet();\n\n  /// @notice Thrown when a user provides a zero address when they shouldn't\n  error ZeroAddress();\n\n  /// @notice Thrown when a user calls a method that can only be executed by the hub\n  error OnlyHubCanExecute();\n\n  /// @notice Thrown when a user tries to modify permissions for a token they do not own\n  error NotOwner();\n\n  /// @notice Thrown when a user tries to execute a permit with an expired deadline\n  error ExpiredDeadline();\n\n  /// @notice Thrown when a user tries to execute a permit with an invalid signature\n  error InvalidSignature();\n\n  /**\n   * @notice The permit typehash used in the permit signature\n   * @return The typehash for the permit\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  /**\n   * @notice The permit typehash used in the permission permit signature\n   * @return The typehash for the permission permit\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function PERMISSION_PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  /**\n   * @notice The permit typehash used in the multi permission permit signature\n   * @return The typehash for the multi permission permit\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function MULTI_PERMISSION_PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  /**\n   * @notice The permit typehash used in the permission permit signature\n   * @return The typehash for the permission set\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function PERMISSION_SET_TYPEHASH() external pure returns (bytes32);\n\n  /**\n   * @notice The permit typehash used in the multi permission permit signature\n   * @return The typehash for the position permissions\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function POSITION_PERMISSIONS_TYPEHASH() external pure returns (bytes32);\n\n  /**\n   * @notice The domain separator used in the permit signature\n   * @return The domain seperator used in encoding of permit signature\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  /**\n   * @notice Returns the NFT descriptor contract\n   * @return The contract for the NFT descriptor\n   */\n  function nftDescriptor() external returns (IDCAHubPositionDescriptor);\n\n  /**\n   * @notice Returns the address of the DCA Hub\n   * @return The address of the DCA Hub\n   */\n  function hub() external returns (address);\n\n  /**\n   * @notice Returns the next nonce to use for a given user\n   * @param user The address of the user\n   * @return nonce The next nonce to use\n   */\n  function nonces(address user) external returns (uint256 nonce);\n\n  /**\n   * @notice Returns whether the given address has the permission for the given token\n   * @param id The id of the token to check\n   * @param account The address of the user to check\n   * @param permission The permission to check\n   * @return Whether the user has the permission or not\n   */\n  function hasPermission(\n    uint256 id,\n    address account,\n    Permission permission\n  ) external view returns (bool);\n\n  /**\n   * @notice Returns whether the given address has the permissions for the given token\n   * @param id The id of the token to check\n   * @param account The address of the user to check\n   * @param permissions The permissions to check\n   * @return hasPermissions Whether the user has each permission or not\n   */\n  function hasPermissions(\n    uint256 id,\n    address account,\n    Permission[] calldata permissions\n  ) external view returns (bool[] memory hasPermissions);\n\n  /**\n   * @notice Sets the address for the hub\n   * @dev Can only be successfully executed once. Once it's set, it can be modified again\n   *      Will revert:\n   *      - With ZeroAddress if address is zero\n   *      - With HubAlreadySet if the hub has already been set\n   * @param hub The address to set for the hub\n   */\n  function setHub(address hub) external;\n\n  /**\n   * @notice Mints a new NFT with the given id, and sets the permissions for it\n   * @dev Will revert with OnlyHubCanExecute if the caller is not the hub\n   * @param id The id of the new NFT\n   * @param owner The owner of the new NFT\n   * @param permissions Permissions to set for the new NFT\n   */\n  function mint(\n    uint256 id,\n    address owner,\n    PermissionSet[] calldata permissions\n  ) external;\n\n  /**\n   * @notice Burns the NFT with the given id, and clears all permissions\n   * @dev Will revert with OnlyHubCanExecute if the caller is not the hub\n   * @param id The token's id\n   */\n  function burn(uint256 id) external;\n\n  /**\n   * @notice Sets new permissions for the given position\n   * @dev Will revert with NotOwner if the caller is not the token's owner.\n   *      Operators that are not part of the given permission sets do not see their permissions modified.\n   *      In order to remove permissions to an operator, provide an empty list of permissions for them\n   * @param id The token's id\n   * @param permissions A list of permission sets\n   */\n  function modify(uint256 id, PermissionSet[] calldata permissions) external;\n\n  /**\n   * @notice Sets new permissions for the given positions\n   * @dev This is basically the same as executing multiple `modify`\n   * @param permissions A list of position permissions to set\n   */\n  function modifyMany(PositionPermissions[] calldata permissions) external;\n\n  /**\n   * @notice Approves spending of a specific token ID by spender via signature\n   * @param spender The account that is being approved\n   * @param tokenId The ID of the token that is being approved for spending\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function permit(\n    address spender,\n    uint256 tokenId,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @notice Sets permissions via signature\n   * @dev This method works similarly to `modifyMany`, but instead of being executed by the owner, it can be set by signature\n   * @param permissions The permissions to set for the different positions\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function multiPermissionPermit(\n    PositionPermissions[] calldata permissions,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @notice Sets permissions via signature\n   * @dev This method works similarly to `modify`, but instead of being executed by the owner, it can be set my signature\n   * @param permissions The permissions to set\n   * @param tokenId The token's id\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function permissionPermit(\n    PermissionSet[] calldata permissions,\n    uint256 tokenId,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @notice Sets a new NFT descriptor\n   * @dev Will revert with ZeroAddress if address is zero\n   * @param descriptor The new NFT descriptor contract\n   */\n  function setNFTDescriptor(IDCAHubPositionDescriptor descriptor) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-core/contracts/libraries/Intervals.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\n/// @title Intervals library\n/// @notice Provides functions to easily convert from swap intervals to their byte representation and viceversa\nlibrary Intervals {\n  /// @notice Thrown when a user tries convert and invalid interval to a byte representation\n  error InvalidInterval();\n\n  /// @notice Thrown when a user tries convert and invalid byte representation to an interval\n  error InvalidMask();\n\n  /// @notice Takes a swap interval and returns its byte representation\n  /// @dev Will revert with InvalidInterval if the swap interval is not valid\n  /// @param _swapInterval The swap interval\n  /// @return The interval's byte representation\n  function intervalToMask(uint32 _swapInterval) internal pure returns (bytes1) {\n    if (_swapInterval == 1 minutes) return 0x01;\n    if (_swapInterval == 5 minutes) return 0x02;\n    if (_swapInterval == 15 minutes) return 0x04;\n    if (_swapInterval == 30 minutes) return 0x08;\n    if (_swapInterval == 1 hours) return 0x10;\n    if (_swapInterval == 4 hours) return 0x20;\n    if (_swapInterval == 1 days) return 0x40;\n    if (_swapInterval == 1 weeks) return 0x80;\n    revert InvalidInterval();\n  }\n\n  /// @notice Takes a byte representation of a swap interval and returns the swap interval\n  /// @dev Will revert with InvalidMask if the byte representation is not valid\n  /// @param _mask The byte representation\n  /// @return The swap interval\n  function maskToInterval(bytes1 _mask) internal pure returns (uint32) {\n    if (_mask == 0x01) return 1 minutes;\n    if (_mask == 0x02) return 5 minutes;\n    if (_mask == 0x04) return 15 minutes;\n    if (_mask == 0x08) return 30 minutes;\n    if (_mask == 0x10) return 1 hours;\n    if (_mask == 0x20) return 4 hours;\n    if (_mask == 0x40) return 1 days;\n    if (_mask == 0x80) return 1 weeks;\n    revert InvalidMask();\n  }\n\n  /// @notice Takes a byte representation of a set of swap intervals and returns which ones are in the set\n  /// @dev Will always return an array of length 8, with zeros at the end if there are less than 8 intervals\n  /// @param _byte The byte representation\n  /// @return _intervals The swap intervals in the set\n  function intervalsInByte(bytes1 _byte) internal pure returns (uint32[] memory _intervals) {\n    _intervals = new uint32[](8);\n    uint8 _index;\n    bytes1 _mask = 0x01;\n    while (_byte >= _mask && _mask > 0) {\n      if (_byte & _mask != 0) {\n        _intervals[_index++] = maskToInterval(_mask);\n      }\n      _mask <<= 1;\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-core/contracts/libraries/TokenSorting.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >0.6;\n\n/// @title TokenSorting library\n/// @notice Provides functions to sort tokens easily\nlibrary TokenSorting {\n  /// @notice Takes two tokens, and returns them sorted\n  /// @param _tokenA One of the tokens\n  /// @param _tokenB The other token\n  /// @return __tokenA The first of the tokens\n  /// @return __tokenB The second of the tokens\n  function sortTokens(address _tokenA, address _tokenB) internal pure returns (address __tokenA, address __tokenB) {\n    (__tokenA, __tokenB) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport './DCAHubCompanionLibrariesHandler.sol';\nimport './DCAHubCompanionHubProxyHandler.sol';\nimport '../utils/BaseCompanion.sol';\n\ncontract DCAHubCompanion is DCAHubCompanionLibrariesHandler, DCAHubCompanionHubProxyHandler, BaseCompanion, IDCAHubCompanion {\n  constructor(\n    address _swapper,\n    address _allowanceTarget,\n    address _governor,\n    IPermit2 _permit2\n  ) BaseCompanion(_swapper, _allowanceTarget, _governor, _permit2) {}\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanionHubProxyHandler.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '../interfaces/IDCAHubCompanion.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n/// @dev All public functions are payable, so that they can be multicalled together with other payable functions when msg.value > 0\nabstract contract DCAHubCompanionHubProxyHandler is IDCAHubCompanionHubProxyHandler {\n  using SafeERC20 for IERC20;\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function permissionPermit(\n    IDCAPermissionManager _permissionManager,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions,\n    uint256 _tokenId,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external payable {\n    _permissionManager.permissionPermit(_permissions, _tokenId, _deadline, _v, _r, _s);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function multiPermissionPermit(\n    IDCAPermissionManager _permissionManager,\n    IDCAPermissionManager.PositionPermissions[] calldata _permissions,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external payable {\n    _permissionManager.multiPermissionPermit(_permissions, _deadline, _v, _r, _s);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function deposit(\n    IDCAHub _hub,\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint32 _amountOfSwaps,\n    uint32 _swapInterval,\n    address _owner,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions,\n    bytes calldata _miscellaneous\n  ) public payable virtual returns (uint256 _positionId) {\n    _approveHub(address(_from), _hub, _amount);\n    _positionId = _miscellaneous.length > 0\n      ? _hub.deposit(_from, _to, _amount, _amountOfSwaps, _swapInterval, _owner, _permissions, _miscellaneous)\n      : _hub.deposit(_from, _to, _amount, _amountOfSwaps, _swapInterval, _owner, _permissions);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function depositWithBalanceOnContract(\n    IDCAHub _hub,\n    address _from,\n    address _to,\n    uint32 _amountOfSwaps,\n    uint32 _swapInterval,\n    address _owner,\n    IDCAPermissionManager.PermissionSet[] calldata _permissions,\n    bytes calldata _miscellaneous\n  ) external payable returns (uint256 _positionId) {\n    uint256 _amount = IERC20(_from).balanceOf(address(this));\n    return deposit(_hub, _from, _to, _amount, _amountOfSwaps, _swapInterval, _owner, _permissions, _miscellaneous);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function withdrawSwapped(\n    IDCAHub _hub,\n    uint256 _positionId,\n    address _recipient\n  ) external payable verifyPermission(_hub, _positionId, IDCAPermissionManager.Permission.WITHDRAW) returns (uint256 _swapped) {\n    _swapped = _hub.withdrawSwapped(_positionId, _recipient);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function withdrawSwappedMany(\n    IDCAHub _hub,\n    IDCAHub.PositionSet[] calldata _positions,\n    address _recipient\n  ) external payable returns (uint256[] memory _withdrawn) {\n    for (uint256 i = 0; i < _positions.length; ++i) {\n      uint256[] memory _positionIds = _positions[i].positionIds;\n      for (uint256 j = 0; j < _positionIds.length; ++j) {\n        _checkPermissionOrFail(_hub, _positionIds[j], IDCAPermissionManager.Permission.WITHDRAW);\n      }\n    }\n    _withdrawn = _hub.withdrawSwappedMany(_positions, _recipient);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function increasePosition(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint256 _amount,\n    uint32 _newSwaps\n  ) external payable verifyPermission(_hub, _positionId, IDCAPermissionManager.Permission.INCREASE) {\n    IERC20Metadata _from = _hub.userPosition(_positionId).from;\n    _approveHub(address(_from), _hub, _amount);\n    _hub.increasePosition(_positionId, _amount, _newSwaps);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function increasePositionWithBalanceOnContract(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint32 _newSwaps\n  ) external payable verifyPermission(_hub, _positionId, IDCAPermissionManager.Permission.INCREASE) {\n    IERC20Metadata _from = _hub.userPosition(_positionId).from;\n    uint256 _amount = _from.balanceOf(address(this));\n    _approveHub(address(_from), _hub, _amount);\n    _hub.increasePosition(_positionId, _amount, _newSwaps);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function reducePosition(\n    IDCAHub _hub,\n    uint256 _positionId,\n    uint256 _amount,\n    uint32 _newSwaps,\n    address _recipient\n  ) external payable verifyPermission(_hub, _positionId, IDCAPermissionManager.Permission.REDUCE) {\n    _hub.reducePosition(_positionId, _amount, _newSwaps, _recipient);\n  }\n\n  /// @inheritdoc IDCAHubCompanionHubProxyHandler\n  function terminate(\n    IDCAHub _hub,\n    uint256 _positionId,\n    address _recipientUnswapped,\n    address _recipientSwapped\n  )\n    external\n    payable\n    verifyPermission(_hub, _positionId, IDCAPermissionManager.Permission.TERMINATE)\n    returns (uint256 _unswapped, uint256 _swapped)\n  {\n    (_unswapped, _swapped) = _hub.terminate(_positionId, _recipientUnswapped, _recipientSwapped);\n  }\n\n  function _approveHub(\n    address _token,\n    IDCAHub _hub,\n    uint256 _amount\n  ) internal {\n    uint256 _allowance = IERC20(_token).allowance(address(this), address(_hub));\n    if (_allowance < _amount) {\n      IERC20(_token).forceApprove(address(_hub), type(uint256).max);\n    }\n  }\n\n  function _checkPermissionOrFail(\n    IDCAHub _hub,\n    uint256 _positionId,\n    IDCAPermissionManager.Permission _permission\n  ) internal view {\n    if (!_hub.permissionManager().hasPermission(_positionId, msg.sender, _permission)) revert UnauthorizedCaller();\n  }\n\n  modifier verifyPermission(\n    IDCAHub _hub,\n    uint256 _positionId,\n    IDCAPermissionManager.Permission _permission\n  ) {\n    _checkPermissionOrFail(_hub, _positionId, _permission);\n    _;\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanionLibrariesHandler.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '../libraries/InputBuilding.sol';\nimport '../libraries/SecondsUntilNextSwap.sol';\nimport '../interfaces/IDCAHubCompanion.sol';\n\nabstract contract DCAHubCompanionLibrariesHandler is IDCAHubCompanionLibrariesHandler {\n  /// @inheritdoc IDCAHubCompanionLibrariesHandler\n  function getNextSwapInfo(\n    IDCAHub _hub,\n    Pair[] calldata _pairs,\n    bool _calculatePrivilegedAvailability,\n    bytes calldata _oracleData\n  ) external view returns (IDCAHub.SwapInfo memory) {\n    (address[] memory _tokens, IDCAHub.PairIndexes[] memory _indexes) = InputBuilding.buildGetNextSwapInfoInput(_pairs);\n    return _hub.getNextSwapInfo(_tokens, _indexes, _calculatePrivilegedAvailability, _oracleData);\n  }\n\n  /// @inheritdoc IDCAHubCompanionLibrariesHandler\n  function legacyGetNextSwapInfo(ILegacyDCAHub _hub, Pair[] calldata _pairs) external view returns (ILegacyDCAHub.SwapInfo memory) {\n    (address[] memory _tokens, IDCAHub.PairIndexes[] memory _indexes) = InputBuilding.buildGetNextSwapInfoInput(_pairs);\n    return _hub.getNextSwapInfo(_tokens, _indexes);\n  }\n\n  /// @inheritdoc IDCAHubCompanionLibrariesHandler\n  function secondsUntilNextSwap(\n    IDCAHub _hub,\n    Pair[] calldata _pairs,\n    bool _calculatePrivilegedAvailability\n  ) external view returns (uint256[] memory) {\n    return SecondsUntilNextSwap.secondsUntilNextSwap(_hub, _pairs, _calculatePrivilegedAvailability);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAHubCompanion.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol';\nimport './ILegacyDCAHub.sol';\nimport './ISharedTypes.sol';\n\n/**\n * @notice This contract exposes many utils that are also available through libraries. The idea is to make\n *         these functions available here, so others don't need to deploy new contracts\n */\ninterface IDCAHubCompanionLibrariesHandler {\n  /**\n   * @notice Takes a list of pairs and returns how it would look like to execute a swap for all of them\n   * @dev Please note that this function is very expensive. Ideally, it would be used for off-chain purposes\n   * @param hub The address of the DCAHub\n   * @param pairs The pairs to be involved in the swap\n   * @param calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\n   *        the possibility to calculate the next swap information for privileged and non-privileged accounts\n   * @param oracleData Bytes to send to the oracle when executing a quote\n   * @return How executing a swap for all the given pairs would look like\n   */\n  function getNextSwapInfo(\n    IDCAHub hub,\n    Pair[] calldata pairs,\n    bool calculatePrivilegedAvailability,\n    bytes calldata oracleData\n  ) external view returns (IDCAHub.SwapInfo memory);\n\n  /**\n   * @notice Takes a list of pairs and returns how it would look like to execute a swap for all of them\n   * @dev Please note that this function is very expensive. Ideally, it would be used for off-chain purposes\n   * @param hub The address of the DCAHub\n   * @param pairs The pairs to be involved in the swap\n   * @return How executing a swap for all the given pairs would look like\n   */\n  function legacyGetNextSwapInfo(ILegacyDCAHub hub, Pair[] calldata pairs) external view returns (ILegacyDCAHub.SwapInfo memory);\n\n  /**\n   * @notice Returns how many seconds left until the next swap is available for a list of pairs\n   * @dev Tokens in pairs may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param hub The address of the DCAHub\n   * @param pairs Pairs to check\n   * @param calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\n   *        the possibility to calculate the seconds until next swap for privileged and non-privileged accounts\n   * @return The amount of seconds until next swap for each of the pairs\n   */\n  function secondsUntilNextSwap(\n    IDCAHub hub,\n    Pair[] calldata pairs,\n    bool calculatePrivilegedAvailability\n  ) external view returns (uint256[] memory);\n}\n\ninterface IDCAHubCompanionHubProxyHandler {\n  /// @notice Thrown when a user tries operate on a position that they don't have access to\n  error UnauthorizedCaller();\n\n  /**\n   * @notice Creates a new position\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param from The address of the \"from\" token\n   * @param to The address of the \"to\" token\n   * @param amount How many \"from\" tokens will be swapped in total\n   * @param amountOfSwaps How many swaps to execute for this position\n   * @param swapInterval How frequently the position's swaps should be executed\n   * @param owner The address of the owner of the position being created\n   * @param miscellaneous Bytes that will be emitted, and associated with the position. If empty, no event will be emitted\n   * @return positionId The id of the created position\n   */\n  function deposit(\n    IDCAHub hub,\n    address from,\n    address to,\n    uint256 amount,\n    uint32 amountOfSwaps,\n    uint32 swapInterval,\n    address owner,\n    IDCAPermissionManager.PermissionSet[] calldata permissions,\n    bytes calldata miscellaneous\n  ) external payable returns (uint256 positionId);\n\n  /**\n   * @notice Creates a new position using the entire balance available on the contract\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param from The address of the \"from\" token\n   * @param to The address of the \"to\" token\n   * @param amountOfSwaps How many swaps to execute for this position\n   * @param swapInterval How frequently the position's swaps should be executed\n   * @param owner The address of the owner of the position being created\n   * @param miscellaneous Bytes that will be emitted, and associated with the position. If empty, no event will be emitted\n   * @return positionId The id of the created position\n   */\n  function depositWithBalanceOnContract(\n    IDCAHub hub,\n    address from,\n    address to,\n    uint32 amountOfSwaps,\n    uint32 swapInterval,\n    address owner,\n    IDCAPermissionManager.PermissionSet[] calldata permissions,\n    bytes calldata miscellaneous\n  ) external payable returns (uint256 positionId);\n\n  /**\n   * @notice Call the hub and withdraws all swapped tokens from a position to a recipient\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positionId The position's id\n   * @param recipient The address to withdraw swapped tokens to\n   * @return swapped How much was withdrawn\n   */\n  function withdrawSwapped(\n    IDCAHub hub,\n    uint256 positionId,\n    address recipient\n  ) external payable returns (uint256 swapped);\n\n  /**\n   * @notice Call the hub and withdraws all swapped tokens from multiple positions\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positions A list positions, grouped by `to` token\n   * @param recipient The address to withdraw swapped tokens to\n   * @return withdrawn How much was withdrawn for each token\n   */\n  function withdrawSwappedMany(\n    IDCAHub hub,\n    IDCAHub.PositionSet[] calldata positions,\n    address recipient\n  ) external payable returns (uint256[] memory withdrawn);\n\n  /**\n   * @notice Call the hub and takes the unswapped balance, adds the new deposited funds and modifies the position so that\n   * it is executed in `newSwaps` swaps\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positionId The position's id\n   * @param amount Amount of funds to add to the position\n   * @param newSwaps The new amount of swaps\n   */\n  function increasePosition(\n    IDCAHub hub,\n    uint256 positionId,\n    uint256 amount,\n    uint32 newSwaps\n  ) external payable;\n\n  /**\n   * @notice Call the hub and takes the unswapped balance, adds the Companion's current balance and modifies the position so that\n   * it is executed in `newSwaps` swaps\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positionId The position's id\n   * @param newSwaps The new amount of swaps\n   */\n  function increasePositionWithBalanceOnContract(\n    IDCAHub hub,\n    uint256 positionId,\n    uint32 newSwaps\n  ) external payable;\n\n  /**\n   * @notice Call the hub and withdraws the specified amount from the unswapped balance and modifies the position so that\n   * it is executed in newSwaps swaps\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positionId The position's id\n   * @param amount Amount of funds to withdraw from the position\n   * @param newSwaps The new amount of swaps\n   * @param recipient The address to send tokens to\n   */\n  function reducePosition(\n    IDCAHub hub,\n    uint256 positionId,\n    uint256 amount,\n    uint32 newSwaps,\n    address recipient\n  ) external payable;\n\n  /**\n   * @notice Calls the hub and terminates the position and sends all unswapped and swapped balance to the specified recipients\n   * @dev Meant to be used as part of a multicall\n   * @param hub The address of the DCAHub\n   * @param positionId The position's id\n   * @param recipientUnswapped The address to withdraw unswapped tokens to\n   * @param recipientSwapped The address to withdraw swapped tokens to\n   * @return unswapped The unswapped balance sent to `recipientUnswapped`\n   * @return swapped The swapped balance sent to `recipientSwapped`\n   */\n  function terminate(\n    IDCAHub hub,\n    uint256 positionId,\n    address recipientUnswapped,\n    address recipientSwapped\n  ) external payable returns (uint256 unswapped, uint256 swapped);\n\n  /**\n   * @notice Calls the permission manager and sets multiple permissions via signature\n   * @param permissionManager The address of the permission manager\n   * @param permissions The permissions to set\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function multiPermissionPermit(\n    IDCAPermissionManager permissionManager,\n    IDCAPermissionManager.PositionPermissions[] calldata permissions,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable;\n\n  /**\n   * @notice Calls the permission manager and sets permissions via signature\n   * @param permissionManager The address of the permission manager\n   * @param permissions The permissions to set\n   * @param tokenId The token's id\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function permissionPermit(\n    IDCAPermissionManager permissionManager,\n    IDCAPermissionManager.PermissionSet[] calldata permissions,\n    uint256 tokenId,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable;\n}\n\ninterface IDCAHubCompanion is IDCAHubCompanionLibrariesHandler, IDCAHubCompanionHubProxyHandler {}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ILegacyDCAHub.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\n\ninterface ILegacyDCAHub {\n  /// @notice Information about a swap\n  struct SwapInfo {\n    // The tokens involved in the swap\n    TokenInSwap[] tokens;\n    // The pairs involved in the swap\n    PairInSwap[] pairs;\n  }\n\n  /// @notice Information about a token's role in a swap\n  struct TokenInSwap {\n    // The token's address\n    address token;\n    // How much will be given of this token as a reward\n    uint256 reward;\n    // How much of this token needs to be provided by swapper\n    uint256 toProvide;\n    // How much of this token will be paid to the platform\n    uint256 platformFee;\n  }\n\n  /// @notice Information about a pair in a swap\n  struct PairInSwap {\n    // The address of one of the tokens\n    address tokenA;\n    // The address of the other token\n    address tokenB;\n    // How much is 1 unit of token A when converted to B\n    uint256 ratioAToB;\n    // How much is 1 unit of token B when converted to A\n    uint256 ratioBToA;\n    // The swap intervals involved in the swap, represented as a byte\n    bytes1 intervalsInSwap;\n  }\n\n  /**\n   * @notice Returns all information related to the next swap\n   * @dev Will revert with:\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\n   * @param tokens The tokens involved in the next swap\n   * @param pairs The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\n   * @return swapInformation The information about the next swap\n   */\n  function getNextSwapInfo(address[] calldata tokens, IDCAHub.PairIndexes[] calldata pairs)\n    external\n    view\n    returns (SwapInfo memory swapInformation);\n\n  /**\n   * @notice Executes a flash swap\n   * @dev Will revert with:\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\n   *      - With Paused if swaps are paused by protocol\n   *      - With NoSwapsToExecute if there are no swaps to execute for the given pairs\n   *      - With LiquidityNotReturned if the required tokens were not back during the callback\n   * @param tokens The tokens involved in the next swap\n   * @param pairsToSwap The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\n   * @param rewardRecipient The address to send the reward to\n   * @param callbackHandler Address to call for callback (and send the borrowed tokens to)\n   * @param borrow How much to borrow of each of the tokens in tokens. The amount must match the position of the token in the tokens array\n   * @param callbackData Bytes to send to the caller during the callback\n   * @return Information about the executed swap\n   */\n  function swap(\n    address[] calldata tokens,\n    IDCAHub.PairIndexes[] calldata pairsToSwap,\n    address rewardRecipient,\n    address callbackHandler,\n    uint256[] calldata borrow,\n    bytes calldata callbackData\n  ) external returns (SwapInfo memory);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ISharedTypes.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\n/// @notice A pair of tokens\nstruct Pair {\n  address tokenA;\n  address tokenB;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/external/IPermit2.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n// Minimal Permit2 interface, derived from\n// https://github.com/Uniswap/permit2/blob/main/src/interfaces/ISignatureTransfer.sol\ninterface IPermit2 {\n  struct TokenPermissions {\n    address token;\n    uint256 amount;\n  }\n\n  struct PermitTransferFrom {\n    TokenPermissions permitted;\n    uint256 nonce;\n    uint256 deadline;\n  }\n\n  struct PermitBatchTransferFrom {\n    TokenPermissions[] permitted;\n    uint256 nonce;\n    uint256 deadline;\n  }\n\n  struct SignatureTransferDetails {\n    address to;\n    uint256 requestedAmount;\n  }\n\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  function permitTransferFrom(\n    PermitTransferFrom calldata permit,\n    SignatureTransferDetails calldata transferDetails,\n    address owner,\n    bytes calldata signature\n  ) external;\n\n  function permitTransferFrom(\n    PermitBatchTransferFrom memory permit,\n    SignatureTransferDetails[] calldata transferDetails,\n    address owner,\n    bytes calldata signature\n  ) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/InputBuilding.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\nimport '../interfaces/ISharedTypes.sol';\n\n/// @title Input Building Library\n/// @notice Provides functions to build input for swap related actions\n/// @dev Please note that these functions are very expensive. Ideally, these would be used for off-chain purposes\nlibrary InputBuilding {\n  /// @notice Takes a list of pairs and returns the input necessary to check the next swap\n  /// @dev Even though this function allows it, the DCAHub will fail if duplicated pairs are used\n  /// @return _tokens A sorted list of all the tokens involved in the swap\n  /// @return _pairsToSwap A sorted list of indexes that represent the pairs involved in the swap\n  function buildGetNextSwapInfoInput(Pair[] calldata _pairs)\n    internal\n    pure\n    returns (address[] memory _tokens, IDCAHub.PairIndexes[] memory _pairsToSwap)\n  {\n    (_tokens, _pairsToSwap, ) = buildSwapInput(_pairs, new IDCAHub.AmountOfToken[](0));\n  }\n\n  /// @notice Takes a list of pairs and a list of tokens to borrow and returns the input necessary to execute a swap\n  /// @dev Even though this function allows it, the DCAHub will fail if duplicated pairs are used\n  /// @return _tokens A sorted list of all the tokens involved in the swap\n  /// @return _pairsToSwap A sorted list of indexes that represent the pairs involved in the swap\n  /// @return _borrow A list of amounts to borrow, based on the sorted token list\n  function buildSwapInput(Pair[] calldata _pairs, IDCAHub.AmountOfToken[] memory _toBorrow)\n    internal\n    pure\n    returns (\n      address[] memory _tokens,\n      IDCAHub.PairIndexes[] memory _pairsToSwap,\n      uint256[] memory _borrow\n    )\n  {\n    _tokens = _calculateUniqueTokens(_pairs, _toBorrow);\n    _pairsToSwap = _calculatePairIndexes(_pairs, _tokens);\n    _borrow = _calculateTokensToBorrow(_toBorrow, _tokens);\n  }\n\n  /// @dev Given a list of token pairs and tokens to borrow, returns a list of all the tokens involved, sorted\n  function _calculateUniqueTokens(Pair[] memory _pairs, IDCAHub.AmountOfToken[] memory _toBorrow)\n    private\n    pure\n    returns (address[] memory _tokens)\n  {\n    uint256 _uniqueTokens;\n    address[] memory _tokensPlaceholder = new address[](_pairs.length * 2 + _toBorrow.length);\n\n    // Load tokens in pairs onto placeholder\n    for (uint256 i; i < _pairs.length; i++) {\n      bool _foundA = false;\n      bool _foundB = false;\n      for (uint256 j; j < _uniqueTokens && !(_foundA && _foundB); j++) {\n        if (!_foundA && _tokensPlaceholder[j] == _pairs[i].tokenA) _foundA = true;\n        if (!_foundB && _tokensPlaceholder[j] == _pairs[i].tokenB) _foundB = true;\n      }\n\n      if (!_foundA) _tokensPlaceholder[_uniqueTokens++] = _pairs[i].tokenA;\n      if (!_foundB) _tokensPlaceholder[_uniqueTokens++] = _pairs[i].tokenB;\n    }\n\n    // Load tokens to borrow onto placeholder\n    for (uint256 i; i < _toBorrow.length; i++) {\n      bool _found = false;\n      for (uint256 j; j < _uniqueTokens && !_found; j++) {\n        if (_tokensPlaceholder[j] == _toBorrow[i].token) _found = true;\n      }\n      if (!_found) _tokensPlaceholder[_uniqueTokens++] = _toBorrow[i].token;\n    }\n\n    // Load sorted into new array\n    _tokens = new address[](_uniqueTokens);\n    for (uint256 i; i < _uniqueTokens; i++) {\n      address _token = _tokensPlaceholder[i];\n\n      // Find index where the token should be\n      uint256 _tokenIndex;\n      while (_tokens[_tokenIndex] < _token && _tokens[_tokenIndex] != address(0)) _tokenIndex++;\n\n      // Move everything one place back\n      for (uint256 j = i; j > _tokenIndex; j--) {\n        _tokens[j] = _tokens[j - 1];\n      }\n\n      // Set token on the correct index\n      _tokens[_tokenIndex] = _token;\n    }\n  }\n\n  /// @dev Given a list of pairs, and a list of sorted tokens, it translates the first list into indexes of the second list. This list of indexes will\n  /// be sorted. For example, if pairs are [{ tokenA, tokenB }, { tokenC, tokenB }] and tokens are: [ tokenA, tokenB, tokenC ], the following is returned\n  /// [ { 0, 1 }, { 1, 1 }, { 1, 2 } ]\n  function _calculatePairIndexes(Pair[] calldata _pairs, address[] memory _tokens)\n    private\n    pure\n    returns (IDCAHub.PairIndexes[] memory _pairIndexes)\n  {\n    _pairIndexes = new IDCAHub.PairIndexes[](_pairs.length);\n    uint256 _count;\n\n    for (uint8 i; i < _tokens.length; i++) {\n      for (uint8 j = i + 1; j < _tokens.length; j++) {\n        for (uint256 k; k < _pairs.length; k++) {\n          if (\n            (_tokens[i] == _pairs[k].tokenA && _tokens[j] == _pairs[k].tokenB) ||\n            (_tokens[i] == _pairs[k].tokenB && _tokens[j] == _pairs[k].tokenA)\n          ) {\n            _pairIndexes[_count++] = IDCAHubSwapHandler.PairIndexes({indexTokenA: i, indexTokenB: j});\n          }\n        }\n      }\n    }\n  }\n\n  /// @dev Given a list of tokens to borrow and a list of sorted tokens, it translated the first list into a list of amounts, sorted by the indexed of\n  /// the seconds list. For example, if `toBorrow` are [{ tokenA, 100 }, { tokenC, 200 }, { tokenB, 500 }] and tokens are [ tokenA, tokenB, tokenC], the\n  /// following is returned [100, 500, 200]\n  function _calculateTokensToBorrow(IDCAHub.AmountOfToken[] memory _toBorrow, address[] memory _tokens)\n    private\n    pure\n    returns (uint256[] memory _borrow)\n  {\n    _borrow = new uint256[](_tokens.length);\n\n    for (uint256 i; i < _toBorrow.length; i++) {\n      uint256 j;\n      while (_tokens[j] != _toBorrow[i].token) j++;\n      _borrow[j] = _toBorrow[i].amount;\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/Permit2Transfers.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\n\n/**\n * @title Permit2 Transfers Library\n * @author Sam Bugs\n * @notice A small library to call Permit2's transfer from methods\n */\nlibrary Permit2Transfers {\n  /**\n   * @notice Executes a transfer from using Permit2\n   * @param _permit2 The Permit2 contract\n   * @param _token The token to transfer\n   * @param _amount The amount to transfer\n   * @param _nonce The owner's nonce\n   * @param _deadline The signature's expiration deadline\n   * @param _signature The signature that allows the transfer\n   * @param _recipient The address that will receive the funds\n   */\n  function takeFromCaller(\n    IPermit2 _permit2,\n    address _token,\n    uint256 _amount,\n    uint256 _nonce,\n    uint256 _deadline,\n    bytes calldata _signature,\n    address _recipient\n  ) internal {\n    _permit2.permitTransferFrom(\n      // The permit message.\n      IPermit2.PermitTransferFrom({permitted: IPermit2.TokenPermissions({token: _token, amount: _amount}), nonce: _nonce, deadline: _deadline}),\n      // The transfer recipient and amount.\n      IPermit2.SignatureTransferDetails({to: _recipient, requestedAmount: _amount}),\n      // The owner of the tokens, which must also be\n      // the signer of the message, otherwise this call\n      // will fail.\n      msg.sender,\n      // The packed signature that was the result of signing\n      // the EIP712 hash of `permit`.\n      _signature\n    );\n  }\n\n  /**\n   * @notice Executes a batch transfer from using Permit2\n   * @param _permit2 The Permit2 contract\n   * @param _tokens The amount of tokens to transfer\n   * @param _nonce The owner's nonce\n   * @param _deadline The signature's expiration deadline\n   * @param _signature The signature that allows the transfer\n   * @param _recipient The address that will receive the funds\n   */\n  function batchTakeFromCaller(\n    IPermit2 _permit2,\n    IPermit2.TokenPermissions[] calldata _tokens,\n    uint256 _nonce,\n    uint256 _deadline,\n    bytes calldata _signature,\n    address _recipient\n  ) internal {\n    if (_tokens.length > 0) {\n      _permit2.permitTransferFrom(\n        // The permit message.\n        IPermit2.PermitBatchTransferFrom({permitted: _tokens, nonce: _nonce, deadline: _deadline}),\n        // The transfer recipients and amounts.\n        _buildTransferDetails(_tokens, _recipient),\n        // The owner of the tokens, which must also be\n        // the signer of the message, otherwise this call\n        // will fail.\n        msg.sender,\n        // The packed signature that was the result of signing\n        // the EIP712 hash of `permit`.\n        _signature\n      );\n    }\n  }\n\n  function _buildTransferDetails(IPermit2.TokenPermissions[] calldata _tokens, address _recipient)\n    private\n    pure\n    returns (IPermit2.SignatureTransferDetails[] memory _details)\n  {\n    _details = new IPermit2.SignatureTransferDetails[](_tokens.length);\n    for (uint256 i; i < _details.length; ++i) {\n      _details[i] = IPermit2.SignatureTransferDetails({to: _recipient, requestedAmount: _tokens[i].amount});\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/SecondsUntilNextSwap.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\nimport '@mean-finance/dca-v2-core/contracts/libraries/TokenSorting.sol';\nimport '@mean-finance/dca-v2-core/contracts/libraries/Intervals.sol';\nimport '../interfaces/ISharedTypes.sol';\n\n/**\n * @title Seconds Until Next Swap Library\n * @notice Provides functions to calculate how long users have to wait until a pair's next swap is available\n */\nlibrary SecondsUntilNextSwap {\n  /**\n   * @notice Returns how many seconds left until the next swap is available for a specific pair\n   * @dev _tokenA and _tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param _hub The address of the DCA Hub\n   * @param _tokenA One of the pair's tokens\n   * @param _tokenB The other of the pair's tokens\n   * @param _calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\n   *        the possibility to calculate the seconds until next swap for privileged and non-privileged accounts\n   * @return The amount of seconds until next swap. Returns 0 if a swap can already be executed and max(uint256) if there is nothing to swap\n   */\n  function secondsUntilNextSwap(\n    IDCAHub _hub,\n    address _tokenA,\n    address _tokenB,\n    bool _calculatePrivilegedAvailability\n  ) internal view returns (uint256) {\n    (address __tokenA, address __tokenB) = TokenSorting.sortTokens(_tokenA, _tokenB);\n    bytes1 _activeIntervals = _hub.activeSwapIntervals(__tokenA, __tokenB);\n    bytes1 _mask = 0x01;\n    uint256 _smallerIntervalBlocking;\n    while (_activeIntervals >= _mask && _mask > 0) {\n      if (_activeIntervals & _mask == _mask) {\n        (, uint224 _nextAmountToSwapAToB, uint32 _lastSwappedAt, uint224 _nextAmountToSwapBToA) = _hub.swapData(_tokenA, _tokenB, _mask);\n        uint32 _swapInterval = Intervals.maskToInterval(_mask);\n        uint256 _nextAvailable = ((_lastSwappedAt / _swapInterval) + 1) * _swapInterval;\n        if (!_calculatePrivilegedAvailability) {\n          // If the caller does not have privileges, then they will have to wait a little more to execute swaps\n          _nextAvailable += _swapInterval / 3;\n        }\n        if (_nextAmountToSwapAToB > 0 || _nextAmountToSwapBToA > 0) {\n          if (_nextAvailable <= block.timestamp) {\n            return _smallerIntervalBlocking;\n          } else {\n            return _nextAvailable - block.timestamp;\n          }\n        } else if (_nextAvailable > block.timestamp) {\n          _smallerIntervalBlocking = _smallerIntervalBlocking == 0 ? _nextAvailable - block.timestamp : _smallerIntervalBlocking;\n        }\n      }\n      _mask <<= 1;\n    }\n    return type(uint256).max;\n  }\n\n  /**\n   * @notice Returns how many seconds left until the next swap is available for a list of pairs\n   * @dev Tokens in pairs may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param _hub The address of the DCA Hub\n   * @param _pairs Pairs to check\n   * @return _seconds The amount of seconds until next swap for each of the pairs\n   * @param _calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\n   *        the possibility to calculate the seconds until next swap for privileged and non-privileged accounts\n   */\n  function secondsUntilNextSwap(\n    IDCAHub _hub,\n    Pair[] calldata _pairs,\n    bool _calculatePrivilegedAvailability\n  ) internal view returns (uint256[] memory _seconds) {\n    _seconds = new uint256[](_pairs.length);\n    for (uint256 i; i < _pairs.length; i++) {\n      _seconds[i] = secondsUntilNextSwap(_hub, _pairs[i].tokenA, _pairs[i].tokenB, _calculatePrivilegedAvailability);\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/BaseCompanion.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport './SwapAdapter.sol';\nimport './PayableMulticall.sol';\nimport {SimulationAdapter} from '@mean-finance/call-simulation/contracts/SimulationAdapter.sol';\nimport {IPermit2} from '../interfaces/external/IPermit2.sol';\nimport {Permit2Transfers} from '../libraries/Permit2Transfers.sol';\nimport './Governable.sol';\n\n/**\n * @notice This contract will work as base companion for all our contracts. It will extend the capabilities of our companion\n *         contracts so that they can execute multicalls, swaps, revokes and more\n * @dev All public functions are payable, so that they can be multicalled together with other payable functions when msg.value > 0\n */\nabstract contract BaseCompanion is SimulationAdapter, Governable, SwapAdapter, PayableMulticall {\n  using Permit2Transfers for IPermit2;\n  using SafeERC20 for IERC20;\n\n  /**\n   * @notice Returns the address of the Permit2 contract\n   * @dev This value is constant and cannot change\n   * @return The address of the Permit2 contract\n   */\n  // solhint-disable-next-line var-name-mixedcase\n  IPermit2 public immutable PERMIT2;\n\n  /// @notice The address of the swapper\n  address public swapper;\n\n  /// @notice The address of the allowance target\n  address public allowanceTarget;\n\n  constructor(\n    address _swapper,\n    address _allowanceTarget,\n    address _governor,\n    IPermit2 _permit2\n  ) SwapAdapter() Governable(_governor) {\n    swapper = _swapper;\n    allowanceTarget = _allowanceTarget;\n    PERMIT2 = _permit2;\n  }\n\n  receive() external payable {}\n\n  /**\n   * @notice Sends the specified amount of the given token to the recipient\n   * @param _token The token to transfer\n   * @param _amount The amount to transfer\n   * @param _recipient The recipient of the token balance\n   */\n  function sendToRecipient(\n    address _token,\n    uint256 _amount,\n    address _recipient\n  ) external payable {\n    _sendToRecipient(_token, _amount, _recipient);\n  }\n\n  /**\n   * @notice Takes the given amount of tokens from the caller and transfers it to this contract\n   * @param _token The token to take\n   * @param _amount The amount to take\n   */\n  function takeFromCaller(\n    IERC20 _token,\n    uint256 _amount,\n    address _recipient\n  ) external payable {\n    _token.safeTransferFrom(msg.sender, _recipient, _amount);\n  }\n\n  /**\n   * @notice Executes a swap against the swapper\n   * @param _allowanceToken The token to set allowance for (can be set to zero address to ignore)\n   * @param _value The value to send to the swapper as part of the swap\n   * @param _swapData The swap data\n   * @param _tokenOut The token that will be bought as part of the swap\n   */\n  function runSwap(\n    address _allowanceToken,\n    uint256 _value,\n    bytes calldata _swapData,\n    address _tokenOut\n  ) external payable returns (uint256 _amountOut) {\n    if (_allowanceToken != address(0)) {\n      IERC20(_allowanceToken).forceApprove(allowanceTarget, type(uint256).max);\n    }\n\n    _executeSwap(swapper, _swapData, _value);\n\n    _amountOut = _tokenOut == PROTOCOL_TOKEN ? address(this).balance : IERC20(_tokenOut).balanceOf(address(this));\n  }\n\n  /**\n   * @notice Takes the given amount of tokens from the caller with Permit2 and transfers it to this contract\n   * @param _token The token to take\n   * @param _amount The amount to take\n   * @param _nonce The signed nonce\n   * @param _deadline The signature's deadline\n   * @param _signature The owner's signature\n   * @param _recipient The address that will receive the funds\n   */\n  function permitTakeFromCaller(\n    address _token,\n    uint256 _amount,\n    uint256 _nonce,\n    uint256 _deadline,\n    bytes calldata _signature,\n    address _recipient\n  ) external payable {\n    PERMIT2.takeFromCaller(_token, _amount, _nonce, _deadline, _signature, _recipient);\n  }\n\n  /**\n   * @notice Takes the a batch of tokens from the caller with Permit2 and transfers it to this contract\n   * @param _tokens The tokens to take\n   * @param _nonce The signed nonce\n   * @param _deadline The signature's deadline\n   * @param _signature The owner's signature\n   * @param _recipient The address that will receive the funds\n   */\n  function batchPermitTakeFromCaller(\n    IPermit2.TokenPermissions[] calldata _tokens,\n    uint256 _nonce,\n    uint256 _deadline,\n    bytes calldata _signature,\n    address _recipient\n  ) external payable {\n    PERMIT2.batchTakeFromCaller(_tokens, _nonce, _deadline, _signature, _recipient);\n  }\n\n  /**\n   * @notice Checks if the contract has any balance of the given token, and if it does,\n   *         it sends it to the given recipient\n   * @param _token The token to check\n   * @param _recipient The recipient of the token balance\n   */\n  function sendBalanceOnContractToRecipient(address _token, address _recipient) external payable {\n    _sendBalanceOnContractToRecipient(_token, _recipient);\n  }\n\n  /**\n   * @notice Sets a new swapper and allowance target\n   * @param _newSwapper The address of the new swapper\n   * @param _newAllowanceTarget The address of the new allowance target\n   */\n  function setSwapper(address _newSwapper, address _newAllowanceTarget) external onlyGovernor {\n    swapper = _newSwapper;\n    allowanceTarget = _newAllowanceTarget;\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/Governable.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport './interfaces/IGovernable.sol';\n\n/**\n * @notice This contract is meant to be used in other contracts. By using this contract,\n *         a specific address will be given a \"governor\" role, which basically will be able to\n *         control certains aspects of the contract. There are other contracts that do the same,\n *         but this contract forces a new governor to accept the role before it's transferred.\n *         This is a basically a safety measure to prevent losing access to the contract.\n */\nabstract contract Governable is IGovernable {\n  /// @inheritdoc IGovernable\n  address public governor;\n\n  /// @inheritdoc IGovernable\n  address public pendingGovernor;\n\n  constructor(address _governor) {\n    if (_governor == address(0)) revert GovernorIsZeroAddress();\n    governor = _governor;\n  }\n\n  /// @inheritdoc IGovernable\n  function isGovernor(address _account) public view returns (bool) {\n    return _account == governor;\n  }\n\n  /// @inheritdoc IGovernable\n  function isPendingGovernor(address _account) public view returns (bool) {\n    return _account == pendingGovernor;\n  }\n\n  /// @inheritdoc IGovernable\n  function setPendingGovernor(address _pendingGovernor) external onlyGovernor {\n    pendingGovernor = _pendingGovernor;\n    emit PendingGovernorSet(_pendingGovernor);\n  }\n\n  /// @inheritdoc IGovernable\n  function acceptPendingGovernor() external onlyPendingGovernor {\n    governor = pendingGovernor;\n    pendingGovernor = address(0);\n    emit PendingGovernorAccepted();\n  }\n\n  modifier onlyGovernor() {\n    if (!isGovernor(msg.sender)) revert OnlyGovernor();\n    _;\n  }\n\n  modifier onlyPendingGovernor() {\n    if (!isPendingGovernor(msg.sender)) revert OnlyPendingGovernor();\n    _;\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/PayableMulticall.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\n\n/**\n * @dev Adding this contract will enable batching calls. This is basically the same as Open Zeppelin's\n *      Multicall contract, but we have made it payable. It supports both payable and non payable\n *      functions. However, if `msg.value` is not zero, then non payable functions cannot be called.\n *      Any contract that uses this Multicall version should be very careful when using msg.value.\n *      For more context, read: https://github.com/Uniswap/v3-periphery/issues/52\n */\nabstract contract PayableMulticall {\n  /**\n   * @notice Receives and executes a batch of function calls on this contract.\n   * @param _data A list of different function calls to execute\n   * @return _results The result of executing each of those calls\n   */\n  function multicall(bytes[] calldata _data) external payable returns (bytes[] memory _results) {\n    _results = new bytes[](_data.length);\n    for (uint256 i = 0; i < _data.length; ) {\n      _results[i] = Address.functionDelegateCall(address(this), _data[i]);\n      unchecked {\n        i++;\n      }\n    }\n    return _results;\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/SwapAdapter.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nabstract contract SwapAdapter {\n  using SafeERC20 for IERC20;\n  using Address for address;\n  using Address for address payable;\n\n  /// @notice Describes how the allowance should be revoked for the given spender\n  struct RevokeAction {\n    address spender;\n    IERC20[] tokens;\n  }\n\n  address public constant PROTOCOL_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /**\n   * @notice Takes the given amount of tokens from the caller\n   * @param _token The token to check\n   * @param _amount The amount to take\n   */\n  function _takeFromMsgSender(IERC20 _token, uint256 _amount) internal virtual {\n    _token.safeTransferFrom(msg.sender, address(this), _amount);\n  }\n\n  /**\n   * @notice Executes a swap for the given swapper\n   * @param _swapper The actual swapper\n   * @param _swapData The swap execution data\n   */\n  function _executeSwap(\n    address _swapper,\n    bytes calldata _swapData,\n    uint256 _value\n  ) internal virtual {\n    _swapper.functionCallWithValue(_swapData, _value);\n  }\n\n  /**\n   * @notice Transfers the given amount of tokens from the contract to the recipient\n   * @param _token The token to check\n   * @param _amount The amount to send\n   * @param _recipient The recipient\n   */\n  function _sendToRecipient(\n    address _token,\n    uint256 _amount,\n    address _recipient\n  ) internal virtual {\n    if (_recipient == address(0)) _recipient = msg.sender;\n    if (_token == PROTOCOL_TOKEN) {\n      payable(_recipient).sendValue(_amount);\n    } else {\n      IERC20(_token).safeTransfer(_recipient, _amount);\n    }\n  }\n\n  /**\n   * @notice Checks if the contract has any balance of the given token, and if it does,\n   *         it sends it to the given recipient\n   * @param _token The token to check\n   * @param _recipient The recipient of the token balance\n   */\n  function _sendBalanceOnContractToRecipient(address _token, address _recipient) internal virtual {\n    uint256 _balance = _token == PROTOCOL_TOKEN ? address(this).balance : IERC20(_token).balanceOf(address(this));\n    if (_balance > 0) {\n      _sendToRecipient(_token, _balance, _recipient);\n    }\n  }\n\n  /**\n   * @notice Revokes ERC20 allowances for the given spenders\n   * @dev If exposed, then it should be permissioned\n   * @param _revokeActions The spenders and tokens to revoke\n   */\n  function _revokeAllowances(RevokeAction[] calldata _revokeActions) internal virtual {\n    for (uint256 i = 0; i < _revokeActions.length; ) {\n      RevokeAction memory _action = _revokeActions[i];\n      for (uint256 j = 0; j < _action.tokens.length; ) {\n        _action.tokens[j].forceApprove(_action.spender, 0);\n        unchecked {\n          j++;\n        }\n      }\n      unchecked {\n        i++;\n      }\n    }\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/interfaces/IGovernable.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\n/**\n * @title A contract that manages a \"governor\" role\n */\ninterface IGovernable {\n  /// @notice Thrown when trying to set the zero address as governor\n  error GovernorIsZeroAddress();\n\n  /// @notice Thrown when trying to execute an action that only the governor an execute\n  error OnlyGovernor();\n\n  /// @notice Thrown when trying to execute an action that only the pending governor an execute\n  error OnlyPendingGovernor();\n\n  /**\n   * @notice Emitted when a new pending governor is set\n   * @param newPendingGovernor The new pending governor\n   */\n  event PendingGovernorSet(address newPendingGovernor);\n\n  /**\n   * @notice Emitted when the pending governor accepts the role and becomes the governor\n   */\n  event PendingGovernorAccepted();\n\n  /**\n   * @notice Returns the address of the governor\n   * @return The address of the governor\n   */\n  function governor() external view returns (address);\n\n  /**\n   * @notice Returns the address of the pending governor\n   * @return The address of the pending governor\n   */\n  function pendingGovernor() external view returns (address);\n\n  /**\n   * @notice Returns whether the given account is the current governor\n   * @param account The account to check\n   * @return Whether it is the current governor or not\n   */\n  function isGovernor(address account) external view returns (bool);\n\n  /**\n   * @notice Returns whether the given account is the pending governor\n   * @param account The account to check\n   * @return Whether it is the pending governor or not\n   */\n  function isPendingGovernor(address account) external view returns (bool);\n\n  /**\n   * @notice Sets a new pending governor\n   * @dev Only the current governor can execute this action\n   * @param pendingGovernor The new pending governor\n   */\n  function setPendingGovernor(address pendingGovernor) external;\n\n  /**\n   * @notice Sets the pending governor as the governor\n   * @dev Only the pending governor can execute this action\n   */\n  function acceptPendingGovernor() external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
          },
          "node_modules/@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\n/**\n * @title The interface for generating a description for a position in a DCA Hub\n * @notice Contracts that implement this interface must return a base64 JSON with the entire description\n */\ninterface IDCAHubPositionDescriptor {\n  /**\n   * @notice Generates a positions's description, both the JSON and the image inside\n   * @param hub The address of the DCA Hub\n   * @param positionId The token/position id\n   * @return description The position's description\n   */\n  function tokenURI(address hub, uint256 positionId) external view returns (string memory description);\n}\n"
          },
          "node_modules/@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/**\n * @title The interface for an oracle that provides price quotes\n * @notice These methods allow users to add support for pairs, and then ask for quotes\n */\ninterface ITokenPriceOracle {\n  /// @notice Thrown when trying to add support for a pair that cannot be supported\n  error PairCannotBeSupported(address tokenA, address tokenB);\n\n  /// @notice Thrown when trying to execute a quote with a pair that isn't supported yet\n  error PairNotSupportedYet(address tokenA, address tokenB);\n\n  /**\n   * @notice Returns whether this oracle can support the given pair of tokens\n   * @dev tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param tokenA One of the pair's tokens\n   * @param tokenB The other of the pair's tokens\n   * @return Whether the given pair of tokens can be supported by the oracle\n   */\n  function canSupportPair(address tokenA, address tokenB) external view returns (bool);\n\n  /**\n   * @notice Returns whether this oracle is already supporting the given pair of tokens\n   * @dev tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param tokenA One of the pair's tokens\n   * @param tokenB The other of the pair's tokens\n   * @return Whether the given pair of tokens is already being supported by the oracle\n   */\n  function isPairAlreadySupported(address tokenA, address tokenB) external view returns (bool);\n\n  /**\n   * @notice Returns a quote, based on the given tokens and amount\n   * @dev Will revert if pair isn't supported\n   * @param tokenIn The token that will be provided\n   * @param amountIn The amount that will be provided\n   * @param tokenOut The token we would like to quote\n   * @param data Custom data that the oracle might need to operate\n   * @return amountOut How much `tokenOut` will be returned in exchange for `amountIn` amount of `tokenIn`\n   */\n  function quote(\n    address tokenIn,\n    uint256 amountIn,\n    address tokenOut,\n    bytes calldata data\n  ) external view returns (uint256 amountOut);\n\n  /**\n   * @notice Add or reconfigures the support for a given pair. This function will let the oracle take some actions\n   *         to configure the pair, in preparation for future quotes. Can be called many times in order to let the oracle\n   *         re-configure for a new context\n   * @dev Will revert if pair cannot be supported. tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param tokenA One of the pair's tokens\n   * @param tokenB The other of the pair's tokens\n   * @param data Custom data that the oracle might need to operate\n   */\n  function addOrModifySupportForPair(\n    address tokenA,\n    address tokenB,\n    bytes calldata data\n  ) external;\n\n  /**\n   * @notice Adds support for a given pair if the oracle didn't support it already. If called for a pair that is already supported,\n   *         then nothing will happen. This function will let the oracle take some actions to configure the pair, in preparation\n   *         for future quotes\n   * @dev Will revert if pair cannot be supported. tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\n   * @param tokenA One of the pair's tokens\n   * @param tokenB The other of the pair's tokens\n   * @param data Custom data that the oracle might need to operate\n   */\n  function addSupportForPairIfNeeded(\n    address tokenA,\n    address tokenB,\n    bytes calldata data\n  ) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHubSwapCallee.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport './IDCAHub.sol';\n\n/**\n * @title The interface for handling flash swaps\n * @notice Users that want to execute flash swaps must implement this interface\n */\ninterface IDCAHubSwapCallee {\n  // solhint-disable-next-line func-name-mixedcase\n  function DCAHubSwapCall(\n    address sender,\n    IDCAHub.TokenInSwap[] calldata tokens,\n    uint256[] calldata borrowed,\n    bytes calldata data\n  ) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/ThirdPartyDCAHubSwapper.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/access/IAccessControl.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHubSwapCallee.sol';\n\ncontract ThirdPartyDCAHubSwapper is IDCAHubSwapCallee {\n  /// @notice A target we want to give allowance to\n  struct Allowance {\n    IERC20 token;\n    address spender;\n  }\n\n  /// @notice The data necessary for a swap to be executed\n  struct SwapExecution {\n    address swapper;\n    uint256 value;\n    bytes swapData;\n  }\n\n  /// @notice Data used for the callback\n  struct SwapWithDexesCallbackData {\n    // If this is a test check\n    bool isTest;\n    // Timestamp where the tx is no longer valid\n    uint256 deadline;\n    // Targets to set allowance to\n    Allowance[] allowanceTargets;\n    // The different swaps to execute\n    SwapExecution[] executions;\n    // A list of tokens to check for unspent balance (should not be reward/to provide)\n    IERC20[] intermediateTokensToCheck;\n    // The address that will receive the unspent tokens\n    address leftoverRecipient;\n  }\n\n  /// @notice An amount of certain token\n  struct AmountOfToken {\n    address token;\n    uint256 amount;\n  }\n\n  /// @notice Thrown when the swap is a test. It reports the amount of tokens help by the swapper\n  error SwapResults(AmountOfToken[] amounts);\n\n  /// @notice Thrown when deadline has passed\n  error TransactionTooOld();\n\n  /// @notice Thrown when the caller tries to execute a swap, but they are not the privileged swapper\n  error NotPrivilegedSwapper();\n\n  using SafeERC20 for IERC20;\n  using Address for address;\n\n  bytes32 public constant PRIVILEGED_SWAPPER_ROLE = keccak256('PRIVILEGED_SWAPPER_ROLE');\n\n  // solhint-disable-next-line func-name-mixedcase\n  function DCAHubSwapCall(\n    address,\n    IDCAHub.TokenInSwap[] calldata _tokens,\n    uint256[] calldata,\n    bytes calldata _data\n  ) external {\n    SwapWithDexesCallbackData memory _callbackData = abi.decode(_data, (SwapWithDexesCallbackData));\n    if (block.timestamp > _callbackData.deadline) revert TransactionTooOld();\n    _approveAllowances(_callbackData.allowanceTargets);\n    _executeSwaps(_callbackData.executions);\n    if (_callbackData.isTest) {\n      _revertWithResults(_tokens, _callbackData.intermediateTokensToCheck);\n    }\n    _handleSwapTokens(_tokens, _callbackData.leftoverRecipient);\n    _handleIntermediateTokens(_callbackData.intermediateTokensToCheck, _callbackData.leftoverRecipient);\n  }\n\n  /**\n   * @notice Executed a DCA swap\n   * @dev There are some cases where the oracles differ from what the markets can offer, so a swap can't be executed. But\n   *      it could happen that even if the amounts being swap are really big, the difference between oracle and market is\n   *      only a few dollars. In that case, it would be nice if someone could just pay for the difference.\n   *      The idea here is that instead of calling the hub directly, someone could call the swapper with some native token,\n   *      so that when the swapper gets called, they can use that native token balance as part of the swap, and cover the\n   *      difference\n   */\n  function executeSwap(\n    IDCAHubWithAccessControl _hub,\n    address[] calldata _tokens,\n    IDCAHub.PairIndexes[] calldata _pairsToSwap,\n    uint256[] calldata _borrow,\n    bytes calldata _callbackData,\n    bytes calldata _oracleData\n  ) external payable {\n    if (!_hub.hasRole(PRIVILEGED_SWAPPER_ROLE, msg.sender)) {\n      revert NotPrivilegedSwapper();\n    }\n    _hub.swap(_tokens, _pairsToSwap, address(this), address(this), _borrow, _callbackData, _oracleData);\n  }\n\n  function _approveAllowances(Allowance[] memory _allowanceTargets) internal {\n    for (uint256 i = 0; i < _allowanceTargets.length; ++i) {\n      Allowance memory _target = _allowanceTargets[i];\n      _target.token.forceApprove(_target.spender, type(uint256).max);\n    }\n  }\n\n  function _executeSwaps(SwapExecution[] memory _executions) internal {\n    for (uint256 i = 0; i < _executions.length; ++i) {\n      SwapExecution memory _execution = _executions[i];\n      _execution.swapper.functionCallWithValue(_execution.swapData, _execution.value);\n    }\n  }\n\n  function _handleSwapTokens(IDCAHub.TokenInSwap[] calldata _tokens, address _leftoverRecipient) internal {\n    for (uint256 i = 0; i < _tokens.length; ++i) {\n      IERC20 _token = IERC20(_tokens[i].token);\n      uint256 _balance = _token.balanceOf(address(this));\n      if (_balance > 0) {\n        uint256 _toProvide = _tokens[i].toProvide;\n        if (_toProvide > 0) {\n          // Send everything to hub (we assume the hub is msg.sender)\n          _token.safeTransfer(msg.sender, _balance);\n        } else {\n          // Send reward to the leftover recipient\n          _token.safeTransfer(_leftoverRecipient, _balance);\n        }\n      }\n    }\n  }\n\n  function _handleIntermediateTokens(IERC20[] memory _intermediateTokens, address _leftoverRecipient) internal {\n    for (uint256 i = 0; i < _intermediateTokens.length; ++i) {\n      uint256 _balance = _intermediateTokens[i].balanceOf(address(this));\n      if (_balance > 0) {\n        _intermediateTokens[i].safeTransfer(_leftoverRecipient, _balance);\n      }\n    }\n  }\n\n  function _revertWithResults(IDCAHub.TokenInSwap[] calldata _tokens, IERC20[] memory _intermediateTokens) internal view {\n    AmountOfToken[] memory _amounts = new AmountOfToken[](_tokens.length + _intermediateTokens.length);\n    for (uint256 i; i < _tokens.length; i++) {\n      address _token = _tokens[i].token;\n      _amounts[i] = AmountOfToken({token: _token, amount: IERC20(_token).balanceOf(address(this))});\n    }\n    for (uint256 i; i < _intermediateTokens.length; i++) {\n      _amounts[i + _tokens.length] = AmountOfToken({\n        token: address(_intermediateTokens[i]),\n        amount: _intermediateTokens[i].balanceOf(address(this))\n      });\n    }\n    revert SwapResults(_amounts);\n  }\n}\n\ninterface IDCAHubWithAccessControl is IDCAHub, IAccessControl {}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/IAccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '@openzeppelin/contracts/access/AccessControl.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/Multicall.sol';\nimport '@mean-finance/call-simulation/contracts/SimulationAdapter.sol';\nimport '../interfaces/IDCAFeeManager.sol';\nimport '../utils/SwapAdapter.sol';\n\ncontract DCAFeeManager is SwapAdapter, AccessControl, Multicall, IDCAFeeManager, SimulationAdapter {\n  bytes32 public constant SUPER_ADMIN_ROLE = keccak256('SUPER_ADMIN_ROLE');\n  bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n\n  using SafeERC20 for IERC20;\n  using Address for address payable;\n\n  constructor(address _superAdmin, address[] memory _initialAdmins) SwapAdapter() {\n    if (_superAdmin == address(0)) revert ZeroAddress();\n    // We are setting the super admin role as its own admin so we can transfer it\n    _setRoleAdmin(SUPER_ADMIN_ROLE, SUPER_ADMIN_ROLE);\n    _setRoleAdmin(ADMIN_ROLE, SUPER_ADMIN_ROLE);\n    _grantRole(SUPER_ADMIN_ROLE, _superAdmin);\n    for (uint256 i; i < _initialAdmins.length; i++) {\n      _grantRole(ADMIN_ROLE, _initialAdmins[i]);\n    }\n  }\n\n  receive() external payable {}\n\n  /// @inheritdoc IDCAFeeManager\n  function runSwapsAndTransferMany(RunSwapsAndTransferManyParams calldata _parameters) public payable onlyRole(ADMIN_ROLE) {\n    // Approve whatever is necessary\n    for (uint256 i = 0; i < _parameters.allowanceTargets.length; ++i) {\n      AllowanceTarget memory _allowance = _parameters.allowanceTargets[i];\n      _maxApproveSpender(_allowance.token, _allowance.allowanceTarget);\n    }\n\n    // Execute swaps\n    for (uint256 i = 0; i < _parameters.swaps.length; ++i) {\n      SwapContext memory _context = _parameters.swapContext[i];\n      _executeSwap(_parameters.swappers[_context.swapperIndex], _parameters.swaps[i], _context.value);\n    }\n\n    // Transfer out whatever was left in the contract\n    for (uint256 i = 0; i < _parameters.transferOutBalance.length; ++i) {\n      TransferOutBalance memory _transferOutBalance = _parameters.transferOutBalance[i];\n      _sendBalanceOnContractToRecipient(_transferOutBalance.token, _transferOutBalance.recipient);\n    }\n  }\n\n  /// @inheritdoc IDCAFeeManager\n  function withdrawFromPlatformBalance(\n    IDCAHub _hub,\n    IDCAHub.AmountOfToken[] calldata _amountToWithdraw,\n    address _recipient\n  ) external onlyRole(ADMIN_ROLE) {\n    _hub.withdrawFromPlatformBalance(_amountToWithdraw, _recipient);\n  }\n\n  /// @inheritdoc IDCAFeeManager\n  function withdrawFromBalance(IDCAHub.AmountOfToken[] calldata _amountToWithdraw, address _recipient) external onlyRole(ADMIN_ROLE) {\n    for (uint256 i = 0; i < _amountToWithdraw.length; ++i) {\n      IDCAHub.AmountOfToken memory _amountOfToken = _amountToWithdraw[i];\n      if (_amountOfToken.amount == type(uint256).max) {\n        _sendBalanceOnContractToRecipient(_amountOfToken.token, _recipient);\n      } else {\n        _sendToRecipient(_amountOfToken.token, _amountOfToken.amount, _recipient);\n      }\n    }\n  }\n\n  /// @inheritdoc IDCAFeeManager\n  function revokeAllowances(RevokeAction[] calldata _revokeActions) external onlyRole(ADMIN_ROLE) {\n    _revokeAllowances(_revokeActions);\n  }\n\n  /// @inheritdoc IDCAFeeManager\n  function availableBalances(IDCAHub _hub, address[] calldata _tokens) external view returns (AvailableBalance[] memory _balances) {\n    _balances = new AvailableBalance[](_tokens.length);\n    for (uint256 i = 0; i < _tokens.length; i++) {\n      address _token = _tokens[i];\n      _balances[i] = AvailableBalance({\n        token: _token,\n        platformBalance: _hub.platformBalance(_token),\n        feeManagerBalance: IERC20(_token).balanceOf(address(this))\n      });\n    }\n  }\n\n  function supportsInterface(bytes4 _interfaceId) public view virtual override(AccessControl, SimulationAdapter) returns (bool) {\n    return SimulationAdapter.supportsInterface(_interfaceId) || AccessControl.supportsInterface(_interfaceId);\n  }\n\n  function getPositionKey(address _from, address _to) public pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_from, _to));\n  }\n\n  /// @dev This version does not check the swapper registry at all\n  function _maxApproveSpender(IERC20 _token, address _spender) internal {\n    _token.forceApprove(_spender, type(uint256).max);\n  }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAFeeManager.sol": {
            "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.7;\n\nimport {IDCAHub, IERC20} from '@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol';\nimport {SwapAdapter} from '../utils/SwapAdapter.sol';\nimport {SwapContext} from '../utils/types/SwapContext.sol';\nimport {TransferOutBalance} from '../utils/types/TransferOutBalance.sol';\n\n/**\n * @title DCA Fee Manager\n * @notice This contract will manage all platform fees. Since fees come in different tokens, this manager\n *         will be in charge of taking them and converting them to different tokens, for example ETH/MATIC\n *         or stablecoins. Allowed users will to withdraw fees as generated, or DCA them into tokens\n *         of their choosing\n */\ninterface IDCAFeeManager {\n  /// @notice The parameters to execute the call\n  struct RunSwapsAndTransferManyParams {\n    // The accounts that should be approved for spending\n    AllowanceTarget[] allowanceTargets;\n    // The different swappers involved in the swap\n    address[] swappers;\n    // The different swapps to execute\n    bytes[] swaps;\n    // Context necessary for the swap execution\n    SwapContext[] swapContext;\n    // Tokens to transfer after swaps have been executed\n    TransferOutBalance[] transferOutBalance;\n  }\n\n  /// @notice An allowance to provide for the swaps to work\n  struct AllowanceTarget {\n    // The token that should be approved\n    IERC20 token;\n    // The spender\n    address allowanceTarget;\n  }\n\n  /// @notice Represents how much is available for withdraw, for a specific token\n  struct AvailableBalance {\n    address token;\n    uint256 platformBalance;\n    uint256 feeManagerBalance;\n  }\n\n  /// @notice Thrown when one of the parameters is a zero address\n  error ZeroAddress();\n\n  /**\n   * @notice Executes multiple swaps\n   * @dev Can only be executed by admins\n   * @param parameters The parameters for the swap\n   */\n  function runSwapsAndTransferMany(RunSwapsAndTransferManyParams calldata parameters) external payable;\n\n  /**\n   * @notice Withdraws tokens from the platform balance, and sends them to the given recipient\n   * @dev Can only be executed by admins\n   * @param hub The address of the DCA Hub\n   * @param amountToWithdraw The tokens to withdraw, and their amounts\n   * @param recipient The address of the recipient\n   */\n  function withdrawFromPlatformBalance(\n    IDCAHub hub,\n    IDCAHub.AmountOfToken[] calldata amountToWithdraw,\n    address recipient\n  ) external;\n\n  /**\n   * @notice Withdraws tokens from the contract's balance, and sends them to the given recipient\n   * @dev Can only be executed by admins\n   * @param amountToWithdraw The tokens to withdraw, and their amounts\n   * @param recipient The address of the recipient\n   */\n  function withdrawFromBalance(IDCAHub.AmountOfToken[] calldata amountToWithdraw, address recipient) external;\n\n  /**\n   * @notice Revokes ERC20 allowances for the given spenders\n   * @dev Can only be executed by admins\n   * @param revokeActions The spenders and tokens to revoke\n   */\n  function revokeAllowances(SwapAdapter.RevokeAction[] calldata revokeActions) external;\n\n  /**\n   * @notice Returns how much is available for withdraw, for the given tokens\n   * @dev This is meant for off-chan purposes\n   * @param hub The address of the DCA Hub\n   * @param tokens The tokens to check the balance for\n   * @return How much is available for withdraw, for the given tokens\n   */\n  function availableBalances(IDCAHub hub, address[] calldata tokens) external view returns (AvailableBalance[] memory);\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/types/SwapContext.sol": {
            "content": "/// @notice Context necessary for the swap execution\nstruct SwapContext {\n  // The index of the swapper that should execute each swap. This might look strange but it's way cheaper than alternatives\n  uint8 swapperIndex;\n  // The ETH/MATIC/BNB to send as part of the swap\n  uint256 value;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/types/TransferOutBalance.sol": {
            "content": "/// @notice A token that was left on the contract and should be transferred out\nstruct TransferOutBalance {\n  // The token to transfer\n  address token;\n  // The recipient of those tokens\n  address recipient;\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/AccessControl.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Multicall.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\n\npragma solidity ^0.8.20;\n\nimport {Address} from \"./Address.sol\";\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\n * selectors won't filter calls nested within a {multicall} operation.\n *\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\n * {_msgSender} are not propagated to subcalls.\n */\nabstract contract Multicall is Context {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        bytes memory context = msg.sender == _msgSender()\n            ? new bytes(0)\n            : msg.data[msg.data.length - _contextSuffixLength():];\n\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\n        }\n        return results;\n    }\n}\n"
          },
          "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
          }
        }
      }
    }
  ],
  "version": "0.2.0",
  "merkleTree": {
    "root": "0x9226cfd18f3f2e814b9472ef24a7493ab1f7aae3910f651be0b43cb78ec13601",
    "leavesWithProofs": [
      {
        "leaf": {
          "chainId": "100",
          "index": "0",
          "leafType": 0,
          "data": "0x000000000000000000000000bc2122028eecd61df4b2cb2b996c00bd856e333b000000000000000000000000fc74d2b66e455a30d4ba2a77821ba994e50f4c4100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000005000000000000000000000000b5e96127d417b1b3ef8438496a38a143167209c700000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x96ce1d528e539940e9d8ad67f389ffbe713c455ddec35dbcb272f6511a9bae68",
          "0xede93ce66f251fbff9086205c40ff9c6b6e3586243951557d28c29ee461ec6ff",
          "0x079fb1e58ed79becd8309c2323bab1846d6ad0793cbe55ea8c4f1c5277ff8d3b"
        ]
      },
      {
        "leaf": {
          "chainId": "100",
          "index": "1",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xbb922b2ec8388541fcf6d7978a03358d350e61827cdbf2c36b58685a4ddb7c92",
          "0xede93ce66f251fbff9086205c40ff9c6b6e3586243951557d28c29ee461ec6ff",
          "0x079fb1e58ed79becd8309c2323bab1846d6ad0793cbe55ea8c4f1c5277ff8d3b"
        ]
      },
      {
        "leaf": {
          "chainId": "100",
          "index": "2",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x4c7d055818b91355bb09f69eb886045f839da54a12f16da28507c3c33ca0885d",
          "0x4298374c9e19aaa1ef4c73d8e0e6dcb63d5998dcbb43d6ee2a92ac585b595cd9",
          "0x38eb0c7bdcbb72545ad194a641559241d80120cc916a6a2bd8c33d871b11c46e",
          "0x89785444f318e9c1cae0f94dd74ab9e34c700b44df49060bcafcefe402347dec"
        ]
      },
      {
        "leaf": {
          "chainId": "100",
          "index": "3",
          "leafType": 1,
          "data": "0x0000000000000000000000003a3e3a37c5e5ae9b49dbb9555a1e6f6d813674060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019b21f00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001b64c7aeef0f42616c6d792d335061727479537761707065722d563100000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ad5608060405234801561001057600080fd5b50611ab5806100206000396000f3fe6080604052600436106100345760003560e01c80635817c99e14610039578063648573701461005b578063d6347c1b146100a1575b600080fd5b34801561004557600080fd5b50610059610054366004610e6e565b6100b4565b005b34801561006757600080fd5b5061008f7f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f481565b60405190815260200160405180910390f35b6100596100af366004610f91565b61015d565b60006100c282840184611470565b90508060200151421115610102576040517fa83116fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010f8160400151610322565b61011c81606001516103ac565b8051156101325761013287878360800151610417565b61014187878360a001516106ed565b61015381608001518260a00151610840565b5050505050505050565b6040517f91d148540000000000000000000000000000000000000000000000000000000081527f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f4600482015233602482015273ffffffffffffffffffffffffffffffffffffffff8c16906391d1485490604401602060405180830381865afa1580156101ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102119190611551565b610247576040517f1171cc3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb39461e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c169063b39461e5906102af908d908d908d908d90309081908f908f908f908f908f908f9060040161166a565b6000604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103149190810190611858565b505050505050505050505050565b60005b81518110156103a857600082828151811061034257610342611982565b6020026020010151905061039f81602001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836000015173ffffffffffffffffffffffffffffffffffffffff166109549092919063ffffffff16565b50600101610325565b5050565b60005b81518110156103a85760008282815181106103cc576103cc611982565b6020026020010151905061040d81604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16610a6f9092919063ffffffff16565b50506001016103af565b805160009061042690846119b1565b67ffffffffffffffff81111561043e5761043e611098565b60405190808252806020026020018201604052801561048357816020015b604080518082019091526000808252602082015281526020019060019003908161045c5790505b50905060005b838110156105865760008585838181106104a5576104a5611982565b6104bb92602060809092020190810191506119eb565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff831680825291517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152929350916020830191906370a0823190602401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611a08565b81525083838151811061057257610572611982565b602090810291909101015250600101610489565b5060005b82518110156106af5760405180604001604052808483815181106105b0576105b0611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018483815181106105e5576105e5611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190611a08565b90528261068c86846119b1565b8151811061069c5761069c611982565b602090810291909101015260010161058a565b50806040517fac2836d80000000000000000000000000000000000000000000000000000000081526004016106e49190611a21565b60405180910390fd5b60005b8281101561083a57600084848381811061070c5761070c611982565b61072292602060809092020190810191506119eb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611a08565b905080156108305760008686858181106107d2576107d2611982565b905060800201604001359050600081111561080d5761080873ffffffffffffffffffffffffffffffffffffffff84163384610b34565b61082e565b61082e73ffffffffffffffffffffffffffffffffffffffff84168684610b34565b505b50506001016106f0565b50505050565b60005b825181101561094f57600083828151811061086057610860611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190611a08565b9050801561094657610946838286858151811061091957610919611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610b349092919063ffffffff16565b50600101610843565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526109e08482610b72565b61083a5760405173ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152610a6591869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c36565b61083a8482610c36565b606081471015610aad576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016106e4565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051610ad69190611a86565b60006040518083038185875af1925050503d8060008114610b13576040519150601f19603f3d011682016040523d82523d6000602084013e610b18565b606091505b5091509150610b28868383610ccc565b925050505b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261094f91859182169063a9059cbb90606401610a1e565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051610b9c9190611a86565b6000604051808303816000865af19150503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5091509150818015610c08575080511580610c08575080806020019051810190610c089190611551565b8015610c2b575060008573ffffffffffffffffffffffffffffffffffffffff163b115b925050505b92915050565b6000610c5873ffffffffffffffffffffffffffffffffffffffff841683610d5b565b90508051600014158015610c7d575080806020019051810190610c7b9190611551565b155b1561094f576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106e4565b606082610ce157610cdc82610d69565b610b2d565b8151158015610d05575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610d54576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016106e4565b5080610b2d565b6060610b2d83836000610a6f565b805115610d795780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114610dab57600080fd5b8035610ddb81610dae565b919050565b60008083601f840112610df257600080fd5b50813567ffffffffffffffff811115610e0a57600080fd5b6020830191508360208260051b8501011115610e2557600080fd5b9250929050565b60008083601f840112610e3e57600080fd5b50813567ffffffffffffffff811115610e5657600080fd5b602083019150836020828501011115610e2557600080fd5b60008060008060008060006080888a031215610e8957600080fd5b8735610e9481610dae565b9650602088013567ffffffffffffffff80821115610eb157600080fd5b818a0191508a601f830112610ec557600080fd5b813581811115610ed457600080fd5b8b60208260071b8501011115610ee957600080fd5b6020830198508097505060408a0135915080821115610f0757600080fd5b610f138b838c01610de0565b909650945060608a0135915080821115610f2c57600080fd5b50610f398a828b01610e2c565b989b979a50959850939692959293505050565b60008083601f840112610f5e57600080fd5b50813567ffffffffffffffff811115610f7657600080fd5b6020830191508360208260061b8501011115610e2557600080fd5b600080600080600080600080600080600060c08c8e031215610fb257600080fd5b610fbb8c610dd0565b9a5067ffffffffffffffff8060208e01351115610fd757600080fd5b610fe78e60208f01358f01610de0565b909b50995060408d0135811015610ffd57600080fd5b61100d8e60408f01358f01610f4c565b909950975060608d013581101561102357600080fd5b6110338e60608f01358f01610de0565b909750955060808d013581101561104957600080fd5b6110598e60808f01358f01610e2c565b909550935060a08d013581101561106f57600080fd5b506110808d60a08e01358e01610e2c565b81935080925050509295989b509295989b9093969950565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156110ea576110ea611098565b60405290565b6040516060810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160c0810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160e0810167ffffffffffffffff811182821017156110ea576110ea611098565b6040516080810167ffffffffffffffff811182821017156110ea576110ea611098565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156111c3576111c3611098565b604052919050565b8015158114610dab57600080fd5b8035610ddb816111cb565b600067ffffffffffffffff8211156111fe576111fe611098565b5060051b60200190565b600082601f83011261121957600080fd5b8135602061122e611229836111e4565b61117c565b82815260069290921b8401810191818101908684111561124d57600080fd5b8286015b8481101561129e576040818903121561126a5760008081fd5b6112726110c7565b813561127d81610dae565b81528185013561128c81610dae565b81860152835291830191604001611251565b509695505050505050565b6000601f83601f8401126112bc57600080fd5b823560206112cc611229836111e4565b82815260059290921b850181019181810190878411156112eb57600080fd5b8287015b848110156113fc57803567ffffffffffffffff808211156113105760008081fd5b818a01915060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08181858f0301121561134a5760008081fd5b6113526110f0565b8885013561135f81610dae565b81526040858101358a83015292850135928484111561137e5760008081fd5b83860195508e603f87011261139557600093508384fd5b898601359350848411156113ab576113ab611098565b6113ba8a848e8701160161117c565b94508385528e818588010111156113d357600092508283fd5b838187018b87013760009385018a019390935291820192909252855250509183019183016112ef565b50979650505050505050565b600082601f83011261141957600080fd5b81356020611429611229836111e4565b8083825260208201915060208460051b87010193508684111561144b57600080fd5b602086015b8481101561129e57803561146381610dae565b8352918301918301611450565b60006020828403121561148257600080fd5b813567ffffffffffffffff8082111561149a57600080fd5b9083019060c082860312156114ae57600080fd5b6114b6611113565b6114bf836111d9565b8152602083013560208201526040830135828111156114dd57600080fd5b6114e987828601611208565b60408301525060608301358281111561150157600080fd5b61150d878286016112a9565b60608301525060808301358281111561152557600080fd5b61153187828601611408565b60808301525061154360a08401610dd0565b60a082015295945050505050565b60006020828403121561156357600080fd5b8151610b2d816111cb565b803560ff81168114610ddb57600080fd5b8183526000602080850194508260005b858110156115cb5760ff806115a38461156e565b168852806115b285850161156e565b168885015250604096870196919091019060010161158f565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561160857600080fd5b8260051b80836020870137939093016020019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60e080825281018c9052600061010082018e825b8f8110156116bc576116908235610dae565b813573ffffffffffffffffffffffffffffffffffffffff1683526020928301929091019060010161167e565b505082810360208401526116d1818d8f61157f565b73ffffffffffffffffffffffffffffffffffffffff8c166040850152905073ffffffffffffffffffffffffffffffffffffffff8a166060840152828103608084015261171e81898b6115d6565b905082810360a0840152611733818789611621565b905082810360c0840152611748818587611621565b9f9e505050505050505050505050505050565b600082601f83011261176c57600080fd5b8151602061177c611229836111e4565b82815260e0928302850182019282820191908785111561179b57600080fd5b8387015b8581101561184b5781818a0312156117b75760008081fd5b6117bf611136565b81516117ca81610dae565b8152818601516117d981610dae565b8187015260408281015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301517fff000000000000000000000000000000000000000000000000000000000000008116811461183a5760008081fd5b90820152845292840192810161179f565b5090979650505050505050565b6000602080838503121561186b57600080fd5b825167ffffffffffffffff8082111561188357600080fd5b8185019150604080838803121561189957600080fd5b6118a16110c7565b8351838111156118b057600080fd5b8401601f810189136118c157600080fd5b80516118cf611229826111e4565b81815260079190911b8201870190878101908b8311156118ee57600080fd5b928801925b8284101561194c576080848d03121561190c5760008081fd5b611914611159565b845161191f81610dae565b8152848a01518a8201528685015187820152606080860151908201528252608090930192908801906118f3565b84525050508385015191508282111561196457600080fd5b6119708883860161175b565b85820152809550505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610c30577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000602082840312156119fd57600080fd5b8135610b2d81610dae565b600060208284031215611a1a57600080fd5b5051919050565b602080825282518282018190526000919060409081850190868401855b82811015611a79578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611a3e565b5091979650505050505050565b6000825160005b81811015611aa75760208186018101518583015201611a8d565b50600092019182525091905056000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x90e7c1738c7e4c5ac513eca11ac852121ebdf2166be881f28f287fe290eb3979",
          "0xdab72da2313d72460d1497da915545b7744b4e66961827831b756cd69dfb9154",
          "0x079fb1e58ed79becd8309c2323bab1846d6ad0793cbe55ea8c4f1c5277ff8d3b"
        ]
      },
      {
        "leaf": {
          "chainId": "100",
          "index": "4",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x8d108b4e35ebbbbca79cec8941ae5fb697a89be0946cae4f337ad0f3cef88337",
          "0xdab72da2313d72460d1497da915545b7744b4e66961827831b756cd69dfb9154",
          "0x079fb1e58ed79becd8309c2323bab1846d6ad0793cbe55ea8c4f1c5277ff8d3b"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "0",
          "leafType": 0,
          "data": "0x000000000000000000000000bc2122028eecd61df4b2cb2b996c00bd856e333b000000000000000000000000fc74d2b66e455a30d4ba2a77821ba994e50f4c4100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005000000000000000000000000b5e96127d417b1b3ef8438496a38a143167209c700000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        },
        "proof": [
          "0x4ee7aad8f91f00ecf737a9d73a6f97c9e685b936a1ae339fbd7a75fcdf0990b0",
          "0x4298374c9e19aaa1ef4c73d8e0e6dcb63d5998dcbb43d6ee2a92ac585b595cd9",
          "0x38eb0c7bdcbb72545ad194a641559241d80120cc916a6a2bd8c33d871b11c46e",
          "0x89785444f318e9c1cae0f94dd74ab9e34c700b44df49060bcafcefe402347dec"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "1",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x7687c79f2635a498f0b282f6a96de0c4acfd03806bdd1815cec1540676e5cf55",
          "0xac5d9388c6095a38bd9af665999f41b1b10bc05e15bfc0fb912ef633482f716b",
          "0x38eb0c7bdcbb72545ad194a641559241d80120cc916a6a2bd8c33d871b11c46e",
          "0x89785444f318e9c1cae0f94dd74ab9e34c700b44df49060bcafcefe402347dec"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "2",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xfe008ca8d0f0f0cb66f9bc4204e8af170ef1186633bbe4929b39a3bfd3bd34a6",
          "0x55da69d1c0c1638588c12d5dd9c13b4e239ddf3302031d1542aa19b381c842f6",
          "0x89785444f318e9c1cae0f94dd74ab9e34c700b44df49060bcafcefe402347dec"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "3",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0xe0975e0a0dd103544fc72de5ce4ff953ad7228b479e6d381d5bcf8ddf23baad6",
          "0x55da69d1c0c1638588c12d5dd9c13b4e239ddf3302031d1542aa19b381c842f6",
          "0x89785444f318e9c1cae0f94dd74ab9e34c700b44df49060bcafcefe402347dec"
        ]
      },
      {
        "leaf": {
          "chainId": "1284",
          "index": "4",
          "leafType": 1,
          "data": ""
        },
        "proof": [
          "0x4f002641cdec4f4ead952d9df821347858af6f18a446d80975ef13e3b79ee7d1",
          "0xac5d9388c6095a38bd9af665999f41b1b10bc05e15bfc0fb912ef633482f716b",
          "0x38eb0c7bdcbb72545ad194a641559241d80120cc916a6a2bd8c33d871b11c46e",
          "0x89785444f318e9c1cae0f94dd74ab9e34c700b44df49060bcafcefe402347dec"
        ]
      }
    ]
  },
  "configArtifacts": {
    "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ERC4626Transformer.sol:ERC4626Transformer": {
      "artifact": {
        "abi": [
          {
            "type": "function",
            "name": "calculateNeededToTransformToDependent",
            "inputs": [
              {
                "name": "_dependent",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_expectedDependent",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [
              {
                "name": "_neededUnderlying",
                "type": "tuple[]",
                "internalType": "struct ITransformer.UnderlyingAmount[]",
                "components": [
                  {
                    "name": "underlying",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "calculateNeededToTransformToUnderlying",
            "inputs": [
              {
                "name": "_dependent",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_expectedUnderlying",
                "type": "tuple[]",
                "internalType": "struct ITransformer.UnderlyingAmount[]",
                "components": [
                  {
                    "name": "underlying",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ],
            "outputs": [
              {
                "name": "_neededDependent",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "calculateTransformToDependent",
            "inputs": [
              {
                "name": "_dependent",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_underlying",
                "type": "tuple[]",
                "internalType": "struct ITransformer.UnderlyingAmount[]",
                "components": [
                  {
                    "name": "underlying",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ],
            "outputs": [
              {
                "name": "_amountDependent",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "calculateTransformToUnderlying",
            "inputs": [
              {
                "name": "_dependent",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_amountDependent",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "tuple[]",
                "internalType": "struct ITransformer.UnderlyingAmount[]",
                "components": [
                  {
                    "name": "underlying",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "getUnderlying",
            "inputs": [
              {
                "name": "_dependent",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "address[]",
                "internalType": "address[]"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "supportsInterface",
            "inputs": [
              {
                "name": "_interfaceId",
                "type": "bytes4",
                "internalType": "bytes4"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "transformToDependent",
            "inputs": [
              {
                "name": "_dependent",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_underlying",
                "type": "tuple[]",
                "internalType": "struct ITransformer.UnderlyingAmount[]",
                "components": [
                  {
                    "name": "underlying",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_minAmountOut",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_deadline",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [
              {
                "name": "_amountDependent",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "transformToExpectedDependent",
            "inputs": [
              {
                "name": "_dependent",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_expectedDependent",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_maxAmountIn",
                "type": "tuple[]",
                "internalType": "struct ITransformer.UnderlyingAmount[]",
                "components": [
                  {
                    "name": "underlying",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              },
              {
                "name": "_deadline",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "tuple[]",
                "internalType": "struct ITransformer.UnderlyingAmount[]",
                "components": [
                  {
                    "name": "underlying",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "transformToExpectedUnderlying",
            "inputs": [
              {
                "name": "_dependent",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_expectedUnderlying",
                "type": "tuple[]",
                "internalType": "struct ITransformer.UnderlyingAmount[]",
                "components": [
                  {
                    "name": "underlying",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_maxAmountIn",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_deadline",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [
              {
                "name": "_spentDependent",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "transformToUnderlying",
            "inputs": [
              {
                "name": "_dependent",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_amountDependent",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_minAmountOut",
                "type": "tuple[]",
                "internalType": "struct ITransformer.UnderlyingAmount[]",
                "components": [
                  {
                    "name": "underlying",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              },
              {
                "name": "_deadline",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "tuple[]",
                "internalType": "struct ITransformer.UnderlyingAmount[]",
                "components": [
                  {
                    "name": "underlying",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
              {
                "name": "target",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
              {
                "name": "account",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "FailedInnerCall",
            "inputs": []
          },
          {
            "type": "error",
            "name": "InvalidUnderlyingInput",
            "inputs": []
          },
          {
            "type": "error",
            "name": "NeededMoreThanExpected",
            "inputs": [
              {
                "name": "needed",
                "type": "uint256",
                "internalType": "uint256"
              }
            ]
          },
          {
            "type": "error",
            "name": "ReceivedLessThanExpected",
            "inputs": [
              {
                "name": "received",
                "type": "uint256",
                "internalType": "uint256"
              }
            ]
          },
          {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "TransactionExpired",
            "inputs": []
          }
        ],
        "bytecode": "0x608060405234801561001057600080fd5b5061183e806100206000396000f3fe6080604052600436106100b15760003560e01c8063451fcf4c116100695780634f899c481161004e5780634f899c48146101ac578063a1e8b1d5146101cc578063e7147294146101ec57600080fd5b8063451fcf4c1461016c5780634e89a7111461017f57600080fd5b80632426c6821161009a5780632426c682146101185780632d5403001461012b5780633142085c1461015957600080fd5b806301ffc9a7146100b65780630a8355b6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004611486565b6101ff565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b6101063660046114ea565b610298565b6040516100e29190611516565b61010b6101263660046115c7565b6103b6565b34801561013757600080fd5b5061014b610146366004611642565b6105bd565b6040519081526020016100e2565b61010b6101673660046115c7565b610699565b61014b61017a366004611697565b6109b8565b34801561018b57600080fd5b5061019f61019a366004611711565b610bb0565b6040516100e2919061172e565b3480156101b857600080fd5b5061014b6101c7366004611642565b610c29565b3480156101d857600080fd5b5061010b6101e73660046114ea565b610c94565b61014b6101fa366004611697565b610d60565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3050af3c00000000000000000000000000000000000000000000000000000000148061029257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b9190611788565b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff86169063b3d7f6b9906024015b602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a191906117a5565b90506103ad8282610ed9565b95945050505050565b606081804211156103f3576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001841461042d576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008873ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190611788565b6040517fba087652000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff89811660248301523360448301529192506000918b169063ba087652906064016020604051808303816000875af115801561051f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054391906117a5565b90508087876000818110610559576105596117be565b9050604002016020013511156105a3576040517fe9a3651e000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b6105ad8282610ed9565b935050505b509695505050505050565b6000600182146105f9576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663ef8b30f784846000818110610628576106286117be565b905060400201602001356040518263ffffffff1660e01b815260040161065091815260200190565b602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069191906117a5565b949350505050565b606081804211156106d6576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018414610710576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810188905260009073ffffffffffffffffffffffffffffffffffffffff8a169063b3d7f6b990602401602060405180830381865afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a291906117a5565b905060008973ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190611788565b905061083973ffffffffffffffffffffffffffffffffffffffff8216333085610f68565b61085a73ffffffffffffffffffffffffffffffffffffffff82168b84610ff7565b6040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8981166024830152600091908c16906394bf804d906044016020604051808303816000875af11580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f791906117a5565b9050808888600081811061090d5761090d6117be565b905060400201602001351015610952576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810182905260240161059a565b8281101561099f5761097d73ffffffffffffffffffffffffffffffffffffffff8316338386036110cf565b61099f73ffffffffffffffffffffffffffffffffffffffff83168c6000610ff7565b6109a98282610ed9565b9b9a5050505050505050505050565b600081804211156109f5576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610a2f576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087876000818110610a4457610a446117be565b610a5a9260206040909202019081019150611711565b9050600088886000818110610a7157610a716117be565b905060400201602001359050610aaa3330838573ffffffffffffffffffffffffffffffffffffffff16610f68909392919063ffffffff16565b610acb73ffffffffffffffffffffffffffffffffffffffff83168b83610ff7565b6040517f6e553f650000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88811660248301528b1690636e553f65906044016020604051808303816000875af1158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906117a5565b935083861115610ba3576040517fe9a3651e0000000000000000000000000000000000000000000000000000000081526004810185905260240161059a565b5050509695505050505050565b60606102928273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611788565b611112565b600060018214610c65576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16630a28a47784846000818110610628576106286117be565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d079190611788565b6040517f4cdad5060000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff861690634cdad50690602401610360565b60008180421115610d9d576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610dd7576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff1663b460af9488886000818110610e0657610e066117be565b9050604002016020013587336040518463ffffffff1660e01b8152600401610e579392919092835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b6020604051808303816000875af1158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a91906117a5565b9150818410156105b2576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810183905260240161059a565b604080516001808252818301909252606091816020015b6040805180820190915260008082526020820152815260200190600190039081610ef057905050905060405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381525081600081518110610f5757610f576117be565b602002602001018190525092915050565b60405173ffffffffffffffffffffffffffffffffffffffff8481166024830152838116604483015260648201839052610ff19186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611187565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611083848261121d565b610ff15760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526110c591869182169063095ea7b390606401610faa565b610ff18482611187565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261110d91859182169063a9059cbb90606401610faa565b505050565b604080516001808252818301909252606091602080830190803683370190505090508181600081518110611148576111486117be565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050919050565b60006111a973ffffffffffffffffffffffffffffffffffffffff8416836112da565b905080516000141580156111ce5750808060200190518101906111cc91906117ed565b155b1561110d576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161059a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611247919061180f565b6000604051808303816000865af19150503d8060008114611284576040519150601f19603f3d011682016040523d82523d6000602084013e611289565b606091505b50915091508180156112b35750805115806112b35750808060200190518101906112b391906117ed565b80156103ad57505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606112e8838360006112ef565b9392505050565b60608147101561132d576040517fcd78605900000000000000000000000000000000000000000000000000000000815230600482015260240161059a565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051611356919061180f565b60006040518083038185875af1925050503d8060008114611393576040519150601f19603f3d011682016040523d82523d6000602084013e611398565b606091505b50915091506113a88683836113b2565b9695505050505050565b6060826113c7576113c282611441565b6112e8565b81511580156113eb575073ffffffffffffffffffffffffffffffffffffffff84163b155b1561143a576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161059a565b50806112e8565b8051156114515780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006020828403121561149857600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112e857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461148357600080fd5b600080604083850312156114fd57600080fd5b8235611508816114c8565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561156e578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611533565b5091979650505050505050565b60008083601f84011261158d57600080fd5b50813567ffffffffffffffff8111156115a557600080fd5b6020830191508360208260061b85010111156115c057600080fd5b9250929050565b60008060008060008060a087890312156115e057600080fd5b86356115eb816114c8565b9550602087013594506040870135611602816114c8565b9350606087013567ffffffffffffffff81111561161e57600080fd5b61162a89828a0161157b565b979a9699509497949695608090950135949350505050565b60008060006040848603121561165757600080fd5b8335611662816114c8565b9250602084013567ffffffffffffffff81111561167e57600080fd5b61168a8682870161157b565b9497909650939450505050565b60008060008060008060a087890312156116b057600080fd5b86356116bb816114c8565b9550602087013567ffffffffffffffff8111156116d757600080fd5b6116e389828a0161157b565b90965094505060408701356116f7816114c8565b959894975092956060810135946080909101359350915050565b60006020828403121561172357600080fd5b81356112e8816114c8565b6020808252825182820181905260009190848201906040850190845b8181101561177c57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161174a565b50909695505050505050565b60006020828403121561179a57600080fd5b81516112e8816114c8565b6000602082840312156117b757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156117ff57600080fd5b815180151581146112e857600080fd5b6000825160005b818110156118305760208186018101518583015201611816565b50600092019182525091905056",
        "sourceName": "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ERC4626Transformer.sol",
        "contractName": "ERC4626Transformer",
        "deployedBytecode": "0x6080604052600436106100b15760003560e01c8063451fcf4c116100695780634f899c481161004e5780634f899c48146101ac578063a1e8b1d5146101cc578063e7147294146101ec57600080fd5b8063451fcf4c1461016c5780634e89a7111461017f57600080fd5b80632426c6821161009a5780632426c682146101185780632d5403001461012b5780633142085c1461015957600080fd5b806301ffc9a7146100b65780630a8355b6146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004611486565b6101ff565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b5061010b6101063660046114ea565b610298565b6040516100e29190611516565b61010b6101263660046115c7565b6103b6565b34801561013757600080fd5b5061014b610146366004611642565b6105bd565b6040519081526020016100e2565b61010b6101673660046115c7565b610699565b61014b61017a366004611697565b6109b8565b34801561018b57600080fd5b5061019f61019a366004611711565b610bb0565b6040516100e2919061172e565b3480156101b857600080fd5b5061014b6101c7366004611642565b610c29565b3480156101d857600080fd5b5061010b6101e73660046114ea565b610c94565b61014b6101fa366004611697565b610d60565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3050af3c00000000000000000000000000000000000000000000000000000000148061029257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b9190611788565b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff86169063b3d7f6b9906024015b602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a191906117a5565b90506103ad8282610ed9565b95945050505050565b606081804211156103f3576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001841461042d576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008873ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190611788565b6040517fba087652000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff89811660248301523360448301529192506000918b169063ba087652906064016020604051808303816000875af115801561051f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054391906117a5565b90508087876000818110610559576105596117be565b9050604002016020013511156105a3576040517fe9a3651e000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b6105ad8282610ed9565b935050505b509695505050505050565b6000600182146105f9576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663ef8b30f784846000818110610628576106286117be565b905060400201602001356040518263ffffffff1660e01b815260040161065091815260200190565b602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069191906117a5565b949350505050565b606081804211156106d6576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018414610710576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb3d7f6b90000000000000000000000000000000000000000000000000000000081526004810188905260009073ffffffffffffffffffffffffffffffffffffffff8a169063b3d7f6b990602401602060405180830381865afa15801561077e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a291906117a5565b905060008973ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190611788565b905061083973ffffffffffffffffffffffffffffffffffffffff8216333085610f68565b61085a73ffffffffffffffffffffffffffffffffffffffff82168b84610ff7565b6040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8981166024830152600091908c16906394bf804d906044016020604051808303816000875af11580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f791906117a5565b9050808888600081811061090d5761090d6117be565b905060400201602001351015610952576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810182905260240161059a565b8281101561099f5761097d73ffffffffffffffffffffffffffffffffffffffff8316338386036110cf565b61099f73ffffffffffffffffffffffffffffffffffffffff83168c6000610ff7565b6109a98282610ed9565b9b9a5050505050505050505050565b600081804211156109f5576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610a2f576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087876000818110610a4457610a446117be565b610a5a9260206040909202019081019150611711565b9050600088886000818110610a7157610a716117be565b905060400201602001359050610aaa3330838573ffffffffffffffffffffffffffffffffffffffff16610f68909392919063ffffffff16565b610acb73ffffffffffffffffffffffffffffffffffffffff83168b83610ff7565b6040517f6e553f650000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88811660248301528b1690636e553f65906044016020604051808303816000875af1158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6491906117a5565b935083861115610ba3576040517fe9a3651e0000000000000000000000000000000000000000000000000000000081526004810185905260240161059a565b5050509695505050505050565b60606102928273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611788565b611112565b600060018214610c65576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16630a28a47784846000818110610628576106286117be565b606060008373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d079190611788565b6040517f4cdad5060000000000000000000000000000000000000000000000000000000081526004810185905290915060009073ffffffffffffffffffffffffffffffffffffffff861690634cdad50690602401610360565b60008180421115610d9d576040517fe397952c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018614610dd7576040517f94bcdfc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff1663b460af9488886000818110610e0657610e066117be565b9050604002016020013587336040518463ffffffff1660e01b8152600401610e579392919092835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b6020604051808303816000875af1158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a91906117a5565b9150818410156105b2576040517fcdc96c7c0000000000000000000000000000000000000000000000000000000081526004810183905260240161059a565b604080516001808252818301909252606091816020015b6040805180820190915260008082526020820152815260200190600190039081610ef057905050905060405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381525081600081518110610f5757610f576117be565b602002602001018190525092915050565b60405173ffffffffffffffffffffffffffffffffffffffff8481166024830152838116604483015260648201839052610ff19186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611187565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611083848261121d565b610ff15760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526110c591869182169063095ea7b390606401610faa565b610ff18482611187565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261110d91859182169063a9059cbb90606401610faa565b505050565b604080516001808252818301909252606091602080830190803683370190505090508181600081518110611148576111486117be565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050919050565b60006111a973ffffffffffffffffffffffffffffffffffffffff8416836112da565b905080516000141580156111ce5750808060200190518101906111cc91906117ed565b155b1561110d576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161059a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611247919061180f565b6000604051808303816000865af19150503d8060008114611284576040519150601f19603f3d011682016040523d82523d6000602084013e611289565b606091505b50915091508180156112b35750805115806112b35750808060200190518101906112b391906117ed565b80156103ad57505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606112e8838360006112ef565b9392505050565b60608147101561132d576040517fcd78605900000000000000000000000000000000000000000000000000000000815230600482015260240161059a565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051611356919061180f565b60006040518083038185875af1925050503d8060008114611393576040519150601f19603f3d011682016040523d82523d6000602084013e611398565b606091505b50915091506113a88683836113b2565b9695505050505050565b6060826113c7576113c282611441565b6112e8565b81511580156113eb575073ffffffffffffffffffffffffffffffffffffffff84163b155b1561143a576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161059a565b50806112e8565b8051156114515780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006020828403121561149857600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146112e857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461148357600080fd5b600080604083850312156114fd57600080fd5b8235611508816114c8565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561156e578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611533565b5091979650505050505050565b60008083601f84011261158d57600080fd5b50813567ffffffffffffffff8111156115a557600080fd5b6020830191508360208260061b85010111156115c057600080fd5b9250929050565b60008060008060008060a087890312156115e057600080fd5b86356115eb816114c8565b9550602087013594506040870135611602816114c8565b9350606087013567ffffffffffffffff81111561161e57600080fd5b61162a89828a0161157b565b979a9699509497949695608090950135949350505050565b60008060006040848603121561165757600080fd5b8335611662816114c8565b9250602084013567ffffffffffffffff81111561167e57600080fd5b61168a8682870161157b565b9497909650939450505050565b60008060008060008060a087890312156116b057600080fd5b86356116bb816114c8565b9550602087013567ffffffffffffffff8111156116d757600080fd5b6116e389828a0161157b565b90965094505060408701356116f7816114c8565b959894975092956060810135946080909101359350915050565b60006020828403121561172357600080fd5b81356112e8816114c8565b6020808252825182820181905260009190848201906040850190845b8181101561177c57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161174a565b50909695505050505050565b60006020828403121561179a57600080fd5b81516112e8816114c8565b6000602082840312156117b757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156117ff57600080fd5b815180151581146112e857600080fd5b6000825160005b818110156118305760208186018101518583015201611816565b50600092019182525091905056",
        "metadata": {
          "compiler": {
            "version": "0.8.22+commit.4fc1097e"
          },
          "language": "Solidity",
          "output": {
            "abi": [
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "target",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "AddressEmptyCode"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "AddressInsufficientBalance"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "FailedInnerCall"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "InvalidUnderlyingInput"
              },
              {
                "inputs": [
                  {
                    "internalType": "uint256",
                    "name": "needed",
                    "type": "uint256"
                  }
                ],
                "type": "error",
                "name": "NeededMoreThanExpected"
              },
              {
                "inputs": [
                  {
                    "internalType": "uint256",
                    "name": "received",
                    "type": "uint256"
                  }
                ],
                "type": "error",
                "name": "ReceivedLessThanExpected"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "SafeERC20FailedOperation"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "TransactionExpired"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_dependent",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_expectedDependent",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "calculateNeededToTransformToDependent",
                "outputs": [
                  {
                    "internalType": "struct ITransformer.UnderlyingAmount[]",
                    "name": "_neededUnderlying",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "underlying",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_dependent",
                    "type": "address"
                  },
                  {
                    "internalType": "struct ITransformer.UnderlyingAmount[]",
                    "name": "_expectedUnderlying",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "underlying",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "calculateNeededToTransformToUnderlying",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "_neededDependent",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_dependent",
                    "type": "address"
                  },
                  {
                    "internalType": "struct ITransformer.UnderlyingAmount[]",
                    "name": "_underlying",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "underlying",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "calculateTransformToDependent",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "_amountDependent",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_dependent",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_amountDependent",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "calculateTransformToUnderlying",
                "outputs": [
                  {
                    "internalType": "struct ITransformer.UnderlyingAmount[]",
                    "name": "",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "underlying",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_dependent",
                    "type": "address"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "getUnderlying",
                "outputs": [
                  {
                    "internalType": "address[]",
                    "name": "",
                    "type": "address[]"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes4",
                    "name": "_interfaceId",
                    "type": "bytes4"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "supportsInterface",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_dependent",
                    "type": "address"
                  },
                  {
                    "internalType": "struct ITransformer.UnderlyingAmount[]",
                    "name": "_underlying",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "underlying",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_minAmountOut",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_deadline",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "transformToDependent",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "_amountDependent",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_dependent",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_expectedDependent",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  },
                  {
                    "internalType": "struct ITransformer.UnderlyingAmount[]",
                    "name": "_maxAmountIn",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "underlying",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "uint256",
                    "name": "_deadline",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "transformToExpectedDependent",
                "outputs": [
                  {
                    "internalType": "struct ITransformer.UnderlyingAmount[]",
                    "name": "",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "underlying",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_dependent",
                    "type": "address"
                  },
                  {
                    "internalType": "struct ITransformer.UnderlyingAmount[]",
                    "name": "_expectedUnderlying",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "underlying",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_maxAmountIn",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_deadline",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "transformToExpectedUnderlying",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "_spentDependent",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_dependent",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_amountDependent",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  },
                  {
                    "internalType": "struct ITransformer.UnderlyingAmount[]",
                    "name": "_minAmountOut",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "underlying",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "uint256",
                    "name": "_deadline",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "transformToUnderlying",
                "outputs": [
                  {
                    "internalType": "struct ITransformer.UnderlyingAmount[]",
                    "name": "",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "underlying",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  }
                ]
              }
            ],
            "devdoc": {
              "kind": "dev",
              "methods": {
                "calculateNeededToTransformToDependent(address,uint256)": {
                  "details": "This function must be unaware of context. The returned values must be the same,      regardless of who the caller is",
                  "params": {
                    "dependent": "The address of the dependent token",
                    "expectedDependent": "The expected amount of dependent tokens"
                  },
                  "returns": {
                    "_neededUnderlying": "The amount of underlying tokens needed"
                  }
                },
                "calculateNeededToTransformToUnderlying(address,(address,uint256)[])": {
                  "details": "This function must be unaware of context. The returned values must be the same,      regardless of who the caller is",
                  "params": {
                    "dependent": "The address of the dependent token",
                    "expectedUnderlying": "The expected amounts of underlying tokens"
                  },
                  "returns": {
                    "_neededDependent": "The amount of dependent needed"
                  }
                },
                "calculateTransformToDependent(address,(address,uint256)[])": {
                  "details": "This function must be unaware of context. The returned values must be the same,      regardless of who the caller is",
                  "params": {
                    "dependent": "The address of the dependent token",
                    "underlying": "The amounts of underlying tokens to transform"
                  },
                  "returns": {
                    "_amountDependent": "The transformed amount in the dependent token"
                  }
                },
                "calculateTransformToUnderlying(address,uint256)": {
                  "details": "This function must be unaware of context. The returned values must be the same,      regardless of who the caller is",
                  "params": {
                    "amountDependent": "The amount to transform",
                    "dependent": "The address of the dependent token"
                  },
                  "returns": {
                    "_0": "The transformed amount in each of the underlying tokens"
                  }
                },
                "getUnderlying(address)": {
                  "details": "This function must be unaware of context. The returned values must be the same,      regardless of who the caller is",
                  "params": {
                    "dependent": "The address of the dependent token"
                  },
                  "returns": {
                    "_0": "The addresses of all the underlying tokens"
                  }
                },
                "supportsInterface(bytes4)": {
                  "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
                },
                "transformToDependent(address,(address,uint256)[],address,uint256,uint256)": {
                  "params": {
                    "deadline": "A deadline when the transaction becomes invalid",
                    "dependent": "The address of the dependent token",
                    "minAmountOut": "The minimum amount of dependent that the caller expects to get. Will fail                     if less is received",
                    "recipient": "The address that would receive the dependent tokens",
                    "underlying": "The amounts of underlying tokens to transform"
                  },
                  "returns": {
                    "_amountDependent": "The transformed amount in the dependent token"
                  }
                },
                "transformToExpectedDependent(address,uint256,address,(address,uint256)[],uint256)": {
                  "params": {
                    "deadline": "A deadline when the transaction becomes invalid",
                    "dependent": "The address of the dependent token",
                    "expectedDependent": "The expected amounts of dependent tokens",
                    "maxAmountIn": "The maximum amount of underlying that the caller is willing to spend.                    Will fail more is needed. As a general rule, the underlying tokens should                    be provided in the same order as `getUnderlying` returns them",
                    "recipient": "The address that would receive the underlying tokens"
                  },
                  "returns": {
                    "_0": "The amount of spent underlying tokens"
                  }
                },
                "transformToExpectedUnderlying(address,(address,uint256)[],address,uint256,uint256)": {
                  "params": {
                    "deadline": "A deadline when the transaction becomes invalid",
                    "dependent": "The address of the dependent token",
                    "expectedUnderlying": "The expected amounts of underlying tokens",
                    "maxAmountIn": "The maximum amount of dependent that the caller is willing to spend.                    Will fail more is needed",
                    "recipient": "The address that would receive the underlying tokens"
                  },
                  "returns": {
                    "_spentDependent": "The amount of spent dependent tokens"
                  }
                },
                "transformToUnderlying(address,uint256,address,(address,uint256)[],uint256)": {
                  "params": {
                    "amountDependent": "The amount to transform",
                    "deadline": "A deadline when the transaction becomes invalid",
                    "dependent": "The address of the dependent token",
                    "minAmountOut": "The minimum amount of underlying that the caller expects to get. Will fail                     if less is received. As a general rule, the underlying tokens should                     be provided in the same order as `getUnderlying` returns them",
                    "recipient": "The address that would receive the underlying tokens"
                  },
                  "returns": {
                    "_0": "The transformed amount in each of the underlying tokens"
                  }
                }
              },
              "version": 1
            },
            "userdoc": {
              "kind": "user",
              "methods": {
                "calculateNeededToTransformToDependent(address,uint256)": {
                  "notice": "Calculates how many underlying tokens are needed to transform to the expected         amount of dependent"
                },
                "calculateNeededToTransformToUnderlying(address,(address,uint256)[])": {
                  "notice": "Calculates how many dependent tokens are needed to transform to the expected         amount of underlying"
                },
                "calculateTransformToDependent(address,(address,uint256)[])": {
                  "notice": "Calculates how much would the transformation to the dependent token return"
                },
                "calculateTransformToUnderlying(address,uint256)": {
                  "notice": "Calculates how much would the transformation to the underlying tokens return"
                },
                "getUnderlying(address)": {
                  "notice": "Returns the addresses of all the underlying tokens, for the given dependent"
                },
                "transformToDependent(address,(address,uint256)[],address,uint256,uint256)": {
                  "notice": "Executes the transformation to the dependent token"
                },
                "transformToExpectedDependent(address,uint256,address,(address,uint256)[],uint256)": {
                  "notice": "Transforms underlying tokens to an expected amount of dependent tokens"
                },
                "transformToExpectedUnderlying(address,(address,uint256)[],address,uint256,uint256)": {
                  "notice": "Transforms dependent tokens to an expected amount of underlying tokens"
                },
                "transformToUnderlying(address,uint256,address,(address,uint256)[],uint256)": {
                  "notice": "Executes the transformation to the underlying tokens"
                }
              },
              "version": 1
            }
          },
          "settings": {
            "remappings": [
              "@api3/=node_modules/@api3/",
              "@call-simulation/=node_modules/@mean-finance/call-simulation/src/",
              "@chainlink/=node_modules/@chainlink/",
              "@mean-finance/call-simulation/contracts/=node_modules/@mean-finance/call-simulation/src/",
              "@mean-finance/dca-v2-core/=node_modules/@mean-finance/dca-v2-core/",
              "@mean-finance/dca-v2-periphery/=node_modules/@mean-finance/dca-v2-periphery/",
              "@mean-finance/nft-descriptors/=node_modules/@mean-finance/nft-descriptors/",
              "@mean-finance/oracles/=node_modules/@mean-finance/oracles/",
              "@mean-finance/permit2-adapter/=node_modules/@mean-finance/permit2-adapter/src/",
              "@mean-finance/swappers/=node_modules/@mean-finance/swappers/",
              "@mean-finance/transformers/=node_modules/@mean-finance/transformers/solidity/contracts/transformers/",
              "@mean-finance/uniswap-v3-oracle/=node_modules/@mean-finance/uniswap-v3-oracle/",
              "@openzeppelin/contracts/=node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/",
              "@rari-capital/solmate/=lib/solmate/",
              "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
              "@uniswap/=node_modules/@uniswap/",
              "base64-sol/=node_modules/base64-sol/",
              "ds-test/=lib/solmate/lib/ds-test/src/",
              "forge-std/=lib/forge-std/src/",
              "keep3r-v2/=node_modules/keep3r-v2/",
              "solmate/=lib/solmate/src/",
              "sphinx/=lib/sphinx/packages/contracts/contracts/forge-std/src/"
            ],
            "optimizer": {
              "enabled": true,
              "runs": 9999
            },
            "metadata": {
              "bytecodeHash": "none",
              "appendCBOR": false
            },
            "compilationTarget": {
              "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ERC4626Transformer.sol": "ERC4626Transformer"
            },
            "evmVersion": "paris",
            "libraries": {}
          },
          "sources": {
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/IERC20.sol": {
              "keccak256": "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
              "urls": [
                "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
                "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol": {
              "keccak256": "0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d",
              "urls": [
                "bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205",
                "dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
              "keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
              "urls": [
                "bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
                "dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
              "keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
              "urls": [
                "bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
                "dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
              "keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
              "urls": [
                "bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
                "dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
              "keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
              "urls": [
                "bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
                "dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/Address.sol": {
              "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
              "urls": [
                "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
                "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
              "keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
              "urls": [
                "bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
                "dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/transformers/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
              "keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
              "urls": [
                "bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
                "dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/transformers/BaseTransformer.sol": {
              "keccak256": "0x67738b17d94b952989ca4feeecc850aecd845a800c2a3a3394ea13f0f693fc4a",
              "urls": [
                "bzz-raw://6e46de1a7576cc7018df1dc4d85345b6f425511c0ccb28ae0108a4350090005b",
                "dweb:/ipfs/QmXFgLb2AGK1U5bMrQHpRdUS7W1UKjZuep8iw7UGYjR86z"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/transformers/solidity/contracts/transformers/ERC4626Transformer.sol": {
              "keccak256": "0xaeac4791af9a7f2350cc1d898835f84683e3ff11cff3f0d263720520ef7857b6",
              "urls": [
                "bzz-raw://085cec77cc098764ef41b1d381426eccb35319013252e17a1fc3b368306d4fbf",
                "dweb:/ipfs/QmVryF6iFgHBFjujVhApSAfiGvyvMvVyYfCPwy57Hrd2FP"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/transformers/solidity/interfaces/ITransformer.sol": {
              "keccak256": "0x0b16265f5476f8a4c9c937cb5e2e0be5fa5e391188ad786b3010c9ae4d4008e9",
              "urls": [
                "bzz-raw://35729b004e6f7172d0fe558974b8a86b6b4f500dc2eff8859fa4df678a71aed5",
                "dweb:/ipfs/Qmb6bKJYavkqfE9ws6FnrBDzrWwHU7vDYYh2udoE4nqWSp"
              ],
              "license": "GPL-2.0-or-later"
            }
          },
          "version": 1
        },
        "methodIdentifiers": {
          "calculateNeededToTransformToDependent(address,uint256)": "0a8355b6",
          "calculateNeededToTransformToUnderlying(address,(address,uint256)[])": "4f899c48",
          "calculateTransformToDependent(address,(address,uint256)[])": "2d540300",
          "calculateTransformToUnderlying(address,uint256)": "a1e8b1d5",
          "getUnderlying(address)": "4e89a711",
          "supportsInterface(bytes4)": "01ffc9a7",
          "transformToDependent(address,(address,uint256)[],address,uint256,uint256)": "451fcf4c",
          "transformToExpectedDependent(address,uint256,address,(address,uint256)[],uint256)": "3142085c",
          "transformToExpectedUnderlying(address,(address,uint256)[],address,uint256,uint256)": "e7147294",
          "transformToUnderlying(address,uint256,address,(address,uint256)[],uint256)": "2426c682"
        },
        "storageLayout": {
          "storage": [],
          "types": {}
        },
        "linkReferences": {},
        "deployedLinkReferences": {}
      },
      "buildInfoId": "ac2e129c3735bebff89875131ed89a3e"
    },
    "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol:DCAHubCompanion": {
      "artifact": {
        "abi": [
          {
            "type": "constructor",
            "inputs": [
              {
                "name": "_swapper",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_allowanceTarget",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_governor",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_permit2",
                "type": "address",
                "internalType": "contract IPermit2"
              }
            ],
            "stateMutability": "nonpayable"
          },
          {
            "type": "receive",
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "PERMIT2",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "contract IPermit2"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "PROTOCOL_TOKEN",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "acceptPendingGovernor",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "allowanceTarget",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "batchPermitTakeFromCaller",
            "inputs": [
              {
                "name": "_tokens",
                "type": "tuple[]",
                "internalType": "struct IPermit2.TokenPermissions[]",
                "components": [
                  {
                    "name": "token",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              },
              {
                "name": "_nonce",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_deadline",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_signature",
                "type": "bytes",
                "internalType": "bytes"
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "deposit",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_from",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_to",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_amount",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_amountOfSwaps",
                "type": "uint32",
                "internalType": "uint32"
              },
              {
                "name": "_swapInterval",
                "type": "uint32",
                "internalType": "uint32"
              },
              {
                "name": "_owner",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_permissions",
                "type": "tuple[]",
                "internalType": "struct IDCAPermissionManager.PermissionSet[]",
                "components": [
                  {
                    "name": "operator",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "permissions",
                    "type": "uint8[]",
                    "internalType": "enum IDCAPermissionManager.Permission[]"
                  }
                ]
              },
              {
                "name": "_miscellaneous",
                "type": "bytes",
                "internalType": "bytes"
              }
            ],
            "outputs": [
              {
                "name": "_positionId",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "depositWithBalanceOnContract",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_from",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_to",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_amountOfSwaps",
                "type": "uint32",
                "internalType": "uint32"
              },
              {
                "name": "_swapInterval",
                "type": "uint32",
                "internalType": "uint32"
              },
              {
                "name": "_owner",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_permissions",
                "type": "tuple[]",
                "internalType": "struct IDCAPermissionManager.PermissionSet[]",
                "components": [
                  {
                    "name": "operator",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "permissions",
                    "type": "uint8[]",
                    "internalType": "enum IDCAPermissionManager.Permission[]"
                  }
                ]
              },
              {
                "name": "_miscellaneous",
                "type": "bytes",
                "internalType": "bytes"
              }
            ],
            "outputs": [
              {
                "name": "_positionId",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "getNextSwapInfo",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_pairs",
                "type": "tuple[]",
                "internalType": "struct Pair[]",
                "components": [
                  {
                    "name": "tokenA",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "tokenB",
                    "type": "address",
                    "internalType": "address"
                  }
                ]
              },
              {
                "name": "_calculatePrivilegedAvailability",
                "type": "bool",
                "internalType": "bool"
              },
              {
                "name": "_oracleData",
                "type": "bytes",
                "internalType": "bytes"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "tuple",
                "internalType": "struct IDCAHubSwapHandler.SwapInfo",
                "components": [
                  {
                    "name": "tokens",
                    "type": "tuple[]",
                    "internalType": "struct IDCAHubSwapHandler.TokenInSwap[]",
                    "components": [
                      {
                        "name": "token",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "reward",
                        "type": "uint256",
                        "internalType": "uint256"
                      },
                      {
                        "name": "toProvide",
                        "type": "uint256",
                        "internalType": "uint256"
                      },
                      {
                        "name": "platformFee",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "pairs",
                    "type": "tuple[]",
                    "internalType": "struct IDCAHubSwapHandler.PairInSwap[]",
                    "components": [
                      {
                        "name": "tokenA",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "tokenB",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "totalAmountToSwapTokenA",
                        "type": "uint256",
                        "internalType": "uint256"
                      },
                      {
                        "name": "totalAmountToSwapTokenB",
                        "type": "uint256",
                        "internalType": "uint256"
                      },
                      {
                        "name": "ratioAToB",
                        "type": "uint256",
                        "internalType": "uint256"
                      },
                      {
                        "name": "ratioBToA",
                        "type": "uint256",
                        "internalType": "uint256"
                      },
                      {
                        "name": "intervalsInSwap",
                        "type": "bytes1",
                        "internalType": "bytes1"
                      }
                    ]
                  }
                ]
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "governor",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "increasePosition",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_positionId",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_amount",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_newSwaps",
                "type": "uint32",
                "internalType": "uint32"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "increasePositionWithBalanceOnContract",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_positionId",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_newSwaps",
                "type": "uint32",
                "internalType": "uint32"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "isGovernor",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "isPendingGovernor",
            "inputs": [
              {
                "name": "_account",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "legacyGetNextSwapInfo",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract ILegacyDCAHub"
              },
              {
                "name": "_pairs",
                "type": "tuple[]",
                "internalType": "struct Pair[]",
                "components": [
                  {
                    "name": "tokenA",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "tokenB",
                    "type": "address",
                    "internalType": "address"
                  }
                ]
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "tuple",
                "internalType": "struct ILegacyDCAHub.SwapInfo",
                "components": [
                  {
                    "name": "tokens",
                    "type": "tuple[]",
                    "internalType": "struct ILegacyDCAHub.TokenInSwap[]",
                    "components": [
                      {
                        "name": "token",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "reward",
                        "type": "uint256",
                        "internalType": "uint256"
                      },
                      {
                        "name": "toProvide",
                        "type": "uint256",
                        "internalType": "uint256"
                      },
                      {
                        "name": "platformFee",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "pairs",
                    "type": "tuple[]",
                    "internalType": "struct ILegacyDCAHub.PairInSwap[]",
                    "components": [
                      {
                        "name": "tokenA",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "tokenB",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "ratioAToB",
                        "type": "uint256",
                        "internalType": "uint256"
                      },
                      {
                        "name": "ratioBToA",
                        "type": "uint256",
                        "internalType": "uint256"
                      },
                      {
                        "name": "intervalsInSwap",
                        "type": "bytes1",
                        "internalType": "bytes1"
                      }
                    ]
                  }
                ]
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "multiPermissionPermit",
            "inputs": [
              {
                "name": "_permissionManager",
                "type": "address",
                "internalType": "contract IDCAPermissionManager"
              },
              {
                "name": "_permissions",
                "type": "tuple[]",
                "internalType": "struct IDCAPermissionManager.PositionPermissions[]",
                "components": [
                  {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                  },
                  {
                    "name": "permissionSets",
                    "type": "tuple[]",
                    "internalType": "struct IDCAPermissionManager.PermissionSet[]",
                    "components": [
                      {
                        "name": "operator",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "permissions",
                        "type": "uint8[]",
                        "internalType": "enum IDCAPermissionManager.Permission[]"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "_deadline",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_v",
                "type": "uint8",
                "internalType": "uint8"
              },
              {
                "name": "_r",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "_s",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "multicall",
            "inputs": [
              {
                "name": "_data",
                "type": "bytes[]",
                "internalType": "bytes[]"
              }
            ],
            "outputs": [
              {
                "name": "_results",
                "type": "bytes[]",
                "internalType": "bytes[]"
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "pendingGovernor",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "permissionPermit",
            "inputs": [
              {
                "name": "_permissionManager",
                "type": "address",
                "internalType": "contract IDCAPermissionManager"
              },
              {
                "name": "_permissions",
                "type": "tuple[]",
                "internalType": "struct IDCAPermissionManager.PermissionSet[]",
                "components": [
                  {
                    "name": "operator",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "permissions",
                    "type": "uint8[]",
                    "internalType": "enum IDCAPermissionManager.Permission[]"
                  }
                ]
              },
              {
                "name": "_tokenId",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_deadline",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_v",
                "type": "uint8",
                "internalType": "uint8"
              },
              {
                "name": "_r",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "_s",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "permitTakeFromCaller",
            "inputs": [
              {
                "name": "_token",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_amount",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_nonce",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_deadline",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_signature",
                "type": "bytes",
                "internalType": "bytes"
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "reducePosition",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_positionId",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_amount",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_newSwaps",
                "type": "uint32",
                "internalType": "uint32"
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "runSwap",
            "inputs": [
              {
                "name": "_allowanceToken",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_value",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_swapData",
                "type": "bytes",
                "internalType": "bytes"
              },
              {
                "name": "_tokenOut",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "_amountOut",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "secondsUntilNextSwap",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_pairs",
                "type": "tuple[]",
                "internalType": "struct Pair[]",
                "components": [
                  {
                    "name": "tokenA",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "tokenB",
                    "type": "address",
                    "internalType": "address"
                  }
                ]
              },
              {
                "name": "_calculatePrivilegedAvailability",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "uint256[]",
                "internalType": "uint256[]"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "sendBalanceOnContractToRecipient",
            "inputs": [
              {
                "name": "_token",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "sendToRecipient",
            "inputs": [
              {
                "name": "_token",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_amount",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "setPendingGovernor",
            "inputs": [
              {
                "name": "_pendingGovernor",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "setSwapper",
            "inputs": [
              {
                "name": "_newSwapper",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_newAllowanceTarget",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "simulate",
            "inputs": [
              {
                "name": "_calls",
                "type": "bytes[]",
                "internalType": "bytes[]"
              }
            ],
            "outputs": [
              {
                "name": "_results",
                "type": "tuple[]",
                "internalType": "struct ISimulationAdapter.SimulationResult[]",
                "components": [
                  {
                    "name": "success",
                    "type": "bool",
                    "internalType": "bool"
                  },
                  {
                    "name": "result",
                    "type": "bytes",
                    "internalType": "bytes"
                  },
                  {
                    "name": "gasSpent",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "simulateAndRevert",
            "inputs": [
              {
                "name": "_call",
                "type": "bytes",
                "internalType": "bytes"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "supportsInterface",
            "inputs": [
              {
                "name": "_interfaceId",
                "type": "bytes4",
                "internalType": "bytes4"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "swapper",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "takeFromCaller",
            "inputs": [
              {
                "name": "_token",
                "type": "address",
                "internalType": "contract IERC20"
              },
              {
                "name": "_amount",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "terminate",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_positionId",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_recipientUnswapped",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_recipientSwapped",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "_unswapped",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_swapped",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "withdrawSwapped",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_positionId",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "_swapped",
                "type": "uint256",
                "internalType": "uint256"
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "withdrawSwappedMany",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_positions",
                "type": "tuple[]",
                "internalType": "struct IDCAHubPositionHandler.PositionSet[]",
                "components": [
                  {
                    "name": "token",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "positionIds",
                    "type": "uint256[]",
                    "internalType": "uint256[]"
                  }
                ]
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "_withdrawn",
                "type": "uint256[]",
                "internalType": "uint256[]"
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "event",
            "name": "PendingGovernorAccepted",
            "inputs": [],
            "anonymous": false
          },
          {
            "type": "event",
            "name": "PendingGovernorSet",
            "inputs": [
              {
                "name": "newPendingGovernor",
                "type": "address",
                "indexed": false,
                "internalType": "address"
              }
            ],
            "anonymous": false
          },
          {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
              {
                "name": "target",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
              {
                "name": "account",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "FailedInnerCall",
            "inputs": []
          },
          {
            "type": "error",
            "name": "GovernorIsZeroAddress",
            "inputs": []
          },
          {
            "type": "error",
            "name": "InvalidMask",
            "inputs": []
          },
          {
            "type": "error",
            "name": "OnlyGovernor",
            "inputs": []
          },
          {
            "type": "error",
            "name": "OnlyPendingGovernor",
            "inputs": []
          },
          {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "SimulatedCall",
            "inputs": [
              {
                "name": "result",
                "type": "tuple",
                "internalType": "struct ISimulationAdapter.SimulationResult",
                "components": [
                  {
                    "name": "success",
                    "type": "bool",
                    "internalType": "bool"
                  },
                  {
                    "name": "result",
                    "type": "bytes",
                    "internalType": "bytes"
                  },
                  {
                    "name": "gasSpent",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ]
          },
          {
            "type": "error",
            "name": "UnauthorizedCaller",
            "inputs": []
          }
        ],
        "bytecode": "",
        "sourceName": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol",
        "contractName": "DCAHubCompanion",
        "deployedBytecode": "0x60806040526004361061021d5760003560e01c806362b850c71161011d578063bcbef206116100b0578063e3056a341161007f578063effca70511610064578063effca705146105e1578063f235757f14610601578063fa0c95551461062157600080fd5b8063e3056a3414610592578063e43581b8146105b257600080fd5b8063bcbef2061461052a578063d9a673ef1461053d578063db8266de14610550578063df08aed51461056357600080fd5b8063910cab11116100ec578063910cab11146104b7578063a669a7f6146104d7578063ac9650d8146104ea578063bb2871a51461050a57600080fd5b806362b850c71461044a57806362dd9af31461045d5780636afdd8501461047057806389352328146104a457600080fd5b806335ac2a50116101b057806340c5710c1161017f5780635684c275116101645780635684c275146103cd578063585cc6a5146103fa5780635f963dcf1461042257600080fd5b806340c5710c1461038d578063484b3577146103a057600080fd5b806335ac2a501461032757806337b0c09d146103475780633a79d6741461035a5780633ed242b41461036d57600080fd5b80631f66925c116101ec5780631f66925c146102c05780631f8b479d146102e15780632b3297f9146102f4578063340b532f1461031457600080fd5b806301ffc9a71461022957806305ce20d61461025e5780630c340a241461027357806313f6986d146102ab57600080fd5b3661022457005b600080fd5b34801561023557600080fd5b50610249610244366004613395565b610634565b60405190151581526020015b60405180910390f35b61027161026c36600461340e565b6106cd565b005b34801561027f57600080fd5b50600054610293906001600160a01b031681565b6040516001600160a01b039091168152602001610255565b3480156102b757600080fd5b50610271610801565b6102d36102ce366004613463565b6108ad565b604051908152602001610255565b6102716102ef366004613502565b610955565b34801561030057600080fd5b50600254610293906001600160a01b031681565b61027161032236600461358e565b6109a6565b61033a6103353660046135c7565b6109b4565b6040516102559190613624565b610271610355366004613463565b610b03565b610271610368366004613463565b610b1d565b61038061037b366004613668565b610b28565b604051610255919061372f565b61027161039b3660046137b1565b610c00565b3480156103ac57600080fd5b506103c06103bb36600461387d565b610d83565b6040516102559190613914565b3480156103d957600080fd5b506103ed6103e8366004613a45565b610e48565b6040516102559190613a9a565b34801561040657600080fd5b5061029373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b610435610430366004613ba8565b610f06565b60408051928352602083019190915201610255565b610271610458366004613bf0565b610fbb565b61027161046b366004613c87565b610ffd565b34801561047c57600080fd5b506102937f000000000000000000000000000000000000000000000000000000000000000081565b6102d36104b2366004613d0a565b611087565b3480156104c357600080fd5b50600354610293906001600160a01b031681565b6102d36104e5366004613deb565b611132565b6104fd6104f8366004613668565b61122d565b6040516102559190613e5f565b34801561051657600080fd5b5061033a610525366004613ed4565b611310565b610271610538366004613f31565b611326565b61027161054b366004613f67565b6113f5565b61027161055e366004613fde565b61142e565b34801561056f57600080fd5b5061024961057e36600461402f565b6001546001600160a01b0391821691161490565b34801561059e57600080fd5b50600154610293906001600160a01b031681565b3480156105be57600080fd5b506102496105cd36600461402f565b6000546001600160a01b0391821691161490565b3480156105ed57600080fd5b506102716105fc36600461358e565b61149e565b34801561060d57600080fd5b5061027161061c36600461402f565b611528565b6102d361062f36600461404c565b6115d8565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3ed242b40000000000000000000000000000000000000000000000000000000014806106c757507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b838360006106dc83838361171f565b6040517f5b6fd01d000000000000000000000000000000000000000000000000000000008152600481018790526000906001600160a01b03891690635b6fd01d9060240161010060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190614261565b519050610770818988611827565b6040517fded700a6000000000000000000000000000000000000000000000000000000008152600481018890526024810187905263ffffffff861660448201526001600160a01b0389169063ded700a6906064015b600060405180830381600087803b1580156107df57600080fd5b505af11580156107f3573d6000803e3d6000fd5b505050505050505050505050565b6001546001600160a01b03163314610845576040517f9ba0305d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018054600080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b0384161782559091169091556040517fdc57ca23c46d823853915ed5a090ca0ee9db5eb6a46f5c58e1c9158de861fd769190a1565b6000838360026108be83838361171f565b6040517f17621890000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b0386811660248301528816906317621890906044016020604051808303816000875af1158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a919061431d565b979650505050505050565b6040517f4faa38830000000000000000000000000000000000000000000000000000000081526001600160a01b03891690634faa3883906107c5908a908a908a908a908a908a908a906004016144da565b6109b082826118da565b5050565b606060005b83811015610a695760008585838181106109d5576109d561451b565b90506020028101906109e7919061454a565b6109f5906020810190614588565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509394505050505b8151811015610a5f57610a5788838381518110610a4857610a4861451b565b6020026020010151600261171f565b600101610a29565b50506001016109b9565b506040517f480b37960000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063480b379690610ab3908790879087906004016145f0565b6000604051808303816000875af1158015610ad2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610afa9190810190614708565b95945050505050565b610b186001600160a01b03841633838561199b565b505050565b610b18838383611a17565b60608167ffffffffffffffff811115610b4357610b4361413a565b604051908082528060200260200182016040528015610b9a57816020015b610b87604051806060016040528060001515815260200160608152602001600081525090565b815260200190600190039081610b615790505b50905060005b82811015610bf957610bd4848483818110610bbd57610bbd61451b565b9050602002810190610bcf9190614793565b611a7f565b828281518110610be657610be661451b565b6020908102919091010152600101610ba0565b5092915050565b82826000610c0f83838361171f565b6040517f5b6fd01d000000000000000000000000000000000000000000000000000000008152600481018690526000906001600160a01b03881690635b6fd01d9060240161010060405180830381865afa158015610c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c959190614261565b516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1d919061431d565b9050610d2a828983611827565b6040517fded700a6000000000000000000000000000000000000000000000000000000008152600481018890526024810182905263ffffffff871660448201526001600160a01b0389169063ded700a6906064016107c5565b6040805180820190915260608082526020820152600080610da48888611bff565b6040517f4997cdc300000000000000000000000000000000000000000000000000000000815291935091506001600160a01b038a1690634997cdc390610df690859085908b908b908b906004016148ab565b600060405180830381865afa158015610e13573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e3b91908101906149db565b9998505050505050505050565b6040805180820190915260608082526020820152600080610e698585611bff565b6040517fd2d95b2d00000000000000000000000000000000000000000000000000000000815291935091506001600160a01b0387169063d2d95b2d90610eb59085908590600401614b46565b600060405180830381865afa158015610ed2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610efa9190810190614b6b565b925050505b9392505050565b60008085856003610f1883838361171f565b6040517f72ada4c5000000000000000000000000000000000000000000000000000000008152600481018990526001600160a01b03888116602483015287811660448301528a16906372ada4c59060640160408051808303816000875af1158015610f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fab9190614caf565b909a909950975050505050505050565b610ff46001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001688888888888888611c60565b50505050505050565b6040517f3dff05870000000000000000000000000000000000000000000000000000000081526001600160a01b03881690633dff05879061104c90899089908990899089908990600401614cd3565b600060405180830381600087803b15801561106657600080fd5b505af115801561107a573d6000803e3d6000fd5b5050505050505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009081906001600160a01b038c16906370a0823190602401602060405180830381865afa1580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d919061431d565b90506111228c8c8c848d8d8d8d8d8d8d6115d8565b9c9b505050505050505050505050565b60006001600160a01b0386161561115f5760035461115f906001600160a01b038881169116600019611d1a565b600254611177906001600160a01b0316858588611dd8565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611221576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156111f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121c919061431d565b611223565b475b9695505050505050565b60608167ffffffffffffffff8111156112485761124861413a565b60405190808252806020026020018201604052801561127b57816020015b60608152602001906001900390816112665790505b50905060005b82811015610bf9576112eb3085858481811061129f5761129f61451b565b90506020028101906112b19190614793565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e2a92505050565b8282815181106112fd576112fd61451b565b6020908102919091010152600101611281565b6060610afa85858585611e97565b949350505050565b60005a9050600080306001600160a01b03168585604051611348929190614d90565b600060405180830381855af49150503d8060008114611383576040519150601f19603f3d011682016040523d82523d6000602084013e611388565b606091505b509150915060005a61139a9085614dcf565b905060405180606001604052808415158152602001838152602001828152506040517f493703af0000000000000000000000000000000000000000000000000000000081526004016113ec9190614de2565b60405180910390fd5b610ff46001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001688888888888888611f73565b8484600161143d83838361171f565b6040517ff1accf39000000000000000000000000000000000000000000000000000000008152600481018890526024810187905263ffffffff861660448201526001600160a01b03858116606483015289169063f1accf39906084016107c5565b6000546001600160a01b031633146114e2576040517fe0a8b92000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560038054929093169116179055565b6000546001600160a01b0316331461156c576040517fe0a8b92000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527f56bddfa0cee9697cebddf9acd7f23dc6583663b05e007b877056d05017994def9060200160405180910390a150565b60006115e58b8d8b611827565b81611685576040517f6b29e1bd0000000000000000000000000000000000000000000000000000000081526001600160a01b038d1690636b29e1bd9061163d908e908e908e908e908e908e908e908e90600401614df5565b6020604051808303816000875af115801561165c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611680919061431d565b611122565b6040517fb2b513c10000000000000000000000000000000000000000000000000000000081526001600160a01b038d169063b2b513c1906116dc908e908e908e908e908e908e908e908e908e908e90600401614e54565b6020604051808303816000875af11580156116fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611122919061431d565b826001600160a01b031663cc7a20496040518163ffffffff1660e01b8152600401602060405180830381865afa15801561175d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117819190614ecb565b6001600160a01b031663823abfd98333846040518463ffffffff1660e01b81526004016117b093929190614ee8565b602060405180830381865afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f19190614f0b565b610b18576040517f5c427cd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b4919061431d565b9050818110156118d4576118d46001600160a01b03851684600019611d1a565b50505050565b60006001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611986576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa15801561195d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611981919061431d565b611988565b475b90508015610b1857610b18838284611a17565b6040516001600160a01b0384811660248301528381166044830152606482018390526118d49186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ffc565b6001600160a01b038116611a285750335b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03841601611a6b57610b186001600160a01b03821683612078565b610b186001600160a01b0384168284612141565b611aa5604051806060016040528060001515815260200160608152602001600081525090565b600080306001600160a01b031663bcbef20660e01b8686604051602401611acd929190614f28565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051611b389190614f3c565b600060405180830381855af49150503d8060008114611b73576040519150601f19603f3d011682016040523d82523d6000602084013e611b78565b606091505b50915091508115611be5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5754463f2053686f756c642068617665206661696c656421000000000000000060448201526064016113ec565b60048101905080806020019051810190610afa9190614f4e565b606080611c5484846000604051908082528060200260200182016040528015611c4e57816020015b6040805180820190915260008082526020820152815260200190600190039081611c275790505b50612172565b50909590945092505050565b8515611d1057876001600160a01b031663edd9444b60405180606001604052808a8a808060200260200160405190810160405280939291908181526020016000905b82821015611cce57611cbf60408302860136819003810190615024565b81526020019060010190611ca2565b5050505050815260200188815260200187815250611ced8a8a866121f7565b3387876040518663ffffffff1660e01b81526004016107c59594939291906150ac565b5050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611d9984826122cc565b6118d4576040516001600160a01b03848116602483015260006044830152611dce91869182169063095ea7b3906064016119d0565b6118d48482611ffc565b611e2383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050506001600160a01b0387169190508361236f565b5050505050565b6060600080846001600160a01b031684604051611e479190614f3c565b600060405180830381855af49150503d8060008114611e82576040519150601f19603f3d011682016040523d82523d6000602084013e611e87565b606091505b5091509150610afa858383612417565b60608267ffffffffffffffff811115611eb257611eb261413a565b604051908082528060200260200182016040528015611edb578160200160208202803683370190505b50905060005b83811015611f6a57611f4586868684818110611eff57611eff61451b565b611f15926020604090920201908101915061402f565b878785818110611f2757611f2761451b565b9050604002016020016020810190611f3f919061402f565b8661248c565b828281518110611f5757611f5761451b565b6020908102919091010152600101611ee1565b50949350505050565b6040805160a0810182526001600160a01b0389811660608301908152608083018a9052825260208083018990528284018890528351808501855285831681529081018a905292517f30f28b7a000000000000000000000000000000000000000000000000000000008152908b16926330f28b7a926107c592909190339089908990600401615166565b60006120116001600160a01b03841683612803565b905080516000141580156120365750808060200190518101906120349190614f0b565b155b15610b18576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016113ec565b804710156120b4576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016113ec565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612101576040519150601f19603f3d011682016040523d82523d6000602084013e612106565b606091505b5050905080610b18576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b03838116602483015260448201839052610b1891859182169063a9059cbb906064016119d0565b60608060606121d38686808060200260200160405190810160405280939291908181526020016000905b828210156121c8576121b9604083028601368190038101906151df565b8152602001906001019061219c565b505050505085612811565b92506121e0868685612ccd565b91506121ec8484612f5e565b905093509350939050565b60608267ffffffffffffffff8111156122125761221261413a565b60405190808252806020026020018201604052801561225757816020015b60408051808201909152600080825260208201528152602001906001900390816122305790505b50905060005b81518110156122c4576040518060400160405280846001600160a01b031681526020018686848181106122925761229261451b565b905060400201602001358152508282815181106122b1576122b161451b565b602090810291909101015260010161225d565b509392505050565b6000806000846001600160a01b0316846040516122e99190614f3c565b6000604051808303816000865af19150503d8060008114612326576040519150601f19603f3d011682016040523d82523d6000602084013e61232b565b606091505b50915091508180156123555750805115806123555750808060200190518101906123559190614f0b565b8015610afa5750505050506001600160a01b03163b151590565b6060814710156123ad576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016113ec565b600080856001600160a01b031684866040516123c99190614f3c565b60006040518083038185875af1925050503d8060008114612406576040519150601f19603f3d011682016040523d82523d6000602084013e61240b565b606091505b5091509150610efa8683835b60608261242c576124278261305a565b610eff565b815115801561244357506001600160a01b0384163b155b15612485576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016113ec565b5080610eff565b600080600061249b868661309f565b6040517f582cf84b0000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152808316602483015292945090925060009189169063582cf84b90604401602060405180830381865afa15801561250b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252f9190615220565b90507f010000000000000000000000000000000000000000000000000000000000000060005b7fff00000000000000000000000000000000000000000000000000000000000000808316908416108015906125ab57507fff00000000000000000000000000000000000000000000000000000000000000821615155b156127f257817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168284167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036127c4576040517f808ba8e00000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483015289811660248301527fff000000000000000000000000000000000000000000000000000000000000008416604483015260009182918291908e169063808ba8e090606401608060405180830381865afa158015612694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b89190615267565b9350935093505060006126ca866130d0565b90506000816126d981866152bf565b6126e4906001615309565b6126ee9190615326565b63ffffffff1690508b612719576127066003836152bf565b6127169063ffffffff168261534e565b90505b6000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16118061276457506000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16115b1561279d5742811161278257859a505050505050505050505061131e565b61278c4282614dcf565b9a505050505050505050505061131e565b428111156127be5785156127b157856127bb565b6127bb4282614dcf565b95505b50505050505b6001827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901b9150612555565b506000199998505050505050505050565b6060610eff8383600061236f565b60606000808351855160026128269190615361565b612830919061534e565b67ffffffffffffffff8111156128485761284861413a565b604051908082528060200260200182016040528015612871578160200160208202803683370190505b50905060005b8551811015612a405760008060005b858110801561289c575082801561289a5750815b155b1561297157821580156128f657508884815181106128bc576128bc61451b565b6020026020010151600001516001600160a01b03168582815181106128e3576128e361451b565b60200260200101516001600160a01b0316145b1561290057600192505b81158015612955575088848151811061291b5761291b61451b565b6020026020010151602001516001600160a01b03168582815181106129425761294261451b565b60200260200101516001600160a01b0316145b1561295f57600191505b8061296981615378565b915050612886565b50816129d4578783815181106129895761298961451b565b6020026020010151600001518486806129a190615378565b9750815181106129b3576129b361451b565b60200260200101906001600160a01b031690816001600160a01b0316815250505b80612a36578783815181106129eb576129eb61451b565b602002602001015160200151848680612a0390615378565b975081518110612a1557612a1561451b565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5050600101612877565b5060005b8451811015612b35576000805b8481108015612a5e575081155b15612ac957868381518110612a7557612a7561451b565b6020026020010151600001516001600160a01b0316848281518110612a9c57612a9c61451b565b60200260200101516001600160a01b031603612ab757600191505b80612ac181615378565b915050612a51565b5080612b2c57858281518110612ae157612ae161451b565b602002602001015160000151838580612af990615378565b965081518110612b0b57612b0b61451b565b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101612a44565b508167ffffffffffffffff811115612b4f57612b4f61413a565b604051908082528060200260200182016040528015612b78578160200160208202803683370190505b50925060005b82811015612cc4576000828281518110612b9a57612b9a61451b565b6020026020010151905060005b816001600160a01b0316868281518110612bc357612bc361451b565b60200260200101516001600160a01b0316108015612c0d575060006001600160a01b0316868281518110612bf957612bf961451b565b60200260200101516001600160a01b031614155b15612c245780612c1c81615378565b915050612ba7565b825b81811115612c8e5786612c3a600183614dcf565b81518110612c4a57612c4a61451b565b6020026020010151878281518110612c6457612c6461451b565b6001600160a01b039092166020928302919091019091015280612c8681615392565b915050612c26565b5081868281518110612ca257612ca261451b565b6001600160a01b03909216602092830291909101909101525050600101612b7e565b50505092915050565b60608267ffffffffffffffff811115612ce857612ce861413a565b604051908082528060200260200182016040528015612d2d57816020015b6040805180820190915260008082526020820152815260200190600190039081612d065790505b5090506000805b83518160ff161015612f55576000612d4d8260016153a9565b90505b84518160ff161015612f425760005b86811015612f2f57878782818110612d7957612d7961451b565b612d8f926020604090920201908101915061402f565b6001600160a01b0316868460ff1681518110612dad57612dad61451b565b60200260200101516001600160a01b0316148015612e215750878782818110612dd857612dd861451b565b9050604002016020016020810190612df0919061402f565b6001600160a01b0316868360ff1681518110612e0e57612e0e61451b565b60200260200101516001600160a01b0316145b80612ee15750878782818110612e3957612e3961451b565b9050604002016020016020810190612e51919061402f565b6001600160a01b0316868460ff1681518110612e6f57612e6f61451b565b60200260200101516001600160a01b0316148015612ee15750878782818110612e9a57612e9a61451b565b612eb0926020604090920201908101915061402f565b6001600160a01b0316868360ff1681518110612ece57612ece61451b565b60200260200101516001600160a01b0316145b15612f27576040805180820190915260ff8085168252831660208201528585612f0981615378565b965081518110612f1b57612f1b61451b565b60200260200101819052505b600101612d5f565b5080612f3a816153c2565b915050612d50565b5080612f4d816153c2565b915050612d34565b50509392505050565b6060815167ffffffffffffffff811115612f7a57612f7a61413a565b604051908082528060200260200182016040528015612fa3578160200160208202803683370190505b50905060005b8351811015610bf95760005b848281518110612fc757612fc761451b565b6020026020010151600001516001600160a01b0316848281518110612fee57612fee61451b565b60200260200101516001600160a01b031614613016578061300e81615378565b915050612fb5565b8482815181106130285761302861451b565b6020026020010151602001518382815181106130465761304661451b565b602090810291909101015250600101612fa9565b80511561306a5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600080826001600160a01b0316846001600160a01b0316106130c25782846130c5565b83835b909590945092505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082167f0100000000000000000000000000000000000000000000000000000000000000036131235750603c919050565b7fff0000000000000000000000000000000000000000000000000000000000000082167f020000000000000000000000000000000000000000000000000000000000000003613175575061012c919050565b7fff0000000000000000000000000000000000000000000000000000000000000082167f0400000000000000000000000000000000000000000000000000000000000000036131c75750610384919050565b7fff0000000000000000000000000000000000000000000000000000000000000082167f0800000000000000000000000000000000000000000000000000000000000000036132195750610708919050565b7fff0000000000000000000000000000000000000000000000000000000000000082167f10000000000000000000000000000000000000000000000000000000000000000361326b5750610e10919050565b7fff0000000000000000000000000000000000000000000000000000000000000082167f2000000000000000000000000000000000000000000000000000000000000000036132bd5750613840919050565b7fff0000000000000000000000000000000000000000000000000000000000000082167f400000000000000000000000000000000000000000000000000000000000000003613310575062015180919050565b7fff0000000000000000000000000000000000000000000000000000000000000082167f800000000000000000000000000000000000000000000000000000000000000003613363575062093a80919050565b6040517fbf3cad0b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000602082840312156133a757600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eff57600080fd5b6001600160a01b038116811461309c57600080fd5b63ffffffff8116811461309c57600080fd5b8035613409816133ec565b919050565b6000806000806080858703121561342457600080fd5b843561342f816133d7565b93506020850135925060408501359150606085013561344d816133ec565b939692955090935050565b8035613409816133d7565b60008060006060848603121561347857600080fd5b8335613483816133d7565b925060208401359150604084013561349a816133d7565b809150509250925092565b60008083601f8401126134b757600080fd5b50813567ffffffffffffffff8111156134cf57600080fd5b6020830191508360208260051b85010111156134ea57600080fd5b9250929050565b803560ff8116811461340957600080fd5b60008060008060008060008060e0898b03121561351e57600080fd5b8835613529816133d7565b9750602089013567ffffffffffffffff81111561354557600080fd5b6135518b828c016134a5565b909850965050604089013594506060890135935061357160808a016134f1565b925060a0890135915060c089013590509295985092959890939650565b600080604083850312156135a157600080fd5b82356135ac816133d7565b915060208301356135bc816133d7565b809150509250929050565b600080600080606085870312156135dd57600080fd5b84356135e8816133d7565b9350602085013567ffffffffffffffff81111561360457600080fd5b613610878288016134a5565b909450925050604085013561344d816133d7565b6020808252825182820181905260009190848201906040850190845b8181101561365c57835183529284019291840191600101613640565b50909695505050505050565b6000806020838503121561367b57600080fd5b823567ffffffffffffffff81111561369257600080fd5b61369e858286016134a5565b90969095509350505050565b60005b838110156136c55781810151838201526020016136ad565b50506000910152565b600081518084526136e68160208601602086016136aa565b601f01601f19169290920160200192915050565b805115158252600060208201516060602085015261371b60608501826136ce565b604093840151949093019390935250919050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156137a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526137928583516136fa565b94509285019290850190600101613758565b5092979650505050505050565b6000806000606084860312156137c657600080fd5b83356137d1816133d7565b925060208401359150604084013561349a816133ec565b60008083601f8401126137fa57600080fd5b50813567ffffffffffffffff81111561381257600080fd5b6020830191508360208260061b85010111156134ea57600080fd5b801515811461309c57600080fd5b60008083601f84011261384d57600080fd5b50813567ffffffffffffffff81111561386557600080fd5b6020830191508360208285010111156134ea57600080fd5b6000806000806000806080878903121561389657600080fd5b86356138a1816133d7565b9550602087013567ffffffffffffffff808211156138be57600080fd5b6138ca8a838b016137e8565b9097509550604089013591506138df8261382d565b909350606088013590808211156138f557600080fd5b5061390289828a0161383b565b979a9699509497509295939492505050565b60006020808352606080840185516040808588015282825180855260809450608089019150868401935060005b8181101561398e5761397e8386516001600160a01b0381511682526020810151602083015260408101516040830152606081015160608301525050565b9387019391850191600101613941565b505088860151888203601f190160408a0152805180835290870193506000918701905b80831015613a3757845180516001600160a01b03908116845289820151168984015284810151858401528781015188840152868101518784015260a0808201519084015260c0908101517fff000000000000000000000000000000000000000000000000000000000000001690830152938701936001929092019160e0909101906139b1565b509998505050505050505050565b600080600060408486031215613a5a57600080fd5b8335613a65816133d7565b9250602084013567ffffffffffffffff811115613a8157600080fd5b613a8d868287016137e8565b9497909650939450505050565b60006020808352606080840185516040808588015282825180855260809450608089019150868401935060005b81811015613b1457613b048386516001600160a01b0381511682526020810151602083015260408101516040830152606081015160608301525050565b9387019391850191600101613ac7565b505088860151888203601f190160408a0152805180835290870193506000918701905b80831015613a3757845180516001600160a01b039081168452898201511689840152848101518584015287810151888401528601517fff000000000000000000000000000000000000000000000000000000000000001686830152938701936001929092019160a090910190613b37565b60008060008060808587031215613bbe57600080fd5b8435613bc9816133d7565b9350602085013592506040850135613be0816133d7565b9150606085013561344d816133d7565b600080600080600080600060a0888a031215613c0b57600080fd5b873567ffffffffffffffff80821115613c2357600080fd5b613c2f8b838c016137e8565b909950975060208a0135965060408a0135955060608a0135915080821115613c5657600080fd5b50613c638a828b0161383b565b9094509250506080880135613c77816133d7565b8091505092959891949750929550565b600080600080600080600060c0888a031215613ca257600080fd5b8735613cad816133d7565b9650602088013567ffffffffffffffff811115613cc957600080fd5b613cd58a828b016134a5565b90975095505060408801359350613cee606089016134f1565b92506080880135915060a0880135905092959891949750929550565b6000806000806000806000806000806101008b8d031215613d2a57600080fd5b8a35613d35816133d7565b995060208b0135613d45816133d7565b985060408b0135613d55816133d7565b975060608b0135613d65816133ec565b965060808b0135613d75816133ec565b9550613d8360a08c01613458565b945060c08b013567ffffffffffffffff80821115613da057600080fd5b613dac8e838f016134a5565b909650945060e08d0135915080821115613dc557600080fd5b50613dd28d828e0161383b565b915080935050809150509295989b9194979a5092959850565b600080600080600060808688031215613e0357600080fd5b8535613e0e816133d7565b945060208601359350604086013567ffffffffffffffff811115613e3157600080fd5b613e3d8882890161383b565b9094509250506060860135613e51816133d7565b809150509295509295909350565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156137a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613ec28583516136ce565b94509285019290850190600101613e88565b60008060008060608587031215613eea57600080fd5b8435613ef5816133d7565b9350602085013567ffffffffffffffff811115613f1157600080fd5b613f1d878288016137e8565b909450925050604085013561344d8161382d565b60008060208385031215613f4457600080fd5b823567ffffffffffffffff811115613f5b57600080fd5b61369e8582860161383b565b600080600080600080600060c0888a031215613f8257600080fd5b8735613f8d816133d7565b9650602088013595506040880135945060608801359350608088013567ffffffffffffffff811115613fbe57600080fd5b613fca8a828b0161383b565b90945092505060a0880135613c77816133d7565b600080600080600060a08688031215613ff657600080fd5b8535614001816133d7565b94506020860135935060408601359250606086013561401f816133ec565b91506080860135613e51816133d7565b60006020828403121561404157600080fd5b8135610eff816133d7565b60008060008060008060008060008060006101208c8e03121561406e57600080fd5b6140788c356133d7565b8b359a5061408960208d01356133d7565b60208c0135995061409c60408d01613458565b985060608c013597506140b160808d016133fe565b96506140bf60a08d016133fe565b95506140cd60c08d01613458565b945067ffffffffffffffff8060e08e013511156140e957600080fd5b6140f98e60e08f01358f016134a5565b90955093506101008d013581101561411057600080fd5b506141228d6101008e01358e0161383b565b81935080925050509295989b509295989b9093969950565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561418c5761418c61413a565b60405290565b60405160e0810167ffffffffffffffff8111828210171561418c5761418c61413a565b60405160a0810167ffffffffffffffff8111828210171561418c5761418c61413a565b6040516060810167ffffffffffffffff8111828210171561418c5761418c61413a565b604051601f8201601f1916810167ffffffffffffffff811182821017156142245761422461413a565b604052919050565b8051613409816133d7565b8051613409816133ec565b80516effffffffffffffffffffffffffffff8116811461340957600080fd5b600061010080838503121561427557600080fd5b6040519081019067ffffffffffffffff821181831017156142985761429861413a565b81604052835191506142a9826133d7565b8181526142b86020850161422c565b60208201526142c960408501614237565b60408201526142da60608501614237565b6060820152608084015160808201526142f560a08501614237565b60a082015260c084015160c082015261431060e08501614242565b60e0820152949350505050565b60006020828403121561432f57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261436b57600080fd5b830160208101925035905067ffffffffffffffff81111561438b57600080fd5b8060051b36038213156134ea57600080fd5b600481106143d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261440c57600080fd5b90910192915050565b60008383855260208086019550808560051b8301018460005b878110156144cd57601f1985840301895261444982886143d8565b60408085018235614459816133d7565b6001600160a01b0316865261447083880184614336565b8789019390935290829052909150606085019060005b838110156144b85781356004811061449d57600080fd5b6144a7848261439d565b509187019190870190600101614486565b5050998501999350509083019060010161442e565b5090979650505050505050565b60c0815260006144ee60c08301898b614415565b602083019790975250604081019490945260ff929092166060840152608083015260a09091015292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261457e57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126145bd57600080fd5b83018035915067ffffffffffffffff8211156145d857600080fd5b6020019150600581901b36038213156134ea57600080fd5b60408082528181018490526000906060808401600587811b860183018986805b8b8110156146c6577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a8503018652614649838e6143d8565b8035614654816133d7565b6001600160a01b03168552602061466d82820183614336565b92508a82880152828b8801527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156146a5578485fd5b91871b918281888c0137509687019694018701939290920191600101614610565b5050506001600160a01b0388166020880152945061131e9350505050565b600067ffffffffffffffff8211156146fe576146fe61413a565b5060051b60200190565b6000602080838503121561471b57600080fd5b825167ffffffffffffffff81111561473257600080fd5b8301601f8101851361474357600080fd5b8051614756614751826146e4565b6141fb565b81815260059190911b8201830190838101908783111561477557600080fd5b928401925b8284101561094a5783518252928401929084019061477a565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126147c857600080fd5b83018035915067ffffffffffffffff8211156147e357600080fd5b6020019150368190038213156134ea57600080fd5b60008151808452602080850194506020840160005b838110156148325781516001600160a01b03168752958201959082019060010161480d565b509495945050505050565b60008151808452602080850194506020840160005b83811015614832578151805160ff908116895290840151168388015260409096019590820190600101614852565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6080815260006148be60808301886147f8565b82810360208401526148d0818861483d565b9050851515604084015282810360608401526148ed818587614880565b98975050505050505050565b6000614907614751846146e4565b8381529050602080820190600785901b84018681111561492657600080fd5b845b818110156149a057608080828a0312156149425760008081fd5b604080519182019167ffffffffffffffff831181841017156149665761496661413a565b918152825191614975836133d7565b9182528285015185830152808301519082015260608083015190820152845292820192608001614928565b505050509392505050565b80517fff000000000000000000000000000000000000000000000000000000000000008116811461340957600080fd5b600060208083850312156149ee57600080fd5b825167ffffffffffffffff80821115614a0657600080fd5b81850191506040808388031215614a1c57600080fd5b614a24614169565b835183811115614a3357600080fd5b8401601f81018913614a4457600080fd5b614a528982518884016148f9565b8252508484015183811115614a6657600080fd5b80850194505087601f850112614a7b57600080fd5b83519250614a8b614751846146e4565b83815260e0938402850186019386820191908a861115614aaa57600080fd5b958701955b85871015614b335780878c031215614ac75760008081fd5b614acf614192565b8751614ada816133d7565b815287890151614ae9816133d7565b818a01528786015186820152606080890151908201526080808901519082015260a0808901519082015260c0614b20818a016149ab565b9082015283529586019591870191614aaf565b5095820195909552979650505050505050565b604081526000614b5960408301856147f8565b8281036020840152610afa818561483d565b60006020808385031215614b7e57600080fd5b825167ffffffffffffffff80821115614b9657600080fd5b81850191506040808388031215614bac57600080fd5b614bb4614169565b835183811115614bc357600080fd5b8401601f81018913614bd457600080fd5b614be28982518884016148f9565b8252508484015183811115614bf657600080fd5b80850194505087601f850112614c0b57600080fd5b83519250614c1b614751846146e4565b83815260a0938402850186019386820191908a861115614c3a57600080fd5b958701955b85871015614b335780878c031215614c575760008081fd5b614c5f6141b5565b8751614c6a816133d7565b815287890151614c79816133d7565b818a01528786015186820152606080890151908201526080614c9c818a016149ab565b9082015283529586019591870191614c3f565b60008060408385031215614cc257600080fd5b505080516020909101519092909150565b60a08082528101869052600060c0600588901b8301810190830189835b8a811015614d67577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40868503018352614d29828d6143d8565b6040813586526020614d3d81840184614336565b93508282890152614d518389018583614415565b9750509485019493909301925050600101614cf0565b5050506020830187905260ff861660408401529050606082019390935260800152949350505050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156106c7576106c7614da0565b602081526000610eff60208301846136fa565b60006001600160a01b03808b168352808a16602084015288604084015263ffffffff808916606085015280881660808501525080861660a08401525060e060c0830152614e4660e083018486614415565b9a9950505050505050505050565b6001600160a01b038b811682528a81166020830152604082018a905263ffffffff898116606084015288166080830152861660a082015261010060c08201819052600090614ea58382018789614415565b905082810360e0840152614eba818587614880565b9d9c50505050505050505050505050565b600060208284031215614edd57600080fd5b8151610eff816133d7565b8381526001600160a01b03831660208201526060810161131e604083018461439d565b600060208284031215614f1d57600080fd5b8151610eff8161382d565b60208152600061131e602083018486614880565b6000825161457e8184602087016136aa565b60006020808385031215614f6157600080fd5b825167ffffffffffffffff80821115614f7957600080fd5b9084019060608287031215614f8d57600080fd5b614f956141d8565b8251614fa08161382d565b81528284015182811115614fb357600080fd5b8301601f81018813614fc457600080fd5b805183811115614fd657614fd661413a565b614fe886601f19601f840116016141fb565b93508084528886828401011115614ffe57600080fd5b61500d818786018885016136aa565b505092830152604090810151908201529392505050565b60006040828403121561503657600080fd5b61503e614169565b8235615049816133d7565b81526020928301359281019290925250919050565b60008151808452602080850194506020840160005b838110156148325761509987835180516001600160a01b03168252602090810151910152565b6040969096019590820190600101615073565b60808152600060e08201875160606080850152818151808452610100860191506020935060208301925060005b81811015615112576150ff83855180516001600160a01b03168252602090810151910152565b92840192604092909201916001016150d9565b505060208a015160a086015260408a015160c0860152848103602086015261513a818a61505e565b9250505061515360408401876001600160a01b03169052565b82810360608401526148ed818587614880565b600061010061518983895180516001600160a01b03168252602090810151910152565b60208801516040840152604088015160608401526151bd608084018880516001600160a01b03168252602090810151910152565b6001600160a01b03861660c08401528060e08401526148ed8184018587614880565b6000604082840312156151f157600080fd5b6151f9614169565b8235615204816133d7565b81526020830135615214816133d7565b60208201529392505050565b60006020828403121561523257600080fd5b610eff826149ab565b80517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461340957600080fd5b6000806000806080858703121561527d57600080fd5b8451615288816133ec565b93506152966020860161523b565b925060408501516152a6816133ec565b91506152b46060860161523b565b905092959194509250565b600063ffffffff808416806152fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910492915050565b63ffffffff818116838216019080821115610bf957610bf9614da0565b63ffffffff81811683821602808216919082811461534657615346614da0565b505092915050565b808201808211156106c7576106c7614da0565b80820281158282048414176106c7576106c7614da0565b6000600019820361538b5761538b614da0565b5060010190565b6000816153a1576153a1614da0565b506000190190565b60ff81811683821601908111156106c7576106c7614da0565b600060ff821660ff81036153d8576153d8614da0565b6001019291505056",
        "metadata": {
          "compiler": {
            "version": "0.8.22+commit.4fc1097e"
          },
          "language": "Solidity",
          "output": {
            "abi": [
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_swapper",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "_allowanceTarget",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "_governor",
                    "type": "address"
                  },
                  {
                    "internalType": "contract IPermit2",
                    "name": "_permit2",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "target",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "AddressEmptyCode"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "AddressInsufficientBalance"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "FailedInnerCall"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "GovernorIsZeroAddress"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "InvalidMask"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "OnlyGovernor"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "OnlyPendingGovernor"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "SafeERC20FailedOperation"
              },
              {
                "inputs": [
                  {
                    "internalType": "struct ISimulationAdapter.SimulationResult",
                    "name": "result",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "bool",
                        "name": "success",
                        "type": "bool"
                      },
                      {
                        "internalType": "bytes",
                        "name": "result",
                        "type": "bytes"
                      },
                      {
                        "internalType": "uint256",
                        "name": "gasSpent",
                        "type": "uint256"
                      }
                    ]
                  }
                ],
                "type": "error",
                "name": "SimulatedCall"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "UnauthorizedCaller"
              },
              {
                "inputs": [],
                "type": "event",
                "name": "PendingGovernorAccepted",
                "anonymous": false
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "newPendingGovernor",
                    "type": "address",
                    "indexed": false
                  }
                ],
                "type": "event",
                "name": "PendingGovernorSet",
                "anonymous": false
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "PERMIT2",
                "outputs": [
                  {
                    "internalType": "contract IPermit2",
                    "name": "",
                    "type": "address"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "PROTOCOL_TOKEN",
                "outputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "acceptPendingGovernor"
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "allowanceTarget",
                "outputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "struct IPermit2.TokenPermissions[]",
                    "name": "_tokens",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "uint256",
                    "name": "_nonce",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_deadline",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bytes",
                    "name": "_signature",
                    "type": "bytes"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "batchPermitTakeFromCaller"
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint32",
                    "name": "_amountOfSwaps",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint32",
                    "name": "_swapInterval",
                    "type": "uint32"
                  },
                  {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                  },
                  {
                    "internalType": "struct IDCAPermissionManager.PermissionSet[]",
                    "name": "_permissions",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "operator",
                        "type": "address"
                      },
                      {
                        "internalType": "enum IDCAPermissionManager.Permission[]",
                        "name": "permissions",
                        "type": "uint8[]"
                      }
                    ]
                  },
                  {
                    "internalType": "bytes",
                    "name": "_miscellaneous",
                    "type": "bytes"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "deposit",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "_positionId",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                  },
                  {
                    "internalType": "uint32",
                    "name": "_amountOfSwaps",
                    "type": "uint32"
                  },
                  {
                    "internalType": "uint32",
                    "name": "_swapInterval",
                    "type": "uint32"
                  },
                  {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                  },
                  {
                    "internalType": "struct IDCAPermissionManager.PermissionSet[]",
                    "name": "_permissions",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "operator",
                        "type": "address"
                      },
                      {
                        "internalType": "enum IDCAPermissionManager.Permission[]",
                        "name": "permissions",
                        "type": "uint8[]"
                      }
                    ]
                  },
                  {
                    "internalType": "bytes",
                    "name": "_miscellaneous",
                    "type": "bytes"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "depositWithBalanceOnContract",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "_positionId",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "struct Pair[]",
                    "name": "_pairs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "tokenA",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "tokenB",
                        "type": "address"
                      }
                    ]
                  },
                  {
                    "internalType": "bool",
                    "name": "_calculatePrivilegedAvailability",
                    "type": "bool"
                  },
                  {
                    "internalType": "bytes",
                    "name": "_oracleData",
                    "type": "bytes"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "getNextSwapInfo",
                "outputs": [
                  {
                    "internalType": "struct IDCAHubSwapHandler.SwapInfo",
                    "name": "",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "struct IDCAHubSwapHandler.TokenInSwap[]",
                        "name": "tokens",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                          },
                          {
                            "internalType": "uint256",
                            "name": "reward",
                            "type": "uint256"
                          },
                          {
                            "internalType": "uint256",
                            "name": "toProvide",
                            "type": "uint256"
                          },
                          {
                            "internalType": "uint256",
                            "name": "platformFee",
                            "type": "uint256"
                          }
                        ]
                      },
                      {
                        "internalType": "struct IDCAHubSwapHandler.PairInSwap[]",
                        "name": "pairs",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "address",
                            "name": "tokenA",
                            "type": "address"
                          },
                          {
                            "internalType": "address",
                            "name": "tokenB",
                            "type": "address"
                          },
                          {
                            "internalType": "uint256",
                            "name": "totalAmountToSwapTokenA",
                            "type": "uint256"
                          },
                          {
                            "internalType": "uint256",
                            "name": "totalAmountToSwapTokenB",
                            "type": "uint256"
                          },
                          {
                            "internalType": "uint256",
                            "name": "ratioAToB",
                            "type": "uint256"
                          },
                          {
                            "internalType": "uint256",
                            "name": "ratioBToA",
                            "type": "uint256"
                          },
                          {
                            "internalType": "bytes1",
                            "name": "intervalsInSwap",
                            "type": "bytes1"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "governor",
                "outputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_positionId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint32",
                    "name": "_newSwaps",
                    "type": "uint32"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "increasePosition"
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_positionId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint32",
                    "name": "_newSwaps",
                    "type": "uint32"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "increasePositionWithBalanceOnContract"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "isGovernor",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "isPendingGovernor",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract ILegacyDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "struct Pair[]",
                    "name": "_pairs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "tokenA",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "tokenB",
                        "type": "address"
                      }
                    ]
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "legacyGetNextSwapInfo",
                "outputs": [
                  {
                    "internalType": "struct ILegacyDCAHub.SwapInfo",
                    "name": "",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "struct ILegacyDCAHub.TokenInSwap[]",
                        "name": "tokens",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                          },
                          {
                            "internalType": "uint256",
                            "name": "reward",
                            "type": "uint256"
                          },
                          {
                            "internalType": "uint256",
                            "name": "toProvide",
                            "type": "uint256"
                          },
                          {
                            "internalType": "uint256",
                            "name": "platformFee",
                            "type": "uint256"
                          }
                        ]
                      },
                      {
                        "internalType": "struct ILegacyDCAHub.PairInSwap[]",
                        "name": "pairs",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "address",
                            "name": "tokenA",
                            "type": "address"
                          },
                          {
                            "internalType": "address",
                            "name": "tokenB",
                            "type": "address"
                          },
                          {
                            "internalType": "uint256",
                            "name": "ratioAToB",
                            "type": "uint256"
                          },
                          {
                            "internalType": "uint256",
                            "name": "ratioBToA",
                            "type": "uint256"
                          },
                          {
                            "internalType": "bytes1",
                            "name": "intervalsInSwap",
                            "type": "bytes1"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAPermissionManager",
                    "name": "_permissionManager",
                    "type": "address"
                  },
                  {
                    "internalType": "struct IDCAPermissionManager.PositionPermissions[]",
                    "name": "_permissions",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                      },
                      {
                        "internalType": "struct IDCAPermissionManager.PermissionSet[]",
                        "name": "permissionSets",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "address",
                            "name": "operator",
                            "type": "address"
                          },
                          {
                            "internalType": "enum IDCAPermissionManager.Permission[]",
                            "name": "permissions",
                            "type": "uint8[]"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "internalType": "uint256",
                    "name": "_deadline",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint8",
                    "name": "_v",
                    "type": "uint8"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "_r",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "_s",
                    "type": "bytes32"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "multiPermissionPermit"
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes[]",
                    "name": "_data",
                    "type": "bytes[]"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "multicall",
                "outputs": [
                  {
                    "internalType": "bytes[]",
                    "name": "_results",
                    "type": "bytes[]"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "pendingGovernor",
                "outputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAPermissionManager",
                    "name": "_permissionManager",
                    "type": "address"
                  },
                  {
                    "internalType": "struct IDCAPermissionManager.PermissionSet[]",
                    "name": "_permissions",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "operator",
                        "type": "address"
                      },
                      {
                        "internalType": "enum IDCAPermissionManager.Permission[]",
                        "name": "permissions",
                        "type": "uint8[]"
                      }
                    ]
                  },
                  {
                    "internalType": "uint256",
                    "name": "_tokenId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_deadline",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint8",
                    "name": "_v",
                    "type": "uint8"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "_r",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "_s",
                    "type": "bytes32"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "permissionPermit"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_nonce",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_deadline",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bytes",
                    "name": "_signature",
                    "type": "bytes"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "permitTakeFromCaller"
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_positionId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint32",
                    "name": "_newSwaps",
                    "type": "uint32"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "reducePosition"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_allowanceToken",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_value",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bytes",
                    "name": "_swapData",
                    "type": "bytes"
                  },
                  {
                    "internalType": "address",
                    "name": "_tokenOut",
                    "type": "address"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "runSwap",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "_amountOut",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "struct Pair[]",
                    "name": "_pairs",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "tokenA",
                        "type": "address"
                      },
                      {
                        "internalType": "address",
                        "name": "tokenB",
                        "type": "address"
                      }
                    ]
                  },
                  {
                    "internalType": "bool",
                    "name": "_calculatePrivilegedAvailability",
                    "type": "bool"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "secondsUntilNextSwap",
                "outputs": [
                  {
                    "internalType": "uint256[]",
                    "name": "",
                    "type": "uint256[]"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_token",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "sendBalanceOnContractToRecipient"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "sendToRecipient"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_pendingGovernor",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "setPendingGovernor"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_newSwapper",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "_newAllowanceTarget",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "setSwapper"
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes[]",
                    "name": "_calls",
                    "type": "bytes[]"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "simulate",
                "outputs": [
                  {
                    "internalType": "struct ISimulationAdapter.SimulationResult[]",
                    "name": "_results",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "bool",
                        "name": "success",
                        "type": "bool"
                      },
                      {
                        "internalType": "bytes",
                        "name": "result",
                        "type": "bytes"
                      },
                      {
                        "internalType": "uint256",
                        "name": "gasSpent",
                        "type": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes",
                    "name": "_call",
                    "type": "bytes"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "simulateAndRevert"
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes4",
                    "name": "_interfaceId",
                    "type": "bytes4"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "supportsInterface",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "swapper",
                "outputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IERC20",
                    "name": "_token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "takeFromCaller"
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_positionId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipientUnswapped",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipientSwapped",
                    "type": "address"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "terminate",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "_unswapped",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_swapped",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "_positionId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "withdrawSwapped",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "_swapped",
                    "type": "uint256"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "struct IDCAHubPositionHandler.PositionSet[]",
                    "name": "_positions",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256[]",
                        "name": "positionIds",
                        "type": "uint256[]"
                      }
                    ]
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "withdrawSwappedMany",
                "outputs": [
                  {
                    "internalType": "uint256[]",
                    "name": "_withdrawn",
                    "type": "uint256[]"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "payable",
                "type": "receive"
              }
            ],
            "devdoc": {
              "kind": "dev",
              "methods": {
                "acceptPendingGovernor()": {
                  "details": "Only the pending governor can execute this action"
                },
                "batchPermitTakeFromCaller((address,uint256)[],uint256,uint256,bytes,address)": {
                  "params": {
                    "_deadline": "The signature's deadline",
                    "_nonce": "The signed nonce",
                    "_recipient": "The address that will receive the funds",
                    "_signature": "The owner's signature",
                    "_tokens": "The tokens to take"
                  }
                },
                "deposit(address,address,address,uint256,uint32,uint32,address,(address,uint8[])[],bytes)": {
                  "details": "Meant to be used as part of a multicall",
                  "params": {
                    "amount": "How many \"from\" tokens will be swapped in total",
                    "amountOfSwaps": "How many swaps to execute for this position",
                    "from": "The address of the \"from\" token",
                    "hub": "The address of the DCAHub",
                    "miscellaneous": "Bytes that will be emitted, and associated with the position. If empty, no event will be emitted",
                    "owner": "The address of the owner of the position being created",
                    "swapInterval": "How frequently the position's swaps should be executed",
                    "to": "The address of the \"to\" token"
                  },
                  "returns": {
                    "_positionId": "The id of the created position"
                  }
                },
                "depositWithBalanceOnContract(address,address,address,uint32,uint32,address,(address,uint8[])[],bytes)": {
                  "details": "Meant to be used as part of a multicall",
                  "params": {
                    "amountOfSwaps": "How many swaps to execute for this position",
                    "from": "The address of the \"from\" token",
                    "hub": "The address of the DCAHub",
                    "miscellaneous": "Bytes that will be emitted, and associated with the position. If empty, no event will be emitted",
                    "owner": "The address of the owner of the position being created",
                    "swapInterval": "How frequently the position's swaps should be executed",
                    "to": "The address of the \"to\" token"
                  },
                  "returns": {
                    "_positionId": "The id of the created position"
                  }
                },
                "getNextSwapInfo(address,(address,address)[],bool,bytes)": {
                  "details": "Please note that this function is very expensive. Ideally, it would be used for off-chain purposes",
                  "params": {
                    "calculatePrivilegedAvailability": "Some accounts get privileged availability and can execute swaps before others. This flag provides        the possibility to calculate the next swap information for privileged and non-privileged accounts",
                    "hub": "The address of the DCAHub",
                    "oracleData": "Bytes to send to the oracle when executing a quote",
                    "pairs": "The pairs to be involved in the swap"
                  },
                  "returns": {
                    "_0": "How executing a swap for all the given pairs would look like"
                  }
                },
                "increasePosition(address,uint256,uint256,uint32)": {
                  "details": "Meant to be used as part of a multicall",
                  "params": {
                    "amount": "Amount of funds to add to the position",
                    "hub": "The address of the DCAHub",
                    "newSwaps": "The new amount of swaps",
                    "positionId": "The position's id"
                  }
                },
                "increasePositionWithBalanceOnContract(address,uint256,uint32)": {
                  "details": "Meant to be used as part of a multicall",
                  "params": {
                    "hub": "The address of the DCAHub",
                    "newSwaps": "The new amount of swaps",
                    "positionId": "The position's id"
                  }
                },
                "isGovernor(address)": {
                  "params": {
                    "account": "The account to check"
                  },
                  "returns": {
                    "_0": "Whether it is the current governor or not"
                  }
                },
                "isPendingGovernor(address)": {
                  "params": {
                    "account": "The account to check"
                  },
                  "returns": {
                    "_0": "Whether it is the pending governor or not"
                  }
                },
                "legacyGetNextSwapInfo(address,(address,address)[])": {
                  "details": "Please note that this function is very expensive. Ideally, it would be used for off-chain purposes",
                  "params": {
                    "hub": "The address of the DCAHub",
                    "pairs": "The pairs to be involved in the swap"
                  },
                  "returns": {
                    "_0": "How executing a swap for all the given pairs would look like"
                  }
                },
                "multiPermissionPermit(address,(uint256,(address,uint8[])[])[],uint256,uint8,bytes32,bytes32)": {
                  "params": {
                    "deadline": "The deadline timestamp by which the call must be mined for the approve to work",
                    "permissionManager": "The address of the permission manager",
                    "permissions": "The permissions to set",
                    "r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
                    "s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
                    "v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
                  }
                },
                "multicall(bytes[])": {
                  "params": {
                    "_data": "A list of different function calls to execute"
                  },
                  "returns": {
                    "_results": "The result of executing each of those calls"
                  }
                },
                "permissionPermit(address,(address,uint8[])[],uint256,uint256,uint8,bytes32,bytes32)": {
                  "params": {
                    "deadline": "The deadline timestamp by which the call must be mined for the approve to work",
                    "permissionManager": "The address of the permission manager",
                    "permissions": "The permissions to set",
                    "r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
                    "s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
                    "tokenId": "The token's id",
                    "v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
                  }
                },
                "permitTakeFromCaller(address,uint256,uint256,uint256,bytes,address)": {
                  "params": {
                    "_amount": "The amount to take",
                    "_deadline": "The signature's deadline",
                    "_nonce": "The signed nonce",
                    "_recipient": "The address that will receive the funds",
                    "_signature": "The owner's signature",
                    "_token": "The token to take"
                  }
                },
                "reducePosition(address,uint256,uint256,uint32,address)": {
                  "details": "Meant to be used as part of a multicall",
                  "params": {
                    "amount": "Amount of funds to withdraw from the position",
                    "hub": "The address of the DCAHub",
                    "newSwaps": "The new amount of swaps",
                    "positionId": "The position's id",
                    "recipient": "The address to send tokens to"
                  }
                },
                "runSwap(address,uint256,bytes,address)": {
                  "params": {
                    "_allowanceToken": "The token to set allowance for (can be set to zero address to ignore)",
                    "_swapData": "The swap data",
                    "_tokenOut": "The token that will be bought as part of the swap",
                    "_value": "The value to send to the swapper as part of the swap"
                  }
                },
                "secondsUntilNextSwap(address,(address,address)[],bool)": {
                  "details": "Tokens in pairs may be passed in either tokenA/tokenB or tokenB/tokenA order",
                  "params": {
                    "calculatePrivilegedAvailability": "Some accounts get privileged availability and can execute swaps before others. This flag provides        the possibility to calculate the seconds until next swap for privileged and non-privileged accounts",
                    "hub": "The address of the DCAHub",
                    "pairs": "Pairs to check"
                  },
                  "returns": {
                    "_0": "The amount of seconds until next swap for each of the pairs"
                  }
                },
                "sendBalanceOnContractToRecipient(address,address)": {
                  "params": {
                    "_recipient": "The recipient of the token balance",
                    "_token": "The token to check"
                  }
                },
                "sendToRecipient(address,uint256,address)": {
                  "params": {
                    "_amount": "The amount to transfer",
                    "_recipient": "The recipient of the token balance",
                    "_token": "The token to transfer"
                  }
                },
                "setPendingGovernor(address)": {
                  "details": "Only the current governor can execute this action",
                  "params": {
                    "pendingGovernor": "The new pending governor"
                  }
                },
                "setSwapper(address,address)": {
                  "params": {
                    "_newAllowanceTarget": "The address of the new allowance target",
                    "_newSwapper": "The address of the new swapper"
                  }
                },
                "simulate(bytes[])": {
                  "details": "This function is meant to be used for off-chain simulation and should not be called on-chain",
                  "params": {
                    "calls": "The calls to simulate"
                  },
                  "returns": {
                    "_results": "Each simulation result"
                  }
                },
                "simulateAndRevert(bytes)": {
                  "details": "This is meant to be used internally, do not call!",
                  "params": {
                    "_call": "The call to simulate"
                  }
                },
                "supportsInterface(bytes4)": {
                  "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
                },
                "takeFromCaller(address,uint256,address)": {
                  "params": {
                    "_amount": "The amount to take",
                    "_token": "The token to take"
                  }
                },
                "terminate(address,uint256,address,address)": {
                  "details": "Meant to be used as part of a multicall",
                  "params": {
                    "hub": "The address of the DCAHub",
                    "positionId": "The position's id",
                    "recipientSwapped": "The address to withdraw swapped tokens to",
                    "recipientUnswapped": "The address to withdraw unswapped tokens to"
                  },
                  "returns": {
                    "_swapped": "The swapped balance sent to `recipientSwapped`",
                    "_unswapped": "The unswapped balance sent to `recipientUnswapped`"
                  }
                },
                "withdrawSwapped(address,uint256,address)": {
                  "details": "Meant to be used as part of a multicall",
                  "params": {
                    "hub": "The address of the DCAHub",
                    "positionId": "The position's id",
                    "recipient": "The address to withdraw swapped tokens to"
                  },
                  "returns": {
                    "_swapped": "How much was withdrawn"
                  }
                },
                "withdrawSwappedMany(address,(address,uint256[])[],address)": {
                  "details": "Meant to be used as part of a multicall",
                  "params": {
                    "hub": "The address of the DCAHub",
                    "positions": "A list positions, grouped by `to` token",
                    "recipient": "The address to withdraw swapped tokens to"
                  },
                  "returns": {
                    "_withdrawn": "How much was withdrawn for each token"
                  }
                }
              },
              "version": 1
            },
            "userdoc": {
              "kind": "user",
              "methods": {
                "PERMIT2()": {
                  "notice": "Returns the address of the Permit2 contract"
                },
                "acceptPendingGovernor()": {
                  "notice": "Sets the pending governor as the governor"
                },
                "allowanceTarget()": {
                  "notice": "The address of the allowance target"
                },
                "batchPermitTakeFromCaller((address,uint256)[],uint256,uint256,bytes,address)": {
                  "notice": "Takes the a batch of tokens from the caller with Permit2 and transfers it to this contract"
                },
                "deposit(address,address,address,uint256,uint32,uint32,address,(address,uint8[])[],bytes)": {
                  "notice": "Creates a new position"
                },
                "depositWithBalanceOnContract(address,address,address,uint32,uint32,address,(address,uint8[])[],bytes)": {
                  "notice": "Creates a new position using the entire balance available on the contract"
                },
                "getNextSwapInfo(address,(address,address)[],bool,bytes)": {
                  "notice": "Takes a list of pairs and returns how it would look like to execute a swap for all of them"
                },
                "governor()": {
                  "notice": "Returns the address of the governor"
                },
                "increasePosition(address,uint256,uint256,uint32)": {
                  "notice": "Call the hub and takes the unswapped balance, adds the new deposited funds and modifies the position so that it is executed in `newSwaps` swaps"
                },
                "increasePositionWithBalanceOnContract(address,uint256,uint32)": {
                  "notice": "Call the hub and takes the unswapped balance, adds the Companion's current balance and modifies the position so that it is executed in `newSwaps` swaps"
                },
                "isGovernor(address)": {
                  "notice": "Returns whether the given account is the current governor"
                },
                "isPendingGovernor(address)": {
                  "notice": "Returns whether the given account is the pending governor"
                },
                "legacyGetNextSwapInfo(address,(address,address)[])": {
                  "notice": "Takes a list of pairs and returns how it would look like to execute a swap for all of them"
                },
                "multiPermissionPermit(address,(uint256,(address,uint8[])[])[],uint256,uint8,bytes32,bytes32)": {
                  "notice": "Calls the permission manager and sets multiple permissions via signature"
                },
                "multicall(bytes[])": {
                  "notice": "Receives and executes a batch of function calls on this contract."
                },
                "pendingGovernor()": {
                  "notice": "Returns the address of the pending governor"
                },
                "permissionPermit(address,(address,uint8[])[],uint256,uint256,uint8,bytes32,bytes32)": {
                  "notice": "Calls the permission manager and sets permissions via signature"
                },
                "permitTakeFromCaller(address,uint256,uint256,uint256,bytes,address)": {
                  "notice": "Takes the given amount of tokens from the caller with Permit2 and transfers it to this contract"
                },
                "reducePosition(address,uint256,uint256,uint32,address)": {
                  "notice": "Call the hub and withdraws the specified amount from the unswapped balance and modifies the position so that it is executed in newSwaps swaps"
                },
                "runSwap(address,uint256,bytes,address)": {
                  "notice": "Executes a swap against the swapper"
                },
                "secondsUntilNextSwap(address,(address,address)[],bool)": {
                  "notice": "Returns how many seconds left until the next swap is available for a list of pairs"
                },
                "sendBalanceOnContractToRecipient(address,address)": {
                  "notice": "Checks if the contract has any balance of the given token, and if it does,         it sends it to the given recipient"
                },
                "sendToRecipient(address,uint256,address)": {
                  "notice": "Sends the specified amount of the given token to the recipient"
                },
                "setPendingGovernor(address)": {
                  "notice": "Sets a new pending governor"
                },
                "setSwapper(address,address)": {
                  "notice": "Sets a new swapper and allowance target"
                },
                "simulate(bytes[])": {
                  "notice": "Executes individual simulations against this contract but doesn't modify the state when doing so"
                },
                "simulateAndRevert(bytes)": {
                  "notice": "Executes a call agains this contract and reverts with the result"
                },
                "swapper()": {
                  "notice": "The address of the swapper"
                },
                "takeFromCaller(address,uint256,address)": {
                  "notice": "Takes the given amount of tokens from the caller and transfers it to this contract"
                },
                "terminate(address,uint256,address,address)": {
                  "notice": "Calls the hub and terminates the position and sends all unswapped and swapped balance to the specified recipients"
                },
                "withdrawSwapped(address,uint256,address)": {
                  "notice": "Call the hub and withdraws all swapped tokens from a position to a recipient"
                },
                "withdrawSwappedMany(address,(address,uint256[])[],address)": {
                  "notice": "Call the hub and withdraws all swapped tokens from multiple positions"
                }
              },
              "version": 1
            }
          },
          "settings": {
            "remappings": [
              "@api3/=node_modules/@api3/",
              "@call-simulation/=node_modules/@mean-finance/call-simulation/src/",
              "@chainlink/=node_modules/@chainlink/",
              "@mean-finance/call-simulation/contracts/=node_modules/@mean-finance/call-simulation/src/",
              "@mean-finance/dca-v2-core/=node_modules/@mean-finance/dca-v2-core/",
              "@mean-finance/dca-v2-periphery/=node_modules/@mean-finance/dca-v2-periphery/",
              "@mean-finance/nft-descriptors/=node_modules/@mean-finance/nft-descriptors/",
              "@mean-finance/oracles/=node_modules/@mean-finance/oracles/",
              "@mean-finance/permit2-adapter/=node_modules/@mean-finance/permit2-adapter/src/",
              "@mean-finance/swappers/=node_modules/@mean-finance/swappers/",
              "@mean-finance/transformers/=node_modules/@mean-finance/transformers/solidity/contracts/transformers/",
              "@mean-finance/uniswap-v3-oracle/=node_modules/@mean-finance/uniswap-v3-oracle/",
              "@openzeppelin/contracts/=node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/",
              "@rari-capital/solmate/=lib/solmate/",
              "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
              "@uniswap/=node_modules/@uniswap/",
              "base64-sol/=node_modules/base64-sol/",
              "ds-test/=lib/solmate/lib/ds-test/src/",
              "forge-std/=lib/forge-std/src/",
              "keep3r-v2/=node_modules/keep3r-v2/",
              "solmate/=lib/solmate/src/",
              "sphinx/=lib/sphinx/packages/contracts/contracts/forge-std/src/"
            ],
            "optimizer": {
              "enabled": true,
              "runs": 9999
            },
            "metadata": {
              "bytecodeHash": "none",
              "appendCBOR": false
            },
            "compilationTarget": {
              "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol": "DCAHubCompanion"
            },
            "evmVersion": "paris",
            "libraries": {}
          },
          "sources": {
            "node_modules/@mean-finance/call-simulation/src/SimulationAdapter.sol": {
              "keccak256": "0xe148a0031bdddc2f2d6e8b90acef9e42eccdbac40b74d210ba83c1ea8471103a",
              "urls": [
                "bzz-raw://c65631b71f70a8159f7a53faec43b21116067445c86766a6c7dff15042776f4f",
                "dweb:/ipfs/QmfCKoTS9GxEpKKiP9oXPE7Dj2MvAfBsyiuag5jvUwc8w8"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/call-simulation/src/interfaces/ISimulationAdapter.sol": {
              "keccak256": "0x1924d3306a793153b7b67d613b5e558559cd5801ff199c54945cd1c89c6b19e3",
              "urls": [
                "bzz-raw://3cec285dc59df82aab5e85865b1f4b4772647885d0b2635cf60345a452199c02",
                "dweb:/ipfs/QmasEgnHLMivVwohrPagsbsVji9wDy3e7mR1w5gHTrSsnb"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/call-simulation/src/interfaces/external/IERC165.sol": {
              "keccak256": "0x1c1214332a0ed674c34d41245d9411f59edf0522247cfa019e40724e79df1f4a",
              "urls": [
                "bzz-raw://8feaf90201d5e8eb2ae015568c7e1c4c52034b1d484f8af9356a18a94f4fc1e5",
                "dweb:/ipfs/QmUjZV5DSzcrsxxvQm58av7kxmqSmiNet2ghk9A6Jdq4ws"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol": {
              "keccak256": "0x4863e91434fa2bca89e8ff16bc35743103a89a39cfc8f9bb963d62fc430f3966",
              "urls": [
                "bzz-raw://3221e1acaa8a23c25c1d9dd984c7ffc83157b8ab9237cacc33a4559c0fac3c10",
                "dweb:/ipfs/QmeU25s3LdTCtqqr5jQbb1GwjAtR9jUhRaFhc4ginNy8dJ"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol": {
              "keccak256": "0x90b20be7552797f8967baa8228b3dfff60e129fa0ec4cf32e136ad0ffeb79f16",
              "urls": [
                "bzz-raw://ee317daf81e257a535ff79ef22349562c9dd4eb786ac5732ea15a1acd122b79e",
                "dweb:/ipfs/QmZaYuijMRck14WUDtQZjKcymdusiwBoo8xNSocwqH7tpL"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/libraries/Intervals.sol": {
              "keccak256": "0x120b71d302deab59200d8eeaa1a29c7648e2340f125d58810e119614bad3ebb7",
              "urls": [
                "bzz-raw://196bb4b5ddff3a7519fb5e6f3edbc844d3ff9c79aee4ba76cd546d459058272d",
                "dweb:/ipfs/Qmc45JhzuXD9R1oE83uzw2Z6oeLDXX7L9We5TY2pvSeihj"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/libraries/TokenSorting.sol": {
              "keccak256": "0xe087aec6da5b5ccf145a432a5155e338cd847910599562909d04b0116a233473",
              "urls": [
                "bzz-raw://cb817baaef4ba1bddc584300669d1d661f7aa428050a5253a8c2b92901dd8999",
                "dweb:/ipfs/QmWZmKUsGViv1qLeBev9V18SWT2cKbuo2VTf2PHHCxdDkG"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol": {
              "keccak256": "0xd449a7c45477b3a6fad26fe582e3f9fc3526fd90ad71b9b283e5f4868a64c8f1",
              "urls": [
                "bzz-raw://0e113f9a7971e51baf4d618f84e0c3e231f18a1eeee332669adc5b50e99a73c1",
                "dweb:/ipfs/QmSWg6W9fwnDPYuzW6fXmE89kGf9xNJyVaPu82HRpjNMoa"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanionHubProxyHandler.sol": {
              "keccak256": "0x24cfb57e2f61b7aabc1b8f8ca80efda9d4e81bd30b15b1f2ff5ff885c5f785e0",
              "urls": [
                "bzz-raw://51a039fda1c4c682ac4ee74f203bd1759811132f375a8fa28de30031dbc6f6d9",
                "dweb:/ipfs/QmQmvAoSMctZSUbm8M4UP13S6Z5sFtQEBD6XL7dL292itK"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanionLibrariesHandler.sol": {
              "keccak256": "0x7e7768be8dfb86d228c714de21cdb6de027f9e506b520c36cb589014d606a7f7",
              "urls": [
                "bzz-raw://045351c20a834cef1a85f33d54729f33ab1683d97fd4001f6166ac91af1c96e9",
                "dweb:/ipfs/QmV7Y82mgaayZ4q4jjBVFEwmukCkS3CgLuosmww7kLccTm"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAHubCompanion.sol": {
              "keccak256": "0x5af30010bc1d9e474c9a68f85759778d7ecf40f3dcba9cf7819c22d39722ec55",
              "urls": [
                "bzz-raw://18d792faf08c4a33cee8e37d899137642b6f9d1f3ac9ad1774828aac44109f03",
                "dweb:/ipfs/QmbUsZrtcxXpFTqiD87XG9dg6JB7MGJbpZc9KHbhALuVHY"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ILegacyDCAHub.sol": {
              "keccak256": "0xc9b30e17caf9ccf392bebb263240d703461f6c9d0729e4ef571da5f3ebcd1ec0",
              "urls": [
                "bzz-raw://3366c919db23c4d779b11572a24e527a02b1af370cdfb0f4d53d629490428bb4",
                "dweb:/ipfs/QmUeAoSP28W7MSXQMpwBoAuJckEbpwKD7pn42NsxSpXTXq"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/ISharedTypes.sol": {
              "keccak256": "0x61ade7787c51b35fd28ec036385d3cf8dc5bf0dfd010b376a5f154b39728b71c",
              "urls": [
                "bzz-raw://6e83bdd6165931b6d0744618ede1739bb68479daf8dcdf4d5fa2f2a22d531bbf",
                "dweb:/ipfs/QmYCLHJ26tFmNev3nbYmtXFwCnUHCDhvKgYDChvx1GFRVh"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/external/IPermit2.sol": {
              "keccak256": "0x842f8f6ece08068bc312053fc434857aaff66c54cd39b47ee9f349d285485aa1",
              "urls": [
                "bzz-raw://8919f9b9df800bf165c5fa0e136657a782efb0288594bf169b2fad8bc8b0ead0",
                "dweb:/ipfs/QmSH1i46pmtd7g161fVUQ5chU862wWjsBvTGucE3RqoN4k"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/InputBuilding.sol": {
              "keccak256": "0x4b7043953a2f1344e1aeecff954ecf9eb2a947210d84860df4d9601e4bdb8c02",
              "urls": [
                "bzz-raw://4484ca53d289916edf6508f99a1f6df4b8d4bebb2d805326f6a0bd859eac1f30",
                "dweb:/ipfs/QmVb1S18RuyYKXRv6sQmP6whoj3aXN3DPmra5YE68bQpaB"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/Permit2Transfers.sol": {
              "keccak256": "0x5745e43a174db4ca03130885de453f1730e01f712a1e36392671521acfa58236",
              "urls": [
                "bzz-raw://c2c0071a5df8be1b82099de7f16c0da89f1ebf42747a8d97f2fcc160510d24c3",
                "dweb:/ipfs/QmfB413tYaTC8jNuTsHKXhnWeSvgAxwQdvFBqinAE1MoeY"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/libraries/SecondsUntilNextSwap.sol": {
              "keccak256": "0x263b776f7977bf4180ffea6a11b7ffc22896131427ecf4556032a109b4438a24",
              "urls": [
                "bzz-raw://d3733281b1f356ebd5ca8f999ae39a2756634e438ed3e5e179528d9ddf1d4349",
                "dweb:/ipfs/QmStxi1QoFpqvsc3SiHvZiuaUc2w2r3AewqJbiGaoZBeJq"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/BaseCompanion.sol": {
              "keccak256": "0x5d27a23048891ae4fc3ac074b144999d71cd6a74084fa86ed4721146ec3c28e0",
              "urls": [
                "bzz-raw://a9bf8d5cf455da324a506a76837918e1475b866f36ccd81a324e124691a4a7ad",
                "dweb:/ipfs/QmeWpTvqUN92ZS2aSCCAz91ZB25wFU86mGrxUaXHZbbux2"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/Governable.sol": {
              "keccak256": "0x0f495cbf30d45185eb4ce12ee2941dad1b311907620ed2109b42dc7081af4a70",
              "urls": [
                "bzz-raw://01f9ec0b4bd933acbc2535862d6cbdcf2ff60175ed9a61b14ab421e417f37b4c",
                "dweb:/ipfs/QmebemGR3wjXj6EZcofrPhbqNxSMKB3AHETMqjxU9ardqX"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/PayableMulticall.sol": {
              "keccak256": "0x2f5d910f9ac8874934a869e450a4c1dc9651c9fec979fffc35b9140d850246e1",
              "urls": [
                "bzz-raw://56659d81f2798bb4f5d82ddaff8f155fcccb61add2ea449fde5378bb3fb20f39",
                "dweb:/ipfs/QmecdiPpG5BvahD7xPKRRGMU6FkWkyZP4zAhXmTYGKNNvH"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/SwapAdapter.sol": {
              "keccak256": "0xfab9c7c666c73fbc396f20d6c232fda30f2472f56d8cf0db771901bf27d18e80",
              "urls": [
                "bzz-raw://8dc7b71f19cbe88f3b1281571df3428108c894cb83034b4dd0ee8bab6c7005b7",
                "dweb:/ipfs/Qmen6tm11BFYeU2Hh6FT34e4PUyHJRcRq5aDt3CToNazGE"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/interfaces/IGovernable.sol": {
              "keccak256": "0x1a3cf19b05fc4fa872c60f633ea66a3b85f4a1de9a79aeb5b1aa7ca76adc4b37",
              "urls": [
                "bzz-raw://af4bded6e40f77300b0a646e0974440e2527ef67298c1d171593aa060736a2bf",
                "dweb:/ipfs/QmNnE7xmvDh9feTMeZZXwXW1UyRP2ZKgKu59AwuWg1Bk2n"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
              "keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
              "urls": [
                "bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
                "dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
              "keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
              "urls": [
                "bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
                "dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
              "keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
              "urls": [
                "bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
                "dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
              "keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
              "urls": [
                "bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
                "dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
              "keccak256": "0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4",
              "urls": [
                "bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7",
                "dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Address.sol": {
              "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
              "urls": [
                "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
                "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
              "keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
              "urls": [
                "bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
                "dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol": {
              "keccak256": "0x2f5b3f67cf9f0f23be3eb0a8c8edd953ded1dcd8bf074a27e8d2869e200b0a73",
              "urls": [
                "bzz-raw://a7d71a7362006661db2c7f41c174607a8ddf86ab8b571925825d6c743373998c",
                "dweb:/ipfs/QmWnnLDXoEP5qDhnS18ktfZ2yGWLbCPoMCpt7S6HYTYzJN"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol": {
              "keccak256": "0xaa43e406144c5108a7f1ac330c434121f4acb7b50b6530dba4e205d2db520a0d",
              "urls": [
                "bzz-raw://4cda4fe659c15f32ff2f031905519bb8c59aa84fd5573ea25a331c09759ad86c",
                "dweb:/ipfs/QmRKjZiaYXXusZcL7wowKXTCXwfxU8Xv5RjWok4JxGH9xG"
              ],
              "license": "GPL-2.0-or-later"
            }
          },
          "version": 1
        },
        "methodIdentifiers": {
          "PERMIT2()": "6afdd850",
          "PROTOCOL_TOKEN()": "585cc6a5",
          "acceptPendingGovernor()": "13f6986d",
          "allowanceTarget()": "910cab11",
          "batchPermitTakeFromCaller((address,uint256)[],uint256,uint256,bytes,address)": "62b850c7",
          "deposit(address,address,address,uint256,uint32,uint32,address,(address,uint8[])[],bytes)": "fa0c9555",
          "depositWithBalanceOnContract(address,address,address,uint32,uint32,address,(address,uint8[])[],bytes)": "89352328",
          "getNextSwapInfo(address,(address,address)[],bool,bytes)": "484b3577",
          "governor()": "0c340a24",
          "increasePosition(address,uint256,uint256,uint32)": "05ce20d6",
          "increasePositionWithBalanceOnContract(address,uint256,uint32)": "40c5710c",
          "isGovernor(address)": "e43581b8",
          "isPendingGovernor(address)": "df08aed5",
          "legacyGetNextSwapInfo(address,(address,address)[])": "5684c275",
          "multiPermissionPermit(address,(uint256,(address,uint8[])[])[],uint256,uint8,bytes32,bytes32)": "62dd9af3",
          "multicall(bytes[])": "ac9650d8",
          "pendingGovernor()": "e3056a34",
          "permissionPermit(address,(address,uint8[])[],uint256,uint256,uint8,bytes32,bytes32)": "1f8b479d",
          "permitTakeFromCaller(address,uint256,uint256,uint256,bytes,address)": "d9a673ef",
          "reducePosition(address,uint256,uint256,uint32,address)": "db8266de",
          "runSwap(address,uint256,bytes,address)": "a669a7f6",
          "secondsUntilNextSwap(address,(address,address)[],bool)": "bb2871a5",
          "sendBalanceOnContractToRecipient(address,address)": "340b532f",
          "sendToRecipient(address,uint256,address)": "3a79d674",
          "setPendingGovernor(address)": "f235757f",
          "setSwapper(address,address)": "effca705",
          "simulate(bytes[])": "3ed242b4",
          "simulateAndRevert(bytes)": "bcbef206",
          "supportsInterface(bytes4)": "01ffc9a7",
          "swapper()": "2b3297f9",
          "takeFromCaller(address,uint256,address)": "37b0c09d",
          "terminate(address,uint256,address,address)": "5f963dcf",
          "withdrawSwapped(address,uint256,address)": "1f66925c",
          "withdrawSwappedMany(address,(address,uint256[])[],address)": "35ac2a50"
        },
        "storageLayout": {
          "storage": [
            {
              "astId": 6272,
              "contract": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol:DCAHubCompanion",
              "label": "governor",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 6275,
              "contract": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol:DCAHubCompanion",
              "label": "pendingGovernor",
              "offset": 0,
              "slot": "1",
              "type": "t_address"
            },
            {
              "astId": 6037,
              "contract": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol:DCAHubCompanion",
              "label": "swapper",
              "offset": 0,
              "slot": "2",
              "type": "t_address"
            },
            {
              "astId": 6040,
              "contract": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubCompanion/DCAHubCompanion.sol:DCAHubCompanion",
              "label": "allowanceTarget",
              "offset": 0,
              "slot": "3",
              "type": "t_address"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            }
          }
        },
        "linkReferences": {},
        "deployedLinkReferences": {}
      },
      "buildInfoId": "25dc9d3d421f903049c2209282739291"
    },
    "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/ThirdPartyDCAHubSwapper.sol:ThirdPartyDCAHubSwapper": {
      "artifact": {
        "abi": [
          {
            "type": "function",
            "name": "DCAHubSwapCall",
            "inputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_tokens",
                "type": "tuple[]",
                "internalType": "struct IDCAHubSwapHandler.TokenInSwap[]",
                "components": [
                  {
                    "name": "token",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "reward",
                    "type": "uint256",
                    "internalType": "uint256"
                  },
                  {
                    "name": "toProvide",
                    "type": "uint256",
                    "internalType": "uint256"
                  },
                  {
                    "name": "platformFee",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              },
              {
                "name": "",
                "type": "uint256[]",
                "internalType": "uint256[]"
              },
              {
                "name": "_data",
                "type": "bytes",
                "internalType": "bytes"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "PRIVILEGED_SWAPPER_ROLE",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "executeSwap",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHubWithAccessControl"
              },
              {
                "name": "_tokens",
                "type": "address[]",
                "internalType": "address[]"
              },
              {
                "name": "_pairsToSwap",
                "type": "tuple[]",
                "internalType": "struct IDCAHubSwapHandler.PairIndexes[]",
                "components": [
                  {
                    "name": "indexTokenA",
                    "type": "uint8",
                    "internalType": "uint8"
                  },
                  {
                    "name": "indexTokenB",
                    "type": "uint8",
                    "internalType": "uint8"
                  }
                ]
              },
              {
                "name": "_borrow",
                "type": "uint256[]",
                "internalType": "uint256[]"
              },
              {
                "name": "_callbackData",
                "type": "bytes",
                "internalType": "bytes"
              },
              {
                "name": "_oracleData",
                "type": "bytes",
                "internalType": "bytes"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
              {
                "name": "target",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
              {
                "name": "account",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "FailedInnerCall",
            "inputs": []
          },
          {
            "type": "error",
            "name": "NotPrivilegedSwapper",
            "inputs": []
          },
          {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "SwapResults",
            "inputs": [
              {
                "name": "amounts",
                "type": "tuple[]",
                "internalType": "struct ThirdPartyDCAHubSwapper.AmountOfToken[]",
                "components": [
                  {
                    "name": "token",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ]
          },
          {
            "type": "error",
            "name": "TransactionTooOld",
            "inputs": []
          }
        ],
        "bytecode": "0x608060405234801561001057600080fd5b50611ab5806100206000396000f3fe6080604052600436106100345760003560e01c80635817c99e14610039578063648573701461005b578063d6347c1b146100a1575b600080fd5b34801561004557600080fd5b50610059610054366004610e6e565b6100b4565b005b34801561006757600080fd5b5061008f7f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f481565b60405190815260200160405180910390f35b6100596100af366004610f91565b61015d565b60006100c282840184611470565b90508060200151421115610102576040517fa83116fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010f8160400151610322565b61011c81606001516103ac565b8051156101325761013287878360800151610417565b61014187878360a001516106ed565b61015381608001518260a00151610840565b5050505050505050565b6040517f91d148540000000000000000000000000000000000000000000000000000000081527f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f4600482015233602482015273ffffffffffffffffffffffffffffffffffffffff8c16906391d1485490604401602060405180830381865afa1580156101ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102119190611551565b610247576040517f1171cc3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb39461e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c169063b39461e5906102af908d908d908d908d90309081908f908f908f908f908f908f9060040161166a565b6000604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103149190810190611858565b505050505050505050505050565b60005b81518110156103a857600082828151811061034257610342611982565b6020026020010151905061039f81602001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836000015173ffffffffffffffffffffffffffffffffffffffff166109549092919063ffffffff16565b50600101610325565b5050565b60005b81518110156103a85760008282815181106103cc576103cc611982565b6020026020010151905061040d81604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16610a6f9092919063ffffffff16565b50506001016103af565b805160009061042690846119b1565b67ffffffffffffffff81111561043e5761043e611098565b60405190808252806020026020018201604052801561048357816020015b604080518082019091526000808252602082015281526020019060019003908161045c5790505b50905060005b838110156105865760008585838181106104a5576104a5611982565b6104bb92602060809092020190810191506119eb565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff831680825291517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152929350916020830191906370a0823190602401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611a08565b81525083838151811061057257610572611982565b602090810291909101015250600101610489565b5060005b82518110156106af5760405180604001604052808483815181106105b0576105b0611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018483815181106105e5576105e5611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190611a08565b90528261068c86846119b1565b8151811061069c5761069c611982565b602090810291909101015260010161058a565b50806040517fac2836d80000000000000000000000000000000000000000000000000000000081526004016106e49190611a21565b60405180910390fd5b60005b8281101561083a57600084848381811061070c5761070c611982565b61072292602060809092020190810191506119eb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611a08565b905080156108305760008686858181106107d2576107d2611982565b905060800201604001359050600081111561080d5761080873ffffffffffffffffffffffffffffffffffffffff84163384610b34565b61082e565b61082e73ffffffffffffffffffffffffffffffffffffffff84168684610b34565b505b50506001016106f0565b50505050565b60005b825181101561094f57600083828151811061086057610860611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190611a08565b9050801561094657610946838286858151811061091957610919611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610b349092919063ffffffff16565b50600101610843565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526109e08482610b72565b61083a5760405173ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152610a6591869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c36565b61083a8482610c36565b606081471015610aad576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016106e4565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051610ad69190611a86565b60006040518083038185875af1925050503d8060008114610b13576040519150601f19603f3d011682016040523d82523d6000602084013e610b18565b606091505b5091509150610b28868383610ccc565b925050505b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261094f91859182169063a9059cbb90606401610a1e565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051610b9c9190611a86565b6000604051808303816000865af19150503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5091509150818015610c08575080511580610c08575080806020019051810190610c089190611551565b8015610c2b575060008573ffffffffffffffffffffffffffffffffffffffff163b115b925050505b92915050565b6000610c5873ffffffffffffffffffffffffffffffffffffffff841683610d5b565b90508051600014158015610c7d575080806020019051810190610c7b9190611551565b155b1561094f576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106e4565b606082610ce157610cdc82610d69565b610b2d565b8151158015610d05575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610d54576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016106e4565b5080610b2d565b6060610b2d83836000610a6f565b805115610d795780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114610dab57600080fd5b8035610ddb81610dae565b919050565b60008083601f840112610df257600080fd5b50813567ffffffffffffffff811115610e0a57600080fd5b6020830191508360208260051b8501011115610e2557600080fd5b9250929050565b60008083601f840112610e3e57600080fd5b50813567ffffffffffffffff811115610e5657600080fd5b602083019150836020828501011115610e2557600080fd5b60008060008060008060006080888a031215610e8957600080fd5b8735610e9481610dae565b9650602088013567ffffffffffffffff80821115610eb157600080fd5b818a0191508a601f830112610ec557600080fd5b813581811115610ed457600080fd5b8b60208260071b8501011115610ee957600080fd5b6020830198508097505060408a0135915080821115610f0757600080fd5b610f138b838c01610de0565b909650945060608a0135915080821115610f2c57600080fd5b50610f398a828b01610e2c565b989b979a50959850939692959293505050565b60008083601f840112610f5e57600080fd5b50813567ffffffffffffffff811115610f7657600080fd5b6020830191508360208260061b8501011115610e2557600080fd5b600080600080600080600080600080600060c08c8e031215610fb257600080fd5b610fbb8c610dd0565b9a5067ffffffffffffffff8060208e01351115610fd757600080fd5b610fe78e60208f01358f01610de0565b909b50995060408d0135811015610ffd57600080fd5b61100d8e60408f01358f01610f4c565b909950975060608d013581101561102357600080fd5b6110338e60608f01358f01610de0565b909750955060808d013581101561104957600080fd5b6110598e60808f01358f01610e2c565b909550935060a08d013581101561106f57600080fd5b506110808d60a08e01358e01610e2c565b81935080925050509295989b509295989b9093969950565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156110ea576110ea611098565b60405290565b6040516060810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160c0810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160e0810167ffffffffffffffff811182821017156110ea576110ea611098565b6040516080810167ffffffffffffffff811182821017156110ea576110ea611098565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156111c3576111c3611098565b604052919050565b8015158114610dab57600080fd5b8035610ddb816111cb565b600067ffffffffffffffff8211156111fe576111fe611098565b5060051b60200190565b600082601f83011261121957600080fd5b8135602061122e611229836111e4565b61117c565b82815260069290921b8401810191818101908684111561124d57600080fd5b8286015b8481101561129e576040818903121561126a5760008081fd5b6112726110c7565b813561127d81610dae565b81528185013561128c81610dae565b81860152835291830191604001611251565b509695505050505050565b6000601f83601f8401126112bc57600080fd5b823560206112cc611229836111e4565b82815260059290921b850181019181810190878411156112eb57600080fd5b8287015b848110156113fc57803567ffffffffffffffff808211156113105760008081fd5b818a01915060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08181858f0301121561134a5760008081fd5b6113526110f0565b8885013561135f81610dae565b81526040858101358a83015292850135928484111561137e5760008081fd5b83860195508e603f87011261139557600093508384fd5b898601359350848411156113ab576113ab611098565b6113ba8a848e8701160161117c565b94508385528e818588010111156113d357600092508283fd5b838187018b87013760009385018a019390935291820192909252855250509183019183016112ef565b50979650505050505050565b600082601f83011261141957600080fd5b81356020611429611229836111e4565b8083825260208201915060208460051b87010193508684111561144b57600080fd5b602086015b8481101561129e57803561146381610dae565b8352918301918301611450565b60006020828403121561148257600080fd5b813567ffffffffffffffff8082111561149a57600080fd5b9083019060c082860312156114ae57600080fd5b6114b6611113565b6114bf836111d9565b8152602083013560208201526040830135828111156114dd57600080fd5b6114e987828601611208565b60408301525060608301358281111561150157600080fd5b61150d878286016112a9565b60608301525060808301358281111561152557600080fd5b61153187828601611408565b60808301525061154360a08401610dd0565b60a082015295945050505050565b60006020828403121561156357600080fd5b8151610b2d816111cb565b803560ff81168114610ddb57600080fd5b8183526000602080850194508260005b858110156115cb5760ff806115a38461156e565b168852806115b285850161156e565b168885015250604096870196919091019060010161158f565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561160857600080fd5b8260051b80836020870137939093016020019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60e080825281018c9052600061010082018e825b8f8110156116bc576116908235610dae565b813573ffffffffffffffffffffffffffffffffffffffff1683526020928301929091019060010161167e565b505082810360208401526116d1818d8f61157f565b73ffffffffffffffffffffffffffffffffffffffff8c166040850152905073ffffffffffffffffffffffffffffffffffffffff8a166060840152828103608084015261171e81898b6115d6565b905082810360a0840152611733818789611621565b905082810360c0840152611748818587611621565b9f9e505050505050505050505050505050565b600082601f83011261176c57600080fd5b8151602061177c611229836111e4565b82815260e0928302850182019282820191908785111561179b57600080fd5b8387015b8581101561184b5781818a0312156117b75760008081fd5b6117bf611136565b81516117ca81610dae565b8152818601516117d981610dae565b8187015260408281015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301517fff000000000000000000000000000000000000000000000000000000000000008116811461183a5760008081fd5b90820152845292840192810161179f565b5090979650505050505050565b6000602080838503121561186b57600080fd5b825167ffffffffffffffff8082111561188357600080fd5b8185019150604080838803121561189957600080fd5b6118a16110c7565b8351838111156118b057600080fd5b8401601f810189136118c157600080fd5b80516118cf611229826111e4565b81815260079190911b8201870190878101908b8311156118ee57600080fd5b928801925b8284101561194c576080848d03121561190c5760008081fd5b611914611159565b845161191f81610dae565b8152848a01518a8201528685015187820152606080860151908201528252608090930192908801906118f3565b84525050508385015191508282111561196457600080fd5b6119708883860161175b565b85820152809550505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610c30577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000602082840312156119fd57600080fd5b8135610b2d81610dae565b600060208284031215611a1a57600080fd5b5051919050565b602080825282518282018190526000919060409081850190868401855b82811015611a79578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611a3e565b5091979650505050505050565b6000825160005b81811015611aa75760208186018101518583015201611a8d565b50600092019182525091905056",
        "sourceName": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/ThirdPartyDCAHubSwapper.sol",
        "contractName": "ThirdPartyDCAHubSwapper",
        "deployedBytecode": "0x6080604052600436106100345760003560e01c80635817c99e14610039578063648573701461005b578063d6347c1b146100a1575b600080fd5b34801561004557600080fd5b50610059610054366004610e6e565b6100b4565b005b34801561006757600080fd5b5061008f7f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f481565b60405190815260200160405180910390f35b6100596100af366004610f91565b61015d565b60006100c282840184611470565b90508060200151421115610102576040517fa83116fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010f8160400151610322565b61011c81606001516103ac565b8051156101325761013287878360800151610417565b61014187878360a001516106ed565b61015381608001518260a00151610840565b5050505050505050565b6040517f91d148540000000000000000000000000000000000000000000000000000000081527f052bd61fb293c90e13fa32c291e2dcb25630630baf169861d2a103dfe65025f4600482015233602482015273ffffffffffffffffffffffffffffffffffffffff8c16906391d1485490604401602060405180830381865afa1580156101ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102119190611551565b610247576040517f1171cc3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fb39461e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c169063b39461e5906102af908d908d908d908d90309081908f908f908f908f908f908f9060040161166a565b6000604051808303816000875af11580156102ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103149190810190611858565b505050505050505050505050565b60005b81518110156103a857600082828151811061034257610342611982565b6020026020010151905061039f81602001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836000015173ffffffffffffffffffffffffffffffffffffffff166109549092919063ffffffff16565b50600101610325565b5050565b60005b81518110156103a85760008282815181106103cc576103cc611982565b6020026020010151905061040d81604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16610a6f9092919063ffffffff16565b50506001016103af565b805160009061042690846119b1565b67ffffffffffffffff81111561043e5761043e611098565b60405190808252806020026020018201604052801561048357816020015b604080518082019091526000808252602082015281526020019060019003908161045c5790505b50905060005b838110156105865760008585838181106104a5576104a5611982565b6104bb92602060809092020190810191506119eb565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff831680825291517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152929350916020830191906370a0823190602401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611a08565b81525083838151811061057257610572611982565b602090810291909101015250600101610489565b5060005b82518110156106af5760405180604001604052808483815181106105b0576105b0611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018483815181106105e5576105e5611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561065b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f9190611a08565b90528261068c86846119b1565b8151811061069c5761069c611982565b602090810291909101015260010161058a565b50806040517fac2836d80000000000000000000000000000000000000000000000000000000081526004016106e49190611a21565b60405180910390fd5b60005b8281101561083a57600084848381811061070c5761070c611982565b61072292602060809092020190810191506119eb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611a08565b905080156108305760008686858181106107d2576107d2611982565b905060800201604001359050600081111561080d5761080873ffffffffffffffffffffffffffffffffffffffff84163384610b34565b61082e565b61082e73ffffffffffffffffffffffffffffffffffffffff84168684610b34565b505b50506001016106f0565b50505050565b60005b825181101561094f57600083828151811061086057610860611982565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190611a08565b9050801561094657610946838286858151811061091957610919611982565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610b349092919063ffffffff16565b50600101610843565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526109e08482610b72565b61083a5760405173ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152610a6591869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c36565b61083a8482610c36565b606081471015610aad576040517fcd7860590000000000000000000000000000000000000000000000000000000081523060048201526024016106e4565b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051610ad69190611a86565b60006040518083038185875af1925050503d8060008114610b13576040519150601f19603f3d011682016040523d82523d6000602084013e610b18565b606091505b5091509150610b28868383610ccc565b925050505b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261094f91859182169063a9059cbb90606401610a1e565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051610b9c9190611a86565b6000604051808303816000865af19150503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5091509150818015610c08575080511580610c08575080806020019051810190610c089190611551565b8015610c2b575060008573ffffffffffffffffffffffffffffffffffffffff163b115b925050505b92915050565b6000610c5873ffffffffffffffffffffffffffffffffffffffff841683610d5b565b90508051600014158015610c7d575080806020019051810190610c7b9190611551565b155b1561094f576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106e4565b606082610ce157610cdc82610d69565b610b2d565b8151158015610d05575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610d54576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016106e4565b5080610b2d565b6060610b2d83836000610a6f565b805115610d795780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114610dab57600080fd5b8035610ddb81610dae565b919050565b60008083601f840112610df257600080fd5b50813567ffffffffffffffff811115610e0a57600080fd5b6020830191508360208260051b8501011115610e2557600080fd5b9250929050565b60008083601f840112610e3e57600080fd5b50813567ffffffffffffffff811115610e5657600080fd5b602083019150836020828501011115610e2557600080fd5b60008060008060008060006080888a031215610e8957600080fd5b8735610e9481610dae565b9650602088013567ffffffffffffffff80821115610eb157600080fd5b818a0191508a601f830112610ec557600080fd5b813581811115610ed457600080fd5b8b60208260071b8501011115610ee957600080fd5b6020830198508097505060408a0135915080821115610f0757600080fd5b610f138b838c01610de0565b909650945060608a0135915080821115610f2c57600080fd5b50610f398a828b01610e2c565b989b979a50959850939692959293505050565b60008083601f840112610f5e57600080fd5b50813567ffffffffffffffff811115610f7657600080fd5b6020830191508360208260061b8501011115610e2557600080fd5b600080600080600080600080600080600060c08c8e031215610fb257600080fd5b610fbb8c610dd0565b9a5067ffffffffffffffff8060208e01351115610fd757600080fd5b610fe78e60208f01358f01610de0565b909b50995060408d0135811015610ffd57600080fd5b61100d8e60408f01358f01610f4c565b909950975060608d013581101561102357600080fd5b6110338e60608f01358f01610de0565b909750955060808d013581101561104957600080fd5b6110598e60808f01358f01610e2c565b909550935060a08d013581101561106f57600080fd5b506110808d60a08e01358e01610e2c565b81935080925050509295989b509295989b9093969950565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156110ea576110ea611098565b60405290565b6040516060810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160c0810167ffffffffffffffff811182821017156110ea576110ea611098565b60405160e0810167ffffffffffffffff811182821017156110ea576110ea611098565b6040516080810167ffffffffffffffff811182821017156110ea576110ea611098565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156111c3576111c3611098565b604052919050565b8015158114610dab57600080fd5b8035610ddb816111cb565b600067ffffffffffffffff8211156111fe576111fe611098565b5060051b60200190565b600082601f83011261121957600080fd5b8135602061122e611229836111e4565b61117c565b82815260069290921b8401810191818101908684111561124d57600080fd5b8286015b8481101561129e576040818903121561126a5760008081fd5b6112726110c7565b813561127d81610dae565b81528185013561128c81610dae565b81860152835291830191604001611251565b509695505050505050565b6000601f83601f8401126112bc57600080fd5b823560206112cc611229836111e4565b82815260059290921b850181019181810190878411156112eb57600080fd5b8287015b848110156113fc57803567ffffffffffffffff808211156113105760008081fd5b818a01915060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08181858f0301121561134a5760008081fd5b6113526110f0565b8885013561135f81610dae565b81526040858101358a83015292850135928484111561137e5760008081fd5b83860195508e603f87011261139557600093508384fd5b898601359350848411156113ab576113ab611098565b6113ba8a848e8701160161117c565b94508385528e818588010111156113d357600092508283fd5b838187018b87013760009385018a019390935291820192909252855250509183019183016112ef565b50979650505050505050565b600082601f83011261141957600080fd5b81356020611429611229836111e4565b8083825260208201915060208460051b87010193508684111561144b57600080fd5b602086015b8481101561129e57803561146381610dae565b8352918301918301611450565b60006020828403121561148257600080fd5b813567ffffffffffffffff8082111561149a57600080fd5b9083019060c082860312156114ae57600080fd5b6114b6611113565b6114bf836111d9565b8152602083013560208201526040830135828111156114dd57600080fd5b6114e987828601611208565b60408301525060608301358281111561150157600080fd5b61150d878286016112a9565b60608301525060808301358281111561152557600080fd5b61153187828601611408565b60808301525061154360a08401610dd0565b60a082015295945050505050565b60006020828403121561156357600080fd5b8151610b2d816111cb565b803560ff81168114610ddb57600080fd5b8183526000602080850194508260005b858110156115cb5760ff806115a38461156e565b168852806115b285850161156e565b168885015250604096870196919091019060010161158f565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561160857600080fd5b8260051b80836020870137939093016020019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60e080825281018c9052600061010082018e825b8f8110156116bc576116908235610dae565b813573ffffffffffffffffffffffffffffffffffffffff1683526020928301929091019060010161167e565b505082810360208401526116d1818d8f61157f565b73ffffffffffffffffffffffffffffffffffffffff8c166040850152905073ffffffffffffffffffffffffffffffffffffffff8a166060840152828103608084015261171e81898b6115d6565b905082810360a0840152611733818789611621565b905082810360c0840152611748818587611621565b9f9e505050505050505050505050505050565b600082601f83011261176c57600080fd5b8151602061177c611229836111e4565b82815260e0928302850182019282820191908785111561179b57600080fd5b8387015b8581101561184b5781818a0312156117b75760008081fd5b6117bf611136565b81516117ca81610dae565b8152818601516117d981610dae565b8187015260408281015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301517fff000000000000000000000000000000000000000000000000000000000000008116811461183a5760008081fd5b90820152845292840192810161179f565b5090979650505050505050565b6000602080838503121561186b57600080fd5b825167ffffffffffffffff8082111561188357600080fd5b8185019150604080838803121561189957600080fd5b6118a16110c7565b8351838111156118b057600080fd5b8401601f810189136118c157600080fd5b80516118cf611229826111e4565b81815260079190911b8201870190878101908b8311156118ee57600080fd5b928801925b8284101561194c576080848d03121561190c5760008081fd5b611914611159565b845161191f81610dae565b8152848a01518a8201528685015187820152606080860151908201528252608090930192908801906118f3565b84525050508385015191508282111561196457600080fd5b6119708883860161175b565b85820152809550505050505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610c30577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000602082840312156119fd57600080fd5b8135610b2d81610dae565b600060208284031215611a1a57600080fd5b5051919050565b602080825282518282018190526000919060409081850190868401855b82811015611a79578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101611a3e565b5091979650505050505050565b6000825160005b81811015611aa75760208186018101518583015201611a8d565b50600092019182525091905056",
        "metadata": {
          "compiler": {
            "version": "0.8.22+commit.4fc1097e"
          },
          "language": "Solidity",
          "output": {
            "abi": [
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "target",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "AddressEmptyCode"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "AddressInsufficientBalance"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "FailedInnerCall"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "NotPrivilegedSwapper"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "SafeERC20FailedOperation"
              },
              {
                "inputs": [
                  {
                    "internalType": "struct ThirdPartyDCAHubSwapper.AmountOfToken[]",
                    "name": "amounts",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  }
                ],
                "type": "error",
                "name": "SwapResults"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "TransactionTooOld"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  },
                  {
                    "internalType": "struct IDCAHubSwapHandler.TokenInSwap[]",
                    "name": "_tokens",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "reward",
                        "type": "uint256"
                      },
                      {
                        "internalType": "uint256",
                        "name": "toProvide",
                        "type": "uint256"
                      },
                      {
                        "internalType": "uint256",
                        "name": "platformFee",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "uint256[]",
                    "name": "",
                    "type": "uint256[]"
                  },
                  {
                    "internalType": "bytes",
                    "name": "_data",
                    "type": "bytes"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "DCAHubSwapCall"
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "PRIVILEGED_SWAPPER_ROLE",
                "outputs": [
                  {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHubWithAccessControl",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "address[]",
                    "name": "_tokens",
                    "type": "address[]"
                  },
                  {
                    "internalType": "struct IDCAHubSwapHandler.PairIndexes[]",
                    "name": "_pairsToSwap",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "uint8",
                        "name": "indexTokenA",
                        "type": "uint8"
                      },
                      {
                        "internalType": "uint8",
                        "name": "indexTokenB",
                        "type": "uint8"
                      }
                    ]
                  },
                  {
                    "internalType": "uint256[]",
                    "name": "_borrow",
                    "type": "uint256[]"
                  },
                  {
                    "internalType": "bytes",
                    "name": "_callbackData",
                    "type": "bytes"
                  },
                  {
                    "internalType": "bytes",
                    "name": "_oracleData",
                    "type": "bytes"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "executeSwap"
              }
            ],
            "devdoc": {
              "kind": "dev",
              "methods": {
                "executeSwap(address,address[],(uint8,uint8)[],uint256[],bytes,bytes)": {
                  "details": "There are some cases where the oracles differ from what the markets can offer, so a swap can't be executed. But      it could happen that even if the amounts being swap are really big, the difference between oracle and market is      only a few dollars. In that case, it would be nice if someone could just pay for the difference.      The idea here is that instead of calling the hub directly, someone could call the swapper with some native token,      so that when the swapper gets called, they can use that native token balance as part of the swap, and cover the      difference"
                }
              },
              "version": 1
            },
            "userdoc": {
              "kind": "user",
              "methods": {
                "executeSwap(address,address[],(uint8,uint8)[],uint256[],bytes,bytes)": {
                  "notice": "Executed a DCA swap"
                }
              },
              "version": 1
            }
          },
          "settings": {
            "remappings": [
              "@api3/=node_modules/@api3/",
              "@call-simulation/=node_modules/@mean-finance/call-simulation/src/",
              "@chainlink/=node_modules/@chainlink/",
              "@mean-finance/call-simulation/contracts/=node_modules/@mean-finance/call-simulation/src/",
              "@mean-finance/dca-v2-core/=node_modules/@mean-finance/dca-v2-core/",
              "@mean-finance/dca-v2-periphery/=node_modules/@mean-finance/dca-v2-periphery/",
              "@mean-finance/nft-descriptors/=node_modules/@mean-finance/nft-descriptors/",
              "@mean-finance/oracles/=node_modules/@mean-finance/oracles/",
              "@mean-finance/permit2-adapter/=node_modules/@mean-finance/permit2-adapter/src/",
              "@mean-finance/swappers/=node_modules/@mean-finance/swappers/",
              "@mean-finance/transformers/=node_modules/@mean-finance/transformers/solidity/contracts/transformers/",
              "@mean-finance/uniswap-v3-oracle/=node_modules/@mean-finance/uniswap-v3-oracle/",
              "@openzeppelin/contracts/=node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/",
              "@rari-capital/solmate/=lib/solmate/",
              "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
              "@uniswap/=node_modules/@uniswap/",
              "base64-sol/=node_modules/base64-sol/",
              "ds-test/=lib/solmate/lib/ds-test/src/",
              "forge-std/=lib/forge-std/src/",
              "keep3r-v2/=node_modules/keep3r-v2/",
              "solmate/=lib/solmate/src/",
              "sphinx/=lib/sphinx/packages/contracts/contracts/forge-std/src/"
            ],
            "optimizer": {
              "enabled": true,
              "runs": 9999
            },
            "metadata": {
              "bytecodeHash": "none",
              "appendCBOR": false
            },
            "compilationTarget": {
              "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/ThirdPartyDCAHubSwapper.sol": "ThirdPartyDCAHubSwapper"
            },
            "evmVersion": "paris",
            "libraries": {}
          },
          "sources": {
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol": {
              "keccak256": "0x4863e91434fa2bca89e8ff16bc35743103a89a39cfc8f9bb963d62fc430f3966",
              "urls": [
                "bzz-raw://3221e1acaa8a23c25c1d9dd984c7ffc83157b8ab9237cacc33a4559c0fac3c10",
                "dweb:/ipfs/QmeU25s3LdTCtqqr5jQbb1GwjAtR9jUhRaFhc4ginNy8dJ"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHubSwapCallee.sol": {
              "keccak256": "0xf47766c2ff738c6304d51f0c90ec688c4889c4c9e191baf81a1993cc5eec1f09",
              "urls": [
                "bzz-raw://5289f71ad088fbe7ada149e6556fcdf13d15eb57a8a45b732caee9e1634d4548",
                "dweb:/ipfs/QmYUJ6KVZPCxa6wbCTNa6eSH4zGEd7nQoQ5S5dn3uafnVo"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol": {
              "keccak256": "0x90b20be7552797f8967baa8228b3dfff60e129fa0ec4cf32e136ad0ffeb79f16",
              "urls": [
                "bzz-raw://ee317daf81e257a535ff79ef22349562c9dd4eb786ac5732ea15a1acd122b79e",
                "dweb:/ipfs/QmZaYuijMRck14WUDtQZjKcymdusiwBoo8xNSocwqH7tpL"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAHubSwapper/ThirdPartyDCAHubSwapper.sol": {
              "keccak256": "0xd532f9050df5a8135ddd401c6290f1ff0f21b1e998d70987d06665b556f886c4",
              "urls": [
                "bzz-raw://086de607728d5b44f43d6ec941ea844a445f6a06b063250ea369f321f775ff1d",
                "dweb:/ipfs/QmZCTrxDzVDvepwKy3Vz38rMj2pJ3A5SWFfpTPyvvrynfr"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/IAccessControl.sol": {
              "keccak256": "0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41",
              "urls": [
                "bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26",
                "dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
              "keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
              "urls": [
                "bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
                "dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
              "keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
              "urls": [
                "bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
                "dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
              "keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
              "urls": [
                "bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
                "dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
              "keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
              "urls": [
                "bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
                "dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
              "keccak256": "0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4",
              "urls": [
                "bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7",
                "dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Address.sol": {
              "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
              "urls": [
                "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
                "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
              "keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
              "urls": [
                "bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
                "dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol": {
              "keccak256": "0x2f5b3f67cf9f0f23be3eb0a8c8edd953ded1dcd8bf074a27e8d2869e200b0a73",
              "urls": [
                "bzz-raw://a7d71a7362006661db2c7f41c174607a8ddf86ab8b571925825d6c743373998c",
                "dweb:/ipfs/QmWnnLDXoEP5qDhnS18ktfZ2yGWLbCPoMCpt7S6HYTYzJN"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol": {
              "keccak256": "0xaa43e406144c5108a7f1ac330c434121f4acb7b50b6530dba4e205d2db520a0d",
              "urls": [
                "bzz-raw://4cda4fe659c15f32ff2f031905519bb8c59aa84fd5573ea25a331c09759ad86c",
                "dweb:/ipfs/QmRKjZiaYXXusZcL7wowKXTCXwfxU8Xv5RjWok4JxGH9xG"
              ],
              "license": "GPL-2.0-or-later"
            }
          },
          "version": 1
        },
        "methodIdentifiers": {
          "DCAHubSwapCall(address,(address,uint256,uint256,uint256)[],uint256[],bytes)": "5817c99e",
          "PRIVILEGED_SWAPPER_ROLE()": "64857370",
          "executeSwap(address,address[],(uint8,uint8)[],uint256[],bytes,bytes)": "d6347c1b"
        },
        "storageLayout": {
          "storage": [],
          "types": {}
        },
        "linkReferences": {},
        "deployedLinkReferences": {}
      },
      "buildInfoId": "25dc9d3d421f903049c2209282739291"
    },
    "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol:DCAFeeManager": {
      "artifact": {
        "abi": [
          {
            "type": "constructor",
            "inputs": [
              {
                "name": "_superAdmin",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_initialAdmins",
                "type": "address[]",
                "internalType": "address[]"
              }
            ],
            "stateMutability": "nonpayable"
          },
          {
            "type": "receive",
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "ADMIN_ROLE",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "DEFAULT_ADMIN_ROLE",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "PROTOCOL_TOKEN",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "address",
                "internalType": "address"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "SUPER_ADMIN_ROLE",
            "inputs": [],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "availableBalances",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_tokens",
                "type": "address[]",
                "internalType": "address[]"
              }
            ],
            "outputs": [
              {
                "name": "_balances",
                "type": "tuple[]",
                "internalType": "struct IDCAFeeManager.AvailableBalance[]",
                "components": [
                  {
                    "name": "token",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "platformBalance",
                    "type": "uint256",
                    "internalType": "uint256"
                  },
                  {
                    "name": "feeManagerBalance",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "getPositionKey",
            "inputs": [
              {
                "name": "_from",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "_to",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "stateMutability": "pure"
          },
          {
            "type": "function",
            "name": "getRoleAdmin",
            "inputs": [
              {
                "name": "role",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "grantRole",
            "inputs": [
              {
                "name": "role",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "account",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "hasRole",
            "inputs": [
              {
                "name": "role",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "account",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "multicall",
            "inputs": [
              {
                "name": "data",
                "type": "bytes[]",
                "internalType": "bytes[]"
              }
            ],
            "outputs": [
              {
                "name": "results",
                "type": "bytes[]",
                "internalType": "bytes[]"
              }
            ],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "renounceRole",
            "inputs": [
              {
                "name": "role",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "callerConfirmation",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "revokeAllowances",
            "inputs": [
              {
                "name": "_revokeActions",
                "type": "tuple[]",
                "internalType": "struct SwapAdapter.RevokeAction[]",
                "components": [
                  {
                    "name": "spender",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "tokens",
                    "type": "address[]",
                    "internalType": "contract IERC20[]"
                  }
                ]
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "revokeRole",
            "inputs": [
              {
                "name": "role",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "account",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "runSwapsAndTransferMany",
            "inputs": [
              {
                "name": "_parameters",
                "type": "tuple",
                "internalType": "struct IDCAFeeManager.RunSwapsAndTransferManyParams",
                "components": [
                  {
                    "name": "allowanceTargets",
                    "type": "tuple[]",
                    "internalType": "struct IDCAFeeManager.AllowanceTarget[]",
                    "components": [
                      {
                        "name": "token",
                        "type": "address",
                        "internalType": "contract IERC20"
                      },
                      {
                        "name": "allowanceTarget",
                        "type": "address",
                        "internalType": "address"
                      }
                    ]
                  },
                  {
                    "name": "swappers",
                    "type": "address[]",
                    "internalType": "address[]"
                  },
                  {
                    "name": "swaps",
                    "type": "bytes[]",
                    "internalType": "bytes[]"
                  },
                  {
                    "name": "swapContext",
                    "type": "tuple[]",
                    "internalType": "struct SwapContext[]",
                    "components": [
                      {
                        "name": "swapperIndex",
                        "type": "uint8",
                        "internalType": "uint8"
                      },
                      {
                        "name": "value",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ]
                  },
                  {
                    "name": "transferOutBalance",
                    "type": "tuple[]",
                    "internalType": "struct TransferOutBalance[]",
                    "components": [
                      {
                        "name": "token",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "recipient",
                        "type": "address",
                        "internalType": "address"
                      }
                    ]
                  }
                ]
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "simulate",
            "inputs": [
              {
                "name": "_calls",
                "type": "bytes[]",
                "internalType": "bytes[]"
              }
            ],
            "outputs": [
              {
                "name": "_results",
                "type": "tuple[]",
                "internalType": "struct ISimulationAdapter.SimulationResult[]",
                "components": [
                  {
                    "name": "success",
                    "type": "bool",
                    "internalType": "bool"
                  },
                  {
                    "name": "result",
                    "type": "bytes",
                    "internalType": "bytes"
                  },
                  {
                    "name": "gasSpent",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "simulateAndRevert",
            "inputs": [
              {
                "name": "_call",
                "type": "bytes",
                "internalType": "bytes"
              }
            ],
            "outputs": [],
            "stateMutability": "payable"
          },
          {
            "type": "function",
            "name": "supportsInterface",
            "inputs": [
              {
                "name": "_interfaceId",
                "type": "bytes4",
                "internalType": "bytes4"
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "bool",
                "internalType": "bool"
              }
            ],
            "stateMutability": "view"
          },
          {
            "type": "function",
            "name": "withdrawFromBalance",
            "inputs": [
              {
                "name": "_amountToWithdraw",
                "type": "tuple[]",
                "internalType": "struct IDCAHub.AmountOfToken[]",
                "components": [
                  {
                    "name": "token",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "function",
            "name": "withdrawFromPlatformBalance",
            "inputs": [
              {
                "name": "_hub",
                "type": "address",
                "internalType": "contract IDCAHub"
              },
              {
                "name": "_amountToWithdraw",
                "type": "tuple[]",
                "internalType": "struct IDCAHub.AmountOfToken[]",
                "components": [
                  {
                    "name": "token",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              },
              {
                "name": "_recipient",
                "type": "address",
                "internalType": "address"
              }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
          },
          {
            "type": "event",
            "name": "RoleAdminChanged",
            "inputs": [
              {
                "name": "role",
                "type": "bytes32",
                "indexed": true,
                "internalType": "bytes32"
              },
              {
                "name": "previousAdminRole",
                "type": "bytes32",
                "indexed": true,
                "internalType": "bytes32"
              },
              {
                "name": "newAdminRole",
                "type": "bytes32",
                "indexed": true,
                "internalType": "bytes32"
              }
            ],
            "anonymous": false
          },
          {
            "type": "event",
            "name": "RoleGranted",
            "inputs": [
              {
                "name": "role",
                "type": "bytes32",
                "indexed": true,
                "internalType": "bytes32"
              },
              {
                "name": "account",
                "type": "address",
                "indexed": true,
                "internalType": "address"
              },
              {
                "name": "sender",
                "type": "address",
                "indexed": true,
                "internalType": "address"
              }
            ],
            "anonymous": false
          },
          {
            "type": "event",
            "name": "RoleRevoked",
            "inputs": [
              {
                "name": "role",
                "type": "bytes32",
                "indexed": true,
                "internalType": "bytes32"
              },
              {
                "name": "account",
                "type": "address",
                "indexed": true,
                "internalType": "address"
              },
              {
                "name": "sender",
                "type": "address",
                "indexed": true,
                "internalType": "address"
              }
            ],
            "anonymous": false
          },
          {
            "type": "error",
            "name": "AccessControlBadConfirmation",
            "inputs": []
          },
          {
            "type": "error",
            "name": "AccessControlUnauthorizedAccount",
            "inputs": [
              {
                "name": "account",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "neededRole",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          },
          {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
              {
                "name": "target",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
              {
                "name": "account",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "FailedInnerCall",
            "inputs": []
          },
          {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
              {
                "name": "token",
                "type": "address",
                "internalType": "address"
              }
            ]
          },
          {
            "type": "error",
            "name": "SimulatedCall",
            "inputs": [
              {
                "name": "result",
                "type": "tuple",
                "internalType": "struct ISimulationAdapter.SimulationResult",
                "components": [
                  {
                    "name": "success",
                    "type": "bool",
                    "internalType": "bool"
                  },
                  {
                    "name": "result",
                    "type": "bytes",
                    "internalType": "bytes"
                  },
                  {
                    "name": "gasSpent",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ]
          },
          {
            "type": "error",
            "name": "ZeroAddress",
            "inputs": []
          }
        ],
        "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a6938038062002a69833981016040819052620000349162000247565b6001600160a01b0382166200005c5760405163d92e233d60e01b815260040160405180910390fd5b6200007760008051602062002a29833981519152806200011a565b620000a160008051602062002a4983398151915260008051602062002a298339815191526200011a565b620000bc60008051602062002a298339815191528362000165565b5060005b815181101562000111576200010760008051602062002a49833981519152838381518110620000f357620000f362000330565b60200260200101516200016560201b60201c565b50600101620000c0565b50505062000346565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166200020a576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620001c13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200020e565b5060005b92915050565b80516001600160a01b03811681146200022c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200025b57600080fd5b620002668362000214565b602084810151919350906001600160401b03808211156200028657600080fd5b818601915086601f8301126200029b57600080fd5b815181811115620002b057620002b062000231565b8060051b604051601f19603f83011681018181108582111715620002d857620002d862000231565b604052918252848201925083810185019189831115620002f757600080fd5b938501935b828510156200032057620003108562000214565b84529385019392850192620002fc565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b6126d380620003566000396000f3fe6080604052600436106101485760003560e01c80636c06005a116100c0578063bcbef20611610074578063e9c0407111610059578063e9c040711461045c578063fb0cb6a51461047c578063fb5235d8146104a957600080fd5b8063bcbef20614610429578063d547741f1461043c57600080fd5b806391d14854116100a557806391d1485414610396578063a217fddf146103e7578063ac9650d8146103fc57600080fd5b80636c06005a1461034257806375b238fc1461036257600080fd5b806336568abe116101175780634460bdd6116100fc5780634460bdd6146102a157806351f63ebc146102d5578063585cc6a5146102f557600080fd5b806336568abe146102615780633ed242b41461028157600080fd5b806301ffc9a714610154578063248a9ca3146101895780632f2ff15d146101c757806336351365146101e957600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f366004611b32565b6104bc565b60405190151581526020015b60405180910390f35b34801561019557600080fd5b506101b96101a4366004611b74565b60009081526020819052604090206001015490565b604051908152602001610180565b3480156101d357600080fd5b506101e76101e2366004611baf565b6104dc565b005b3480156101f557600080fd5b506101b9610204366004611bdf565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b34801561026d57600080fd5b506101e761027c366004611baf565b610507565b61029461028f366004611c59565b610565565b6040516101809190611d20565b3480156102ad57600080fd5b506101b97f7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c4768981565b3480156102e157600080fd5b506101e76102f0366004611de7565b61063d565b34801561030157600080fd5b5061031d73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610180565b34801561034e57600080fd5b506101e761035d366004611e3e565b6106fd565b34801561036e57600080fd5b506101b97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156103a257600080fd5b506101746103b1366004611baf565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156103f357600080fd5b506101b9600081565b34801561040857600080fd5b5061041c610417366004611c59565b6107b6565b6040516101809190611ea6565b6101e7610437366004611f1b565b61089e565b34801561044857600080fd5b506101e7610457366004611baf565b61097a565b34801561046857600080fd5b506101e7610477366004611c59565b61099f565b34801561048857600080fd5b5061049c610497366004611f8d565b6109d3565b6040516101809190611fe2565b6101e76104b7366004612051565b610c00565b60006104c782610dc7565b806104d657506104d682610e5f565b92915050565b6000828152602081905260409020600101546104f781610ef6565b6105018383610f03565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610556576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105608282610fff565b505050565b60608167ffffffffffffffff8111156105805761058061208c565b6040519080825280602002602001820160405280156105d757816020015b6105c4604051806060016040528060001515815260200160608152602001600081525090565b81526020019060019003908161059e5790505b50905060005b82811015610636576106118484838181106105fa576105fa6120bb565b905060200281019061060c91906120ea565b6110ba565b828281518110610623576106236120bb565b60209081029190910101526001016105dd565b5092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561066781610ef6565b60005b838110156106f6576000858583818110610686576106866120bb565b90506040020180360381019061069c91906121cc565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200151036106da5780516106d59085611250565b6106ed565b6106ed8160000151826020015186611327565b5060010161066a565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561072781610ef6565b6040517f560c649900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063560c64999061077d90879087908790600401612206565b600060405180830381600087803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b505050505050505050565b6040805160008152602081019091526060908267ffffffffffffffff8111156107e1576107e161208c565b60405190808252806020026020018201604052801561081457816020015b60608152602001906001900390816107ff5790505b50915060005b838110156108965761087130868684818110610838576108386120bb565b905060200281019061084a91906120ea565b8560405160200161085d939291906122c5565b6040516020818303038152906040526113c3565b838281518110610883576108836120bb565b602090810291909101015260010161081a565b505092915050565b60005a90506000803073ffffffffffffffffffffffffffffffffffffffff1685856040516108cd9291906122ec565b600060405180830381855af49150503d8060008114610908576040519150601f19603f3d011682016040523d82523d6000602084013e61090d565b606091505b509150915060005a61091f908561228b565b905060405180606001604052808415158152602001838152602001828152506040517f493703af00000000000000000000000000000000000000000000000000000000815260040161097191906122fc565b60405180910390fd5b60008281526020819052604090206001015461099581610ef6565b6105018383610fff565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756109c981610ef6565b610560838361143d565b60608167ffffffffffffffff8111156109ee576109ee61208c565b604051908082528060200260200182016040528015610a5957816020015b610a466040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b815260200190600190039081610a0c5790505b50905060005b82811015610bf8576000848483818110610a7b57610a7b6120bb565b9050602002016020810190610a90919061230f565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff80841680835292517fc67e32e900000000000000000000000000000000000000000000000000000000815260048101939093529293509160208301919089169063c67e32e990602401602060405180830381865afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b39919061232c565b81526040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209091019073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf919061232c565b815250838381518110610be457610be46120bb565b602090810291909101015250600101610a5f565b509392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610c2a81610ef6565b60005b610c378380612345565b9050811015610c8f576000610c4c8480612345565b83818110610c5c57610c5c6120bb565b905060400201803603810190610c7291906123ad565b9050610c86816000015182602001516114e8565b50600101610c2d565b5060005b610ca060408401846123ee565b9050811015610d5b576000610cb86060850185612345565b83818110610cc857610cc86120bb565b905060400201803603810190610cde9190612456565b9050610d52610cf060208601866123ee565b835160ff16818110610d0457610d046120bb565b9050602002016020810190610d19919061230f565b610d2660408701876123ee565b85818110610d3657610d366120bb565b9050602002810190610d4891906120ea565b846020015161152d565b50600101610c93565b5060005b610d6c6080840184612345565b9050811015610560576000610d846080850185612345565b83818110610d9457610d946120bb565b905060400201803603810190610daa91906123ad565b9050610dbe81600001518260200151611250565b50600101610d5f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3ed242b40000000000000000000000000000000000000000000000000000000014806104d657507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a7000000000000000000000000000000000000000000000000000000001492915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104d657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146104d6565b610f008133611585565b50565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610f953390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016104d6565b5060006104d6565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff1615610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016104d6565b6110e0604051806060016040528060001515815260200160608152602001600081525090565b6000803073ffffffffffffffffffffffffffffffffffffffff1663bcbef20660e01b8686604051602401611115929190612481565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161118091906124b0565b600060405180830381855af49150503d80600081146111bb576040519150601f19603f3d011682016040523d82523d6000602084013e6111c0565b606091505b5091509150811561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5754463f2053686f756c642068617665206661696c65642100000000000000006044820152606401610971565b6004810190508080602001905181019061124791906124e1565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611316576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611311919061232c565b611318565b475b90508015610560576105608382845b73ffffffffffffffffffffffffffffffffffffffff81166113455750335b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8416016113a25761056073ffffffffffffffffffffffffffffffffffffffff82168361160b565b61056073ffffffffffffffffffffffffffffffffffffffff841682846116e1565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113ed91906124b0565b600060405180830381855af49150503d8060008114611428576040519150601f19603f3d011682016040523d82523d6000602084013e61142d565b606091505b5091509150611247858383611762565b60005b8181101561056057600083838381811061145c5761145c6120bb565b905060200281019061146e91906125b5565b611477906125e9565b905060005b8160200151518110156114de576114d682600001516000846020015184815181106114a9576114a96120bb565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166117f49092919063ffffffff16565b60010161147c565b5050600101611440565b61152973ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6117f4565b5050565b6106f683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505073ffffffffffffffffffffffffffffffffffffffff8716919050836118cc565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611529576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610971565b80471015611647576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146116a1576040519150601f19603f3d011682016040523d82523d6000602084013e6116a6565b606091505b5050905080610560576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261056091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061198f565b6060826117775761177282611a25565b6117ed565b815115801561179b575073ffffffffffffffffffffffffffffffffffffffff84163b155b156117ea576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610971565b50805b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526118808482611a67565b6105015760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526118c291869182169063095ea7b39060640161171b565b610501848261198f565b60608147101561190a576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161193391906124b0565b60006040518083038185875af1925050503d8060008114611970576040519150601f19603f3d011682016040523d82523d6000602084013e611975565b606091505b5091509150611985868383611762565b9695505050505050565b60006119b173ffffffffffffffffffffffffffffffffffffffff841683611b24565b905080516000141580156119d65750808060200190518101906119d491906126b8565b155b15610560576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610971565b805115611a355780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611a9191906124b0565b6000604051808303816000865af19150503d8060008114611ace576040519150601f19603f3d011682016040523d82523d6000602084013e611ad3565b606091505b5091509150818015611afd575080511580611afd575080806020019051810190611afd91906126b8565b801561124757505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606117ed838360006118cc565b600060208284031215611b4457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146117ed57600080fd5b600060208284031215611b8657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f0057600080fd5b60008060408385031215611bc257600080fd5b823591506020830135611bd481611b8d565b809150509250929050565b60008060408385031215611bf257600080fd5b8235611bfd81611b8d565b91506020830135611bd481611b8d565b60008083601f840112611c1f57600080fd5b50813567ffffffffffffffff811115611c3757600080fd5b6020830191508360208260051b8501011115611c5257600080fd5b9250929050565b60008060208385031215611c6c57600080fd5b823567ffffffffffffffff811115611c8357600080fd5b611c8f85828601611c0d565b90969095509350505050565b60005b83811015611cb6578181015183820152602001611c9e565b50506000910152565b60008151808452611cd7816020860160208601611c9b565b601f01601f19169290920160200192915050565b8051151582526000602082015160606020850152611d0c6060850182611cbf565b604093840151949093019390935250919050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611d83858351611ceb565b94509285019290850190600101611d49565b5092979650505050505050565b60008083601f840112611db457600080fd5b50813567ffffffffffffffff811115611dcc57600080fd5b6020830191508360208260061b8501011115611c5257600080fd5b600080600060408486031215611dfc57600080fd5b833567ffffffffffffffff811115611e1357600080fd5b611e1f86828701611da2565b9094509250506020840135611e3381611b8d565b809150509250925092565b60008060008060608587031215611e5457600080fd5b8435611e5f81611b8d565b9350602085013567ffffffffffffffff811115611e7b57600080fd5b611e8787828801611da2565b9094509250506040850135611e9b81611b8d565b939692955090935050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611f09858351611cbf565b94509285019290850190600101611ecf565b60008060208385031215611f2e57600080fd5b823567ffffffffffffffff80821115611f4657600080fd5b818501915085601f830112611f5a57600080fd5b813581811115611f6957600080fd5b866020828501011115611f7b57600080fd5b60209290920196919550909350505050565b600080600060408486031215611fa257600080fd5b8335611fad81611b8d565b9250602084013567ffffffffffffffff811115611fc957600080fd5b611fd586828701611c0d565b9497909650939450505050565b602080825282518282018190526000919060409081850190868401855b82811015612044578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528501518585015260609093019290850190600101611fff565b5091979650505050505050565b60006020828403121561206357600080fd5b813567ffffffffffffffff81111561207a57600080fd5b820160a081850312156117ed57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261211f57600080fd5b83018035915067ffffffffffffffff82111561213a57600080fd5b602001915036819003821315611c5257600080fd5b6040805190810167ffffffffffffffff811182821017156121725761217261208c565b60405290565b6040516060810167ffffffffffffffff811182821017156121725761217261208c565b604051601f8201601f1916810167ffffffffffffffff811182821017156121c4576121c461208c565b604052919050565b6000604082840312156121de57600080fd5b6121e661214f565b82356121f181611b8d565b81526020928301359281019290925250919050565b60408082528181018490526000908560608401835b8781101561226057823561222e81611b8d565b73ffffffffffffffffffffffffffffffffffffffff16825260208381013590830152918301919083019060010161221b565b5080935050505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b818103818111156104d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8284823760008382016000815283516122e2818360208801611c9b565b0195945050505050565b8183823760009101908152919050565b6020815260006117ed6020830184611ceb565b60006020828403121561232157600080fd5b81356117ed81611b8d565b60006020828403121561233e57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261237a57600080fd5b83018035915067ffffffffffffffff82111561239557600080fd5b6020019150600681901b3603821315611c5257600080fd5b6000604082840312156123bf57600080fd5b6123c761214f565b82356123d281611b8d565b815260208301356123e281611b8d565b60208201529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261242357600080fd5b83018035915067ffffffffffffffff82111561243e57600080fd5b6020019150600581901b3603821315611c5257600080fd5b60006040828403121561246857600080fd5b61247061214f565b823560ff811681146121f157600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600082516124c2818460208701611c9b565b9190910192915050565b805180151581146124dc57600080fd5b919050565b600060208083850312156124f457600080fd5b825167ffffffffffffffff8082111561250c57600080fd5b908401906060828703121561252057600080fd5b612528612178565b612531836124cc565b8152838301518281111561254457600080fd5b8301601f8101881361255557600080fd5b8051838111156125675761256761208c565b61257986601f19601f8401160161219b565b9350808452888682840101111561258f57600080fd5b61259e81878601888501611c9b565b505092830152604090810151908201529392505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126124c257600080fd5b6000604082360312156125fb57600080fd5b61260361214f565b823561260e81611b8d565b815260208381013567ffffffffffffffff8082111561262c57600080fd5b9085019036601f83011261263f57600080fd5b8135818111156126515761265161208c565b8060051b915061266284830161219b565b818152918301840191848101903684111561267c57600080fd5b938501935b838510156126a6578435925061269683611b8d565b8282529385019390850190612681565b94860194909452509295945050505050565b6000602082840312156126ca57600080fd5b6117ed826124cc567613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
        "sourceName": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol",
        "contractName": "DCAFeeManager",
        "deployedBytecode": "0x6080604052600436106101485760003560e01c80636c06005a116100c0578063bcbef20611610074578063e9c0407111610059578063e9c040711461045c578063fb0cb6a51461047c578063fb5235d8146104a957600080fd5b8063bcbef20614610429578063d547741f1461043c57600080fd5b806391d14854116100a557806391d1485414610396578063a217fddf146103e7578063ac9650d8146103fc57600080fd5b80636c06005a1461034257806375b238fc1461036257600080fd5b806336568abe116101175780634460bdd6116100fc5780634460bdd6146102a157806351f63ebc146102d5578063585cc6a5146102f557600080fd5b806336568abe146102615780633ed242b41461028157600080fd5b806301ffc9a714610154578063248a9ca3146101895780632f2ff15d146101c757806336351365146101e957600080fd5b3661014f57005b600080fd5b34801561016057600080fd5b5061017461016f366004611b32565b6104bc565b60405190151581526020015b60405180910390f35b34801561019557600080fd5b506101b96101a4366004611b74565b60009081526020819052604090206001015490565b604051908152602001610180565b3480156101d357600080fd5b506101e76101e2366004611baf565b6104dc565b005b3480156101f557600080fd5b506101b9610204366004611bdf565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b34801561026d57600080fd5b506101e761027c366004611baf565b610507565b61029461028f366004611c59565b610565565b6040516101809190611d20565b3480156102ad57600080fd5b506101b97f7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c4768981565b3480156102e157600080fd5b506101e76102f0366004611de7565b61063d565b34801561030157600080fd5b5061031d73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610180565b34801561034e57600080fd5b506101e761035d366004611e3e565b6106fd565b34801561036e57600080fd5b506101b97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156103a257600080fd5b506101746103b1366004611baf565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156103f357600080fd5b506101b9600081565b34801561040857600080fd5b5061041c610417366004611c59565b6107b6565b6040516101809190611ea6565b6101e7610437366004611f1b565b61089e565b34801561044857600080fd5b506101e7610457366004611baf565b61097a565b34801561046857600080fd5b506101e7610477366004611c59565b61099f565b34801561048857600080fd5b5061049c610497366004611f8d565b6109d3565b6040516101809190611fe2565b6101e76104b7366004612051565b610c00565b60006104c782610dc7565b806104d657506104d682610e5f565b92915050565b6000828152602081905260409020600101546104f781610ef6565b6105018383610f03565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610556576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105608282610fff565b505050565b60608167ffffffffffffffff8111156105805761058061208c565b6040519080825280602002602001820160405280156105d757816020015b6105c4604051806060016040528060001515815260200160608152602001600081525090565b81526020019060019003908161059e5790505b50905060005b82811015610636576106118484838181106105fa576105fa6120bb565b905060200281019061060c91906120ea565b6110ba565b828281518110610623576106236120bb565b60209081029190910101526001016105dd565b5092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561066781610ef6565b60005b838110156106f6576000858583818110610686576106866120bb565b90506040020180360381019061069c91906121cc565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200151036106da5780516106d59085611250565b6106ed565b6106ed8160000151826020015186611327565b5060010161066a565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561072781610ef6565b6040517f560c649900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063560c64999061077d90879087908790600401612206565b600060405180830381600087803b15801561079757600080fd5b505af11580156107ab573d6000803e3d6000fd5b505050505050505050565b6040805160008152602081019091526060908267ffffffffffffffff8111156107e1576107e161208c565b60405190808252806020026020018201604052801561081457816020015b60608152602001906001900390816107ff5790505b50915060005b838110156108965761087130868684818110610838576108386120bb565b905060200281019061084a91906120ea565b8560405160200161085d939291906122c5565b6040516020818303038152906040526113c3565b838281518110610883576108836120bb565b602090810291909101015260010161081a565b505092915050565b60005a90506000803073ffffffffffffffffffffffffffffffffffffffff1685856040516108cd9291906122ec565b600060405180830381855af49150503d8060008114610908576040519150601f19603f3d011682016040523d82523d6000602084013e61090d565b606091505b509150915060005a61091f908561228b565b905060405180606001604052808415158152602001838152602001828152506040517f493703af00000000000000000000000000000000000000000000000000000000815260040161097191906122fc565b60405180910390fd5b60008281526020819052604090206001015461099581610ef6565b6105018383610fff565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756109c981610ef6565b610560838361143d565b60608167ffffffffffffffff8111156109ee576109ee61208c565b604051908082528060200260200182016040528015610a5957816020015b610a466040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b815260200190600190039081610a0c5790505b50905060005b82811015610bf8576000848483818110610a7b57610a7b6120bb565b9050602002016020810190610a90919061230f565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff80841680835292517fc67e32e900000000000000000000000000000000000000000000000000000000815260048101939093529293509160208301919089169063c67e32e990602401602060405180830381865afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b39919061232c565b81526040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260209091019073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf919061232c565b815250838381518110610be457610be46120bb565b602090810291909101015250600101610a5f565b509392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610c2a81610ef6565b60005b610c378380612345565b9050811015610c8f576000610c4c8480612345565b83818110610c5c57610c5c6120bb565b905060400201803603810190610c7291906123ad565b9050610c86816000015182602001516114e8565b50600101610c2d565b5060005b610ca060408401846123ee565b9050811015610d5b576000610cb86060850185612345565b83818110610cc857610cc86120bb565b905060400201803603810190610cde9190612456565b9050610d52610cf060208601866123ee565b835160ff16818110610d0457610d046120bb565b9050602002016020810190610d19919061230f565b610d2660408701876123ee565b85818110610d3657610d366120bb565b9050602002810190610d4891906120ea565b846020015161152d565b50600101610c93565b5060005b610d6c6080840184612345565b9050811015610560576000610d846080850185612345565b83818110610d9457610d946120bb565b905060400201803603810190610daa91906123ad565b9050610dbe81600001518260200151611250565b50600101610d5f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f3ed242b40000000000000000000000000000000000000000000000000000000014806104d657507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a7000000000000000000000000000000000000000000000000000000001492915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104d657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146104d6565b610f008133611585565b50565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610f953390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016104d6565b5060006104d6565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff1615610ff75760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016104d6565b6110e0604051806060016040528060001515815260200160608152602001600081525090565b6000803073ffffffffffffffffffffffffffffffffffffffff1663bcbef20660e01b8686604051602401611115929190612481565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161118091906124b0565b600060405180830381855af49150503d80600081146111bb576040519150601f19603f3d011682016040523d82523d6000602084013e6111c0565b606091505b5091509150811561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5754463f2053686f756c642068617665206661696c65642100000000000000006044820152606401610971565b6004810190508080602001905181019061124791906124e1565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611316576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611311919061232c565b611318565b475b90508015610560576105608382845b73ffffffffffffffffffffffffffffffffffffffff81166113455750335b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8416016113a25761056073ffffffffffffffffffffffffffffffffffffffff82168361160b565b61056073ffffffffffffffffffffffffffffffffffffffff841682846116e1565b60606000808473ffffffffffffffffffffffffffffffffffffffff16846040516113ed91906124b0565b600060405180830381855af49150503d8060008114611428576040519150601f19603f3d011682016040523d82523d6000602084013e61142d565b606091505b5091509150611247858383611762565b60005b8181101561056057600083838381811061145c5761145c6120bb565b905060200281019061146e91906125b5565b611477906125e9565b905060005b8160200151518110156114de576114d682600001516000846020015184815181106114a9576114a96120bb565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166117f49092919063ffffffff16565b60010161147c565b5050600101611440565b61152973ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6117f4565b5050565b6106f683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505073ffffffffffffffffffffffffffffffffffffffff8716919050836118cc565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611529576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610971565b80471015611647576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146116a1576040519150601f19603f3d011682016040523d82523d6000602084013e6116a6565b606091505b5050905080610560576040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261056091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061198f565b6060826117775761177282611a25565b6117ed565b815115801561179b575073ffffffffffffffffffffffffffffffffffffffff84163b155b156117ea576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610971565b50805b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526118808482611a67565b6105015760405173ffffffffffffffffffffffffffffffffffffffff8481166024830152600060448301526118c291869182169063095ea7b39060640161171b565b610501848261198f565b60608147101561190a576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610971565b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161193391906124b0565b60006040518083038185875af1925050503d8060008114611970576040519150601f19603f3d011682016040523d82523d6000602084013e611975565b606091505b5091509150611985868383611762565b9695505050505050565b60006119b173ffffffffffffffffffffffffffffffffffffffff841683611b24565b905080516000141580156119d65750808060200190518101906119d491906126b8565b155b15610560576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610971565b805115611a355780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611a9191906124b0565b6000604051808303816000865af19150503d8060008114611ace576040519150601f19603f3d011682016040523d82523d6000602084013e611ad3565b606091505b5091509150818015611afd575080511580611afd575080806020019051810190611afd91906126b8565b801561124757505050505073ffffffffffffffffffffffffffffffffffffffff163b151590565b60606117ed838360006118cc565b600060208284031215611b4457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146117ed57600080fd5b600060208284031215611b8657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f0057600080fd5b60008060408385031215611bc257600080fd5b823591506020830135611bd481611b8d565b809150509250929050565b60008060408385031215611bf257600080fd5b8235611bfd81611b8d565b91506020830135611bd481611b8d565b60008083601f840112611c1f57600080fd5b50813567ffffffffffffffff811115611c3757600080fd5b6020830191508360208260051b8501011115611c5257600080fd5b9250929050565b60008060208385031215611c6c57600080fd5b823567ffffffffffffffff811115611c8357600080fd5b611c8f85828601611c0d565b90969095509350505050565b60005b83811015611cb6578181015183820152602001611c9e565b50506000910152565b60008151808452611cd7816020860160208601611c9b565b601f01601f19169290920160200192915050565b8051151582526000602082015160606020850152611d0c6060850182611cbf565b604093840151949093019390935250919050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611d83858351611ceb565b94509285019290850190600101611d49565b5092979650505050505050565b60008083601f840112611db457600080fd5b50813567ffffffffffffffff811115611dcc57600080fd5b6020830191508360208260061b8501011115611c5257600080fd5b600080600060408486031215611dfc57600080fd5b833567ffffffffffffffff811115611e1357600080fd5b611e1f86828701611da2565b9094509250506020840135611e3381611b8d565b809150509250925092565b60008060008060608587031215611e5457600080fd5b8435611e5f81611b8d565b9350602085013567ffffffffffffffff811115611e7b57600080fd5b611e8787828801611da2565b9094509250506040850135611e9b81611b8d565b939692955090935050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611d95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611f09858351611cbf565b94509285019290850190600101611ecf565b60008060208385031215611f2e57600080fd5b823567ffffffffffffffff80821115611f4657600080fd5b818501915085601f830112611f5a57600080fd5b813581811115611f6957600080fd5b866020828501011115611f7b57600080fd5b60209290920196919550909350505050565b600080600060408486031215611fa257600080fd5b8335611fad81611b8d565b9250602084013567ffffffffffffffff811115611fc957600080fd5b611fd586828701611c0d565b9497909650939450505050565b602080825282518282018190526000919060409081850190868401855b82811015612044578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528501518585015260609093019290850190600101611fff565b5091979650505050505050565b60006020828403121561206357600080fd5b813567ffffffffffffffff81111561207a57600080fd5b820160a081850312156117ed57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261211f57600080fd5b83018035915067ffffffffffffffff82111561213a57600080fd5b602001915036819003821315611c5257600080fd5b6040805190810167ffffffffffffffff811182821017156121725761217261208c565b60405290565b6040516060810167ffffffffffffffff811182821017156121725761217261208c565b604051601f8201601f1916810167ffffffffffffffff811182821017156121c4576121c461208c565b604052919050565b6000604082840312156121de57600080fd5b6121e661214f565b82356121f181611b8d565b81526020928301359281019290925250919050565b60408082528181018490526000908560608401835b8781101561226057823561222e81611b8d565b73ffffffffffffffffffffffffffffffffffffffff16825260208381013590830152918301919083019060010161221b565b5080935050505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b818103818111156104d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8284823760008382016000815283516122e2818360208801611c9b565b0195945050505050565b8183823760009101908152919050565b6020815260006117ed6020830184611ceb565b60006020828403121561232157600080fd5b81356117ed81611b8d565b60006020828403121561233e57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261237a57600080fd5b83018035915067ffffffffffffffff82111561239557600080fd5b6020019150600681901b3603821315611c5257600080fd5b6000604082840312156123bf57600080fd5b6123c761214f565b82356123d281611b8d565b815260208301356123e281611b8d565b60208201529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261242357600080fd5b83018035915067ffffffffffffffff82111561243e57600080fd5b6020019150600581901b3603821315611c5257600080fd5b60006040828403121561246857600080fd5b61247061214f565b823560ff811681146121f157600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600082516124c2818460208701611c9b565b9190910192915050565b805180151581146124dc57600080fd5b919050565b600060208083850312156124f457600080fd5b825167ffffffffffffffff8082111561250c57600080fd5b908401906060828703121561252057600080fd5b612528612178565b612531836124cc565b8152838301518281111561254457600080fd5b8301601f8101881361255557600080fd5b8051838111156125675761256761208c565b61257986601f19601f8401160161219b565b9350808452888682840101111561258f57600080fd5b61259e81878601888501611c9b565b505092830152604090810151908201529392505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126124c257600080fd5b6000604082360312156125fb57600080fd5b61260361214f565b823561260e81611b8d565b815260208381013567ffffffffffffffff8082111561262c57600080fd5b9085019036601f83011261263f57600080fd5b8135818111156126515761265161208c565b8060051b915061266284830161219b565b818152918301840191848101903684111561267c57600080fd5b938501935b838510156126a6578435925061269683611b8d565b8282529385019390850190612681565b94860194909452509295945050505050565b6000602082840312156126ca57600080fd5b6117ed826124cc56",
        "metadata": {
          "compiler": {
            "version": "0.8.22+commit.4fc1097e"
          },
          "language": "Solidity",
          "output": {
            "abi": [
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_superAdmin",
                    "type": "address"
                  },
                  {
                    "internalType": "address[]",
                    "name": "_initialAdmins",
                    "type": "address[]"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "AccessControlBadConfirmation"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes32",
                    "name": "neededRole",
                    "type": "bytes32"
                  }
                ],
                "type": "error",
                "name": "AccessControlUnauthorizedAccount"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "target",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "AddressEmptyCode"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "AddressInsufficientBalance"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "FailedInnerCall"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  }
                ],
                "type": "error",
                "name": "SafeERC20FailedOperation"
              },
              {
                "inputs": [
                  {
                    "internalType": "struct ISimulationAdapter.SimulationResult",
                    "name": "result",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "bool",
                        "name": "success",
                        "type": "bool"
                      },
                      {
                        "internalType": "bytes",
                        "name": "result",
                        "type": "bytes"
                      },
                      {
                        "internalType": "uint256",
                        "name": "gasSpent",
                        "type": "uint256"
                      }
                    ]
                  }
                ],
                "type": "error",
                "name": "SimulatedCall"
              },
              {
                "inputs": [],
                "type": "error",
                "name": "ZeroAddress"
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32",
                    "indexed": true
                  },
                  {
                    "internalType": "bytes32",
                    "name": "previousAdminRole",
                    "type": "bytes32",
                    "indexed": true
                  },
                  {
                    "internalType": "bytes32",
                    "name": "newAdminRole",
                    "type": "bytes32",
                    "indexed": true
                  }
                ],
                "type": "event",
                "name": "RoleAdminChanged",
                "anonymous": false
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32",
                    "indexed": true
                  },
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address",
                    "indexed": true
                  },
                  {
                    "internalType": "address",
                    "name": "sender",
                    "type": "address",
                    "indexed": true
                  }
                ],
                "type": "event",
                "name": "RoleGranted",
                "anonymous": false
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32",
                    "indexed": true
                  },
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address",
                    "indexed": true
                  },
                  {
                    "internalType": "address",
                    "name": "sender",
                    "type": "address",
                    "indexed": true
                  }
                ],
                "type": "event",
                "name": "RoleRevoked",
                "anonymous": false
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "ADMIN_ROLE",
                "outputs": [
                  {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "DEFAULT_ADMIN_ROLE",
                "outputs": [
                  {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "PROTOCOL_TOKEN",
                "outputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ]
              },
              {
                "inputs": [],
                "stateMutability": "view",
                "type": "function",
                "name": "SUPER_ADMIN_ROLE",
                "outputs": [
                  {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "address[]",
                    "name": "_tokens",
                    "type": "address[]"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "availableBalances",
                "outputs": [
                  {
                    "internalType": "struct IDCAFeeManager.AvailableBalance[]",
                    "name": "_balances",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "platformBalance",
                        "type": "uint256"
                      },
                      {
                        "internalType": "uint256",
                        "name": "feeManagerBalance",
                        "type": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                  }
                ],
                "stateMutability": "pure",
                "type": "function",
                "name": "getPositionKey",
                "outputs": [
                  {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "getRoleAdmin",
                "outputs": [
                  {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "grantRole"
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "hasRole",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes[]",
                    "name": "data",
                    "type": "bytes[]"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "multicall",
                "outputs": [
                  {
                    "internalType": "bytes[]",
                    "name": "results",
                    "type": "bytes[]"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "callerConfirmation",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "renounceRole"
              },
              {
                "inputs": [
                  {
                    "internalType": "struct SwapAdapter.RevokeAction[]",
                    "name": "_revokeActions",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                      },
                      {
                        "internalType": "contract IERC20[]",
                        "name": "tokens",
                        "type": "address[]"
                      }
                    ]
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "revokeAllowances"
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                  },
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "revokeRole"
              },
              {
                "inputs": [
                  {
                    "internalType": "struct IDCAFeeManager.RunSwapsAndTransferManyParams",
                    "name": "_parameters",
                    "type": "tuple",
                    "components": [
                      {
                        "internalType": "struct IDCAFeeManager.AllowanceTarget[]",
                        "name": "allowanceTargets",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "contract IERC20",
                            "name": "token",
                            "type": "address"
                          },
                          {
                            "internalType": "address",
                            "name": "allowanceTarget",
                            "type": "address"
                          }
                        ]
                      },
                      {
                        "internalType": "address[]",
                        "name": "swappers",
                        "type": "address[]"
                      },
                      {
                        "internalType": "bytes[]",
                        "name": "swaps",
                        "type": "bytes[]"
                      },
                      {
                        "internalType": "struct SwapContext[]",
                        "name": "swapContext",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "uint8",
                            "name": "swapperIndex",
                            "type": "uint8"
                          },
                          {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                          }
                        ]
                      },
                      {
                        "internalType": "struct TransferOutBalance[]",
                        "name": "transferOutBalance",
                        "type": "tuple[]",
                        "components": [
                          {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                          },
                          {
                            "internalType": "address",
                            "name": "recipient",
                            "type": "address"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "runSwapsAndTransferMany"
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes[]",
                    "name": "_calls",
                    "type": "bytes[]"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "simulate",
                "outputs": [
                  {
                    "internalType": "struct ISimulationAdapter.SimulationResult[]",
                    "name": "_results",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "bool",
                        "name": "success",
                        "type": "bool"
                      },
                      {
                        "internalType": "bytes",
                        "name": "result",
                        "type": "bytes"
                      },
                      {
                        "internalType": "uint256",
                        "name": "gasSpent",
                        "type": "uint256"
                      }
                    ]
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes",
                    "name": "_call",
                    "type": "bytes"
                  }
                ],
                "stateMutability": "payable",
                "type": "function",
                "name": "simulateAndRevert"
              },
              {
                "inputs": [
                  {
                    "internalType": "bytes4",
                    "name": "_interfaceId",
                    "type": "bytes4"
                  }
                ],
                "stateMutability": "view",
                "type": "function",
                "name": "supportsInterface",
                "outputs": [
                  {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                  }
                ]
              },
              {
                "inputs": [
                  {
                    "internalType": "struct IDCAHub.AmountOfToken[]",
                    "name": "_amountToWithdraw",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "withdrawFromBalance"
              },
              {
                "inputs": [
                  {
                    "internalType": "contract IDCAHub",
                    "name": "_hub",
                    "type": "address"
                  },
                  {
                    "internalType": "struct IDCAHub.AmountOfToken[]",
                    "name": "_amountToWithdraw",
                    "type": "tuple[]",
                    "components": [
                      {
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                      },
                      {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                      }
                    ]
                  },
                  {
                    "internalType": "address",
                    "name": "_recipient",
                    "type": "address"
                  }
                ],
                "stateMutability": "nonpayable",
                "type": "function",
                "name": "withdrawFromPlatformBalance"
              },
              {
                "inputs": [],
                "stateMutability": "payable",
                "type": "receive"
              }
            ],
            "devdoc": {
              "kind": "dev",
              "methods": {
                "availableBalances(address,address[])": {
                  "details": "This is meant for off-chan purposes",
                  "params": {
                    "hub": "The address of the DCA Hub",
                    "tokens": "The tokens to check the balance for"
                  },
                  "returns": {
                    "_balances": "How much is available for withdraw, for the given tokens"
                  }
                },
                "getRoleAdmin(bytes32)": {
                  "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
                },
                "grantRole(bytes32,address)": {
                  "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
                },
                "hasRole(bytes32,address)": {
                  "details": "Returns `true` if `account` has been granted `role`."
                },
                "multicall(bytes[])": {
                  "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
                  "details": "Receives and executes a batch of function calls on this contract."
                },
                "renounceRole(bytes32,address)": {
                  "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
                },
                "revokeAllowances((address,address[])[])": {
                  "details": "Can only be executed by admins",
                  "params": {
                    "revokeActions": "The spenders and tokens to revoke"
                  }
                },
                "revokeRole(bytes32,address)": {
                  "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
                },
                "runSwapsAndTransferMany(((address,address)[],address[],bytes[],(uint8,uint256)[],(address,address)[]))": {
                  "details": "Can only be executed by admins",
                  "params": {
                    "parameters": "The parameters for the swap"
                  }
                },
                "simulate(bytes[])": {
                  "details": "This function is meant to be used for off-chain simulation and should not be called on-chain",
                  "params": {
                    "calls": "The calls to simulate"
                  },
                  "returns": {
                    "_results": "Each simulation result"
                  }
                },
                "simulateAndRevert(bytes)": {
                  "details": "This is meant to be used internally, do not call!",
                  "params": {
                    "_call": "The call to simulate"
                  }
                },
                "withdrawFromBalance((address,uint256)[],address)": {
                  "details": "Can only be executed by admins",
                  "params": {
                    "amountToWithdraw": "The tokens to withdraw, and their amounts",
                    "recipient": "The address of the recipient"
                  }
                },
                "withdrawFromPlatformBalance(address,(address,uint256)[],address)": {
                  "details": "Can only be executed by admins",
                  "params": {
                    "amountToWithdraw": "The tokens to withdraw, and their amounts",
                    "hub": "The address of the DCA Hub",
                    "recipient": "The address of the recipient"
                  }
                }
              },
              "version": 1
            },
            "userdoc": {
              "kind": "user",
              "methods": {
                "availableBalances(address,address[])": {
                  "notice": "Returns how much is available for withdraw, for the given tokens"
                },
                "revokeAllowances((address,address[])[])": {
                  "notice": "Revokes ERC20 allowances for the given spenders"
                },
                "runSwapsAndTransferMany(((address,address)[],address[],bytes[],(uint8,uint256)[],(address,address)[]))": {
                  "notice": "Executes multiple swaps"
                },
                "simulate(bytes[])": {
                  "notice": "Executes individual simulations against this contract but doesn't modify the state when doing so"
                },
                "simulateAndRevert(bytes)": {
                  "notice": "Executes a call agains this contract and reverts with the result"
                },
                "withdrawFromBalance((address,uint256)[],address)": {
                  "notice": "Withdraws tokens from the contract's balance, and sends them to the given recipient"
                },
                "withdrawFromPlatformBalance(address,(address,uint256)[],address)": {
                  "notice": "Withdraws tokens from the platform balance, and sends them to the given recipient"
                }
              },
              "version": 1
            }
          },
          "settings": {
            "remappings": [
              "@api3/=node_modules/@api3/",
              "@call-simulation/=node_modules/@mean-finance/call-simulation/src/",
              "@chainlink/=node_modules/@chainlink/",
              "@mean-finance/call-simulation/contracts/=node_modules/@mean-finance/call-simulation/src/",
              "@mean-finance/dca-v2-core/=node_modules/@mean-finance/dca-v2-core/",
              "@mean-finance/dca-v2-periphery/=node_modules/@mean-finance/dca-v2-periphery/",
              "@mean-finance/nft-descriptors/=node_modules/@mean-finance/nft-descriptors/",
              "@mean-finance/oracles/=node_modules/@mean-finance/oracles/",
              "@mean-finance/permit2-adapter/=node_modules/@mean-finance/permit2-adapter/src/",
              "@mean-finance/swappers/=node_modules/@mean-finance/swappers/",
              "@mean-finance/transformers/=node_modules/@mean-finance/transformers/solidity/contracts/transformers/",
              "@mean-finance/uniswap-v3-oracle/=node_modules/@mean-finance/uniswap-v3-oracle/",
              "@openzeppelin/contracts/=node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/",
              "@rari-capital/solmate/=lib/solmate/",
              "@sphinx-labs/contracts/=lib/sphinx/packages/contracts/contracts/foundry/",
              "@uniswap/=node_modules/@uniswap/",
              "base64-sol/=node_modules/base64-sol/",
              "ds-test/=lib/solmate/lib/ds-test/src/",
              "forge-std/=lib/forge-std/src/",
              "keep3r-v2/=node_modules/keep3r-v2/",
              "solmate/=lib/solmate/src/",
              "sphinx/=lib/sphinx/packages/contracts/contracts/forge-std/src/"
            ],
            "optimizer": {
              "enabled": true,
              "runs": 9999
            },
            "metadata": {
              "bytecodeHash": "none",
              "appendCBOR": false
            },
            "compilationTarget": {
              "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol": "DCAFeeManager"
            },
            "evmVersion": "paris",
            "libraries": {}
          },
          "sources": {
            "node_modules/@mean-finance/call-simulation/src/SimulationAdapter.sol": {
              "keccak256": "0xe148a0031bdddc2f2d6e8b90acef9e42eccdbac40b74d210ba83c1ea8471103a",
              "urls": [
                "bzz-raw://c65631b71f70a8159f7a53faec43b21116067445c86766a6c7dff15042776f4f",
                "dweb:/ipfs/QmfCKoTS9GxEpKKiP9oXPE7Dj2MvAfBsyiuag5jvUwc8w8"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/call-simulation/src/interfaces/ISimulationAdapter.sol": {
              "keccak256": "0x1924d3306a793153b7b67d613b5e558559cd5801ff199c54945cd1c89c6b19e3",
              "urls": [
                "bzz-raw://3cec285dc59df82aab5e85865b1f4b4772647885d0b2635cf60345a452199c02",
                "dweb:/ipfs/QmasEgnHLMivVwohrPagsbsVji9wDy3e7mR1w5gHTrSsnb"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/call-simulation/src/interfaces/external/IERC165.sol": {
              "keccak256": "0x1c1214332a0ed674c34d41245d9411f59edf0522247cfa019e40724e79df1f4a",
              "urls": [
                "bzz-raw://8feaf90201d5e8eb2ae015568c7e1c4c52034b1d484f8af9356a18a94f4fc1e5",
                "dweb:/ipfs/QmUjZV5DSzcrsxxvQm58av7kxmqSmiNet2ghk9A6Jdq4ws"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol": {
              "keccak256": "0x4863e91434fa2bca89e8ff16bc35743103a89a39cfc8f9bb963d62fc430f3966",
              "urls": [
                "bzz-raw://3221e1acaa8a23c25c1d9dd984c7ffc83157b8ab9237cacc33a4559c0fac3c10",
                "dweb:/ipfs/QmeU25s3LdTCtqqr5jQbb1GwjAtR9jUhRaFhc4ginNy8dJ"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol": {
              "keccak256": "0x90b20be7552797f8967baa8228b3dfff60e129fa0ec4cf32e136ad0ffeb79f16",
              "urls": [
                "bzz-raw://ee317daf81e257a535ff79ef22349562c9dd4eb786ac5732ea15a1acd122b79e",
                "dweb:/ipfs/QmZaYuijMRck14WUDtQZjKcymdusiwBoo8xNSocwqH7tpL"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol": {
              "keccak256": "0xb9cb240c6fc001600a17fa719d5f7f610fc77088c1499a1610d74fff48e1ec2b",
              "urls": [
                "bzz-raw://4232ea3d38a1c5f3d1478c39d78f86b3c141003d3382e18c53bbe7c7e1d8305c",
                "dweb:/ipfs/QmU3kdeWBhxyRD8zMvbg8pHsokuwgEMyDwBRyNBnjDTnjW"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/interfaces/IDCAFeeManager.sol": {
              "keccak256": "0x96810a289a0fc3cf3c0af3eca92a829d046fcab556eb5af519c88ecb8524155a",
              "urls": [
                "bzz-raw://fd09ad2c26f4bf1f4a0bafcc619321d6e2b53d1010975bf3032b9d194fa953dd",
                "dweb:/ipfs/QmeW2KLGnT5sYm6Esh67sxNPPxbUrpr9U5WEGMMdRxTwTm"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/SwapAdapter.sol": {
              "keccak256": "0xfab9c7c666c73fbc396f20d6c232fda30f2472f56d8cf0db771901bf27d18e80",
              "urls": [
                "bzz-raw://8dc7b71f19cbe88f3b1281571df3428108c894cb83034b4dd0ee8bab6c7005b7",
                "dweb:/ipfs/Qmen6tm11BFYeU2Hh6FT34e4PUyHJRcRq5aDt3CToNazGE"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/types/SwapContext.sol": {
              "keccak256": "0xe370db0fc59439b5af91e691842185c86f8a04d94b81dcb4f8c1b425e1dcc76c",
              "urls": [
                "bzz-raw://3f67f3f773c4c635839cefbf7010315faaf7b0c03e0ea75d9fcca53c5a85131b",
                "dweb:/ipfs/QmSe6zsiFzD1XgeZfr2GSg2euvs8WPdMT3j2dCnHEwechX"
              ],
              "license": null
            },
            "node_modules/@mean-finance/dca-v2-periphery/contracts/utils/types/TransferOutBalance.sol": {
              "keccak256": "0xec10df44de6484e8f7319bfa2f8dd0e17881c1a8374994e2b4ff5a25086d86e6",
              "urls": [
                "bzz-raw://c79538870864ac1f9a16a900e1c03e5634856953309b9919003109c374eff470",
                "dweb:/ipfs/QmPzudBFjyCkHbFLSuo9Joh8hXTiPHdF7aPd61JRNjxDhG"
              ],
              "license": null
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/AccessControl.sol": {
              "keccak256": "0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308",
              "urls": [
                "bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80",
                "dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/access/IAccessControl.sol": {
              "keccak256": "0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41",
              "urls": [
                "bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26",
                "dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
              "keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
              "urls": [
                "bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
                "dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
              "keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
              "urls": [
                "bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
                "dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
              "keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
              "urls": [
                "bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
                "dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
              "keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
              "urls": [
                "bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
                "dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
              "keccak256": "0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4",
              "urls": [
                "bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7",
                "dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Address.sol": {
              "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
              "urls": [
                "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
                "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Context.sol": {
              "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
              "urls": [
                "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
                "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/Multicall.sol": {
              "keccak256": "0x8bbd8e639a2845206c2525c3e41892232a78372d952974bc1d2809b6879f6946",
              "urls": [
                "bzz-raw://1c92f1b562e8603218d97751af56733d2f695f16da82389d53139d5e63496a45",
                "dweb:/ipfs/QmRiVMRTFjYBHDt5mN4E6TMotiE28XgWxEBPGewp5GTZ9X"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
              "keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
              "urls": [
                "bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
                "dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/dca-v2-periphery/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
              "keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
              "urls": [
                "bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
                "dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
              ],
              "license": "MIT"
            },
            "node_modules/@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol": {
              "keccak256": "0x2f5b3f67cf9f0f23be3eb0a8c8edd953ded1dcd8bf074a27e8d2869e200b0a73",
              "urls": [
                "bzz-raw://a7d71a7362006661db2c7f41c174607a8ddf86ab8b571925825d6c743373998c",
                "dweb:/ipfs/QmWnnLDXoEP5qDhnS18ktfZ2yGWLbCPoMCpt7S6HYTYzJN"
              ],
              "license": "GPL-2.0-or-later"
            },
            "node_modules/@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol": {
              "keccak256": "0xaa43e406144c5108a7f1ac330c434121f4acb7b50b6530dba4e205d2db520a0d",
              "urls": [
                "bzz-raw://4cda4fe659c15f32ff2f031905519bb8c59aa84fd5573ea25a331c09759ad86c",
                "dweb:/ipfs/QmRKjZiaYXXusZcL7wowKXTCXwfxU8Xv5RjWok4JxGH9xG"
              ],
              "license": "GPL-2.0-or-later"
            }
          },
          "version": 1
        },
        "methodIdentifiers": {
          "ADMIN_ROLE()": "75b238fc",
          "DEFAULT_ADMIN_ROLE()": "a217fddf",
          "PROTOCOL_TOKEN()": "585cc6a5",
          "SUPER_ADMIN_ROLE()": "4460bdd6",
          "availableBalances(address,address[])": "fb0cb6a5",
          "getPositionKey(address,address)": "36351365",
          "getRoleAdmin(bytes32)": "248a9ca3",
          "grantRole(bytes32,address)": "2f2ff15d",
          "hasRole(bytes32,address)": "91d14854",
          "multicall(bytes[])": "ac9650d8",
          "renounceRole(bytes32,address)": "36568abe",
          "revokeAllowances((address,address[])[])": "e9c04071",
          "revokeRole(bytes32,address)": "d547741f",
          "runSwapsAndTransferMany(((address,address)[],address[],bytes[],(uint8,uint256)[],(address,address)[]))": "fb5235d8",
          "simulate(bytes[])": "3ed242b4",
          "simulateAndRevert(bytes)": "bcbef206",
          "supportsInterface(bytes4)": "01ffc9a7",
          "withdrawFromBalance((address,uint256)[],address)": "51f63ebc",
          "withdrawFromPlatformBalance(address,(address,uint256)[],address)": "6c06005a"
        },
        "storageLayout": {
          "storage": [
            {
              "astId": 6750,
              "contract": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol:DCAFeeManager",
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)6745_storage)"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "encoding": "inplace",
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "encoding": "inplace",
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => bool)",
              "numberOfBytes": "32",
              "value": "t_bool"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)6745_storage)": {
              "encoding": "mapping",
              "key": "t_bytes32",
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32",
              "value": "t_struct(RoleData)6745_storage"
            },
            "t_struct(RoleData)6745_storage": {
              "encoding": "inplace",
              "label": "struct AccessControl.RoleData",
              "numberOfBytes": "64",
              "members": [
                {
                  "astId": 6742,
                  "contract": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol:DCAFeeManager",
                  "label": "hasRole",
                  "offset": 0,
                  "slot": "0",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "astId": 6744,
                  "contract": "node_modules/@mean-finance/dca-v2-periphery/contracts/DCAFeeManager/DCAFeeManager.sol:DCAFeeManager",
                  "label": "adminRole",
                  "offset": 0,
                  "slot": "1",
                  "type": "t_bytes32"
                }
              ]
            }
          }
        },
        "linkReferences": {},
        "deployedLinkReferences": {}
      },
      "buildInfoId": "25dc9d3d421f903049c2209282739291"
    }
  }
}
