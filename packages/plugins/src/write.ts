import { writeFileSync } from 'fs'

const str =
"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.22;\n\nimport '../../interfaces/utils/IGovernable.sol';\n\n/**\n * @notice This contract is meant to be used in other contracts. By using this contract,\n *         a specific address will be given a \"governor\" role, which basically will be able to\n *         control certains aspects of the contract. There are other contracts that do the same,\n *         but this contract forces a new governor to accept the role before it's transferred.\n *         This is a basically a safety measure to prevent losing access to the contract.\n */\nabstract contract Governable is IGovernable {\n  /// @inheritdoc IGovernable\n  address public governor;\n\n  /// @inheritdoc IGovernable\n  address public pendingGovernor;\n\n  constructor(address _governor) {\n    if (_governor == address(0)) revert GovernorIsZeroAddress();\n    governor = _governor;\n  }\n\n  /// @inheritdoc IGovernable\n  function isGovernor(address _account) public view returns (bool) {\n    return _account == governor;\n  }\n\n  /// @inheritdoc IGovernable\n  function isPendingGovernor(address _account) public view returns (bool) {\n    return _account == pendingGovernor;\n  }\n\n  /// @inheritdoc IGovernable\n  function setPendingGovernor(address _pendingGovernor) external onlyGovernor {\n    pendingGovernor = _pendingGovernor;\n    emit PendingGovernorSet(_pendingGovernor);\n  }\n\n  /// @inheritdoc IGovernable\n  function acceptPendingGovernor() external onlyPendingGovernor {\n    governor = pendingGovernor;\n    pendingGovernor = address(0);\n    emit PendingGovernorAccepted();\n  }\n\n  modifier onlyGovernor() {\n    if (!isGovernor(msg.sender)) revert OnlyGovernor();\n    _;\n  }\n\n  modifier onlyPendingGovernor() {\n    if (!isPendingGovernor(msg.sender)) revert OnlyPendingGovernor();\n    _;\n  }\n}\n"
writeFileSync('Governable.sol', str)
