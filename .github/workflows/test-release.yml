name: Test Release

on:
  push:
    branches:
      - pate/monorepo-release-with-branch

jobs:
  release-prod:
    name: Release packages (test)
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@master
        with:
          fetch-depth: 0

      - name: Setup Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn --frozen-lockfile --network-concurrency 1

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Build
        run: yarn build:release

      - name: Publish Solidity Library
        uses: actions/github-script@v6
        with:
          script: |
            const github = require('@actions/github');
            const core = require('@actions/core');
            const exec = require('@actions/exec');

            async function run() {
              const contractsPackage = 'v0.16.0'

              if (contractsPackage) {
                const token = core.getInput('github-token', {required: true});
                const octokit = github.getOctokit(token);
                const context = github.context;
                const newBranchName = `update-contracts-${Date.now()}`;

                // Create a new branch
                const ref = `refs/heads/${newBranchName}`;
                const masterRef = `refs/heads/${context.ref.split('/').pop()}`;
                const sha = (await octokit.git.getRef({
                  ...context.repo,
                  ref: masterRef,
                })).data.object.sha;

                await octokit.git.createRef({
                  ...context.repo,
                  ref,
                  sha,
                });

                await exec.exec('git', ['push', 'origin', newBranchName]);
              }
            }

            run().catch(err => {
              core.setFailed(`Action failed with error ${err}`);
            });
